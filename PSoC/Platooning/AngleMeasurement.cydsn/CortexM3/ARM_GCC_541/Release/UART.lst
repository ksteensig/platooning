ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"UART.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.UART_Init,"ax",%progbits
  20              		.align	1
  21              		.global	UART_Init
  22              		.thumb
  23              		.thumb_func
  24              		.type	UART_Init, %function
  25              	UART_Init:
  26              	.LFB1:
  27              		.file 1 "Generated_Source\\PSoC5\\UART.c"
   1:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/UART.c **** * File Name: UART.c
   3:Generated_Source\PSoC5/UART.c **** * Version 2.50
   4:Generated_Source\PSoC5/UART.c **** *
   5:Generated_Source\PSoC5/UART.c **** * Description:
   6:Generated_Source\PSoC5/UART.c **** *  This file provides all API functionality of the UART component
   7:Generated_Source\PSoC5/UART.c **** *
   8:Generated_Source\PSoC5/UART.c **** * Note:
   9:Generated_Source\PSoC5/UART.c **** *
  10:Generated_Source\PSoC5/UART.c **** ********************************************************************************
  11:Generated_Source\PSoC5/UART.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:Generated_Source\PSoC5/UART.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:Generated_Source\PSoC5/UART.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:Generated_Source\PSoC5/UART.c **** * the software package with which this file was provided.
  15:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
  16:Generated_Source\PSoC5/UART.c **** 
  17:Generated_Source\PSoC5/UART.c **** #include "UART.h"
  18:Generated_Source\PSoC5/UART.c **** #if (UART_INTERNAL_CLOCK_USED)
  19:Generated_Source\PSoC5/UART.c ****     #include "UART_IntClock.h"
  20:Generated_Source\PSoC5/UART.c **** #endif /* End UART_INTERNAL_CLOCK_USED */
  21:Generated_Source\PSoC5/UART.c **** 
  22:Generated_Source\PSoC5/UART.c **** 
  23:Generated_Source\PSoC5/UART.c **** /***************************************
  24:Generated_Source\PSoC5/UART.c **** * Global data allocation
  25:Generated_Source\PSoC5/UART.c **** ***************************************/
  26:Generated_Source\PSoC5/UART.c **** 
  27:Generated_Source\PSoC5/UART.c **** uint8 UART_initVar = 0u;
  28:Generated_Source\PSoC5/UART.c **** 
  29:Generated_Source\PSoC5/UART.c **** #if (UART_TX_INTERRUPT_ENABLED && UART_TX_ENABLED)
  30:Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_txBuffer[UART_TX_BUFFER_SIZE];
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 2


  31:Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_txBufferRead = 0u;
  32:Generated_Source\PSoC5/UART.c ****     uint8 UART_txBufferWrite = 0u;
  33:Generated_Source\PSoC5/UART.c **** #endif /* (UART_TX_INTERRUPT_ENABLED && UART_TX_ENABLED) */
  34:Generated_Source\PSoC5/UART.c **** 
  35:Generated_Source\PSoC5/UART.c **** #if (UART_RX_INTERRUPT_ENABLED && (UART_RX_ENABLED || UART_HD_ENABLED))
  36:Generated_Source\PSoC5/UART.c ****     uint8 UART_errorStatus = 0u;
  37:Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBuffer[UART_RX_BUFFER_SIZE];
  38:Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBufferRead  = 0u;
  39:Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBufferWrite = 0u;
  40:Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBufferLoopDetect = 0u;
  41:Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBufferOverflow   = 0u;
  42:Generated_Source\PSoC5/UART.c ****     #if (UART_RXHW_ADDRESS_ENABLED)
  43:Generated_Source\PSoC5/UART.c ****         volatile uint8 UART_rxAddressMode = UART_RX_ADDRESS_MODE;
  44:Generated_Source\PSoC5/UART.c ****         volatile uint8 UART_rxAddressDetected = 0u;
  45:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RXHW_ADDRESS_ENABLED) */
  46:Generated_Source\PSoC5/UART.c **** #endif /* (UART_RX_INTERRUPT_ENABLED && (UART_RX_ENABLED || UART_HD_ENABLED)) */
  47:Generated_Source\PSoC5/UART.c **** 
  48:Generated_Source\PSoC5/UART.c **** 
  49:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
  50:Generated_Source\PSoC5/UART.c **** * Function Name: UART_Start
  51:Generated_Source\PSoC5/UART.c **** ********************************************************************************
  52:Generated_Source\PSoC5/UART.c **** *
  53:Generated_Source\PSoC5/UART.c **** * Summary:
  54:Generated_Source\PSoC5/UART.c **** *  This is the preferred method to begin component operation.
  55:Generated_Source\PSoC5/UART.c **** *  UART_Start() sets the initVar variable, calls the
  56:Generated_Source\PSoC5/UART.c **** *  UART_Init() function, and then calls the
  57:Generated_Source\PSoC5/UART.c **** *  UART_Enable() function.
  58:Generated_Source\PSoC5/UART.c **** *
  59:Generated_Source\PSoC5/UART.c **** * Parameters:
  60:Generated_Source\PSoC5/UART.c **** *  None.
  61:Generated_Source\PSoC5/UART.c **** *
  62:Generated_Source\PSoC5/UART.c **** * Return:
  63:Generated_Source\PSoC5/UART.c **** *  None.
  64:Generated_Source\PSoC5/UART.c **** *
  65:Generated_Source\PSoC5/UART.c **** * Global variables:
  66:Generated_Source\PSoC5/UART.c **** *  The UART_intiVar variable is used to indicate initial
  67:Generated_Source\PSoC5/UART.c **** *  configuration of this component. The variable is initialized to zero (0u)
  68:Generated_Source\PSoC5/UART.c **** *  and set to one (1u) the first time UART_Start() is called. This
  69:Generated_Source\PSoC5/UART.c **** *  allows for component initialization without re-initialization in all
  70:Generated_Source\PSoC5/UART.c **** *  subsequent calls to the UART_Start() routine.
  71:Generated_Source\PSoC5/UART.c **** *
  72:Generated_Source\PSoC5/UART.c **** * Reentrant:
  73:Generated_Source\PSoC5/UART.c **** *  No.
  74:Generated_Source\PSoC5/UART.c **** *
  75:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
  76:Generated_Source\PSoC5/UART.c **** void UART_Start(void) 
  77:Generated_Source\PSoC5/UART.c **** {
  78:Generated_Source\PSoC5/UART.c ****     /* If not initialized then initialize all required hardware and software */
  79:Generated_Source\PSoC5/UART.c ****     if(UART_initVar == 0u)
  80:Generated_Source\PSoC5/UART.c ****     {
  81:Generated_Source\PSoC5/UART.c ****         UART_Init();
  82:Generated_Source\PSoC5/UART.c ****         UART_initVar = 1u;
  83:Generated_Source\PSoC5/UART.c ****     }
  84:Generated_Source\PSoC5/UART.c **** 
  85:Generated_Source\PSoC5/UART.c ****     UART_Enable();
  86:Generated_Source\PSoC5/UART.c **** }
  87:Generated_Source\PSoC5/UART.c **** 
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 3


  88:Generated_Source\PSoC5/UART.c **** 
  89:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
  90:Generated_Source\PSoC5/UART.c **** * Function Name: UART_Init
  91:Generated_Source\PSoC5/UART.c **** ********************************************************************************
  92:Generated_Source\PSoC5/UART.c **** *
  93:Generated_Source\PSoC5/UART.c **** * Summary:
  94:Generated_Source\PSoC5/UART.c **** *  Initializes or restores the component according to the customizer Configure
  95:Generated_Source\PSoC5/UART.c **** *  dialog settings. It is not necessary to call UART_Init() because
  96:Generated_Source\PSoC5/UART.c **** *  the UART_Start() API calls this function and is the preferred
  97:Generated_Source\PSoC5/UART.c **** *  method to begin component operation.
  98:Generated_Source\PSoC5/UART.c **** *
  99:Generated_Source\PSoC5/UART.c **** * Parameters:
 100:Generated_Source\PSoC5/UART.c **** *  None.
 101:Generated_Source\PSoC5/UART.c **** *
 102:Generated_Source\PSoC5/UART.c **** * Return:
 103:Generated_Source\PSoC5/UART.c **** *  None.
 104:Generated_Source\PSoC5/UART.c **** *
 105:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 106:Generated_Source\PSoC5/UART.c **** void UART_Init(void) 
 107:Generated_Source\PSoC5/UART.c **** {
  28              		.loc 1 107 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 108:Generated_Source\PSoC5/UART.c ****     #if(UART_RX_ENABLED || UART_HD_ENABLED)
 109:Generated_Source\PSoC5/UART.c **** 
 110:Generated_Source\PSoC5/UART.c ****         #if (UART_RX_INTERRUPT_ENABLED)
 111:Generated_Source\PSoC5/UART.c ****             /* Set RX interrupt vector and priority */
 112:Generated_Source\PSoC5/UART.c ****             (void) CyIntSetVector(UART_RX_VECT_NUM, &UART_RXISR);
 113:Generated_Source\PSoC5/UART.c ****             CyIntSetPriority(UART_RX_VECT_NUM, UART_RX_PRIOR_NUM);
 114:Generated_Source\PSoC5/UART.c ****             UART_errorStatus = 0u;
 115:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_RX_INTERRUPT_ENABLED) */
 116:Generated_Source\PSoC5/UART.c **** 
 117:Generated_Source\PSoC5/UART.c ****         #if (UART_RXHW_ADDRESS_ENABLED)
 118:Generated_Source\PSoC5/UART.c ****             UART_SetRxAddressMode(UART_RX_ADDRESS_MODE);
 119:Generated_Source\PSoC5/UART.c ****             UART_SetRxAddress1(UART_RX_HW_ADDRESS1);
 120:Generated_Source\PSoC5/UART.c ****             UART_SetRxAddress2(UART_RX_HW_ADDRESS2);
 121:Generated_Source\PSoC5/UART.c ****         #endif /* End UART_RXHW_ADDRESS_ENABLED */
 122:Generated_Source\PSoC5/UART.c **** 
 123:Generated_Source\PSoC5/UART.c ****         /* Init Count7 period */
 124:Generated_Source\PSoC5/UART.c ****         UART_RXBITCTR_PERIOD_REG = UART_RXBITCTR_INIT;
  33              		.loc 1 124 0
  34 0000 074B     		ldr	r3, .L2
  35 0002 7222     		movs	r2, #114
  36 0004 1A70     		strb	r2, [r3]
 125:Generated_Source\PSoC5/UART.c ****         /* Configure the Initial RX interrupt mask */
 126:Generated_Source\PSoC5/UART.c ****         UART_RXSTATUS_MASK_REG  = UART_INIT_RX_INTERRUPTS_MASK;
  37              		.loc 1 126 0
  38 0006 2022     		movs	r2, #32
  39 0008 83F80121 		strb	r2, [r3, #257]
 127:Generated_Source\PSoC5/UART.c ****     #endif /* End UART_RX_ENABLED || UART_HD_ENABLED*/
 128:Generated_Source\PSoC5/UART.c **** 
 129:Generated_Source\PSoC5/UART.c ****     #if(UART_TX_ENABLED)
 130:Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 131:Generated_Source\PSoC5/UART.c ****             /* Set TX interrupt vector and priority */
 132:Generated_Source\PSoC5/UART.c ****             (void) CyIntSetVector(UART_TX_VECT_NUM, &UART_TXISR);
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 4


 133:Generated_Source\PSoC5/UART.c ****             CyIntSetPriority(UART_TX_VECT_NUM, UART_TX_PRIOR_NUM);
 134:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_INTERRUPT_ENABLED) */
 135:Generated_Source\PSoC5/UART.c **** 
 136:Generated_Source\PSoC5/UART.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 137:Generated_Source\PSoC5/UART.c ****         #if (UART_TXCLKGEN_DP)
 138:Generated_Source\PSoC5/UART.c ****             UART_TXBITCLKGEN_CTR_REG = UART_BIT_CENTER;
  40              		.loc 1 138 0
  41 000c 0622     		movs	r2, #6
  42 000e 83F8A220 		strb	r2, [r3, #162]
 139:Generated_Source\PSoC5/UART.c ****             UART_TXBITCLKTX_COMPLETE_REG = ((UART_NUMBER_OF_DATA_BITS +
  43              		.loc 1 139 0
  44 0012 4722     		movs	r2, #71
  45 0014 83F8B220 		strb	r2, [r3, #178]
 140:Generated_Source\PSoC5/UART.c ****                         UART_NUMBER_OF_START_BIT) * UART_OVER_SAMPLE_COUNT) - 1u;
 141:Generated_Source\PSoC5/UART.c ****         #else
 142:Generated_Source\PSoC5/UART.c ****             UART_TXBITCTR_PERIOD_REG = ((UART_NUMBER_OF_DATA_BITS +
 143:Generated_Source\PSoC5/UART.c ****                         UART_NUMBER_OF_START_BIT) * UART_OVER_SAMPLE_8) - 1u;
 144:Generated_Source\PSoC5/UART.c ****         #endif /* End UART_TXCLKGEN_DP */
 145:Generated_Source\PSoC5/UART.c **** 
 146:Generated_Source\PSoC5/UART.c ****         /* Configure the Initial TX interrupt mask */
 147:Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 148:Generated_Source\PSoC5/UART.c ****             UART_TXSTATUS_MASK_REG = UART_TX_STS_FIFO_EMPTY;
 149:Generated_Source\PSoC5/UART.c ****         #else
 150:Generated_Source\PSoC5/UART.c ****             UART_TXSTATUS_MASK_REG = UART_INIT_TX_INTERRUPTS_MASK;
  46              		.loc 1 150 0
  47 0018 0022     		movs	r2, #0
  48 001a 83F80221 		strb	r2, [r3, #258]
  49 001e 7047     		bx	lr
  50              	.L3:
  51              		.align	2
  52              	.L2:
  53 0020 89640040 		.word	1073767561
  54              		.cfi_endproc
  55              	.LFE1:
  56              		.size	UART_Init, .-UART_Init
  57              		.section	.text.UART_Enable,"ax",%progbits
  58              		.align	1
  59              		.global	UART_Enable
  60              		.thumb
  61              		.thumb_func
  62              		.type	UART_Enable, %function
  63              	UART_Enable:
  64              	.LFB2:
 151:Generated_Source\PSoC5/UART.c ****         #endif /*End UART_TX_INTERRUPT_ENABLED*/
 152:Generated_Source\PSoC5/UART.c **** 
 153:Generated_Source\PSoC5/UART.c ****     #endif /* End UART_TX_ENABLED */
 154:Generated_Source\PSoC5/UART.c **** 
 155:Generated_Source\PSoC5/UART.c ****     #if(UART_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 156:Generated_Source\PSoC5/UART.c ****         UART_WriteControlRegister( \
 157:Generated_Source\PSoC5/UART.c ****             (UART_ReadControlRegister() & (uint8)~UART_CTRL_PARITY_TYPE_MASK) | \
 158:Generated_Source\PSoC5/UART.c ****             (uint8)(UART_PARITY_TYPE << UART_CTRL_PARITY_TYPE0_SHIFT) );
 159:Generated_Source\PSoC5/UART.c ****     #endif /* End UART_PARITY_TYPE_SW */
 160:Generated_Source\PSoC5/UART.c **** }
 161:Generated_Source\PSoC5/UART.c **** 
 162:Generated_Source\PSoC5/UART.c **** 
 163:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
 164:Generated_Source\PSoC5/UART.c **** * Function Name: UART_Enable
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 5


 165:Generated_Source\PSoC5/UART.c **** ********************************************************************************
 166:Generated_Source\PSoC5/UART.c **** *
 167:Generated_Source\PSoC5/UART.c **** * Summary:
 168:Generated_Source\PSoC5/UART.c **** *  Activates the hardware and begins component operation. It is not necessary
 169:Generated_Source\PSoC5/UART.c **** *  to call UART_Enable() because the UART_Start() API
 170:Generated_Source\PSoC5/UART.c **** *  calls this function, which is the preferred method to begin component
 171:Generated_Source\PSoC5/UART.c **** *  operation.
 172:Generated_Source\PSoC5/UART.c **** 
 173:Generated_Source\PSoC5/UART.c **** * Parameters:
 174:Generated_Source\PSoC5/UART.c **** *  None.
 175:Generated_Source\PSoC5/UART.c **** *
 176:Generated_Source\PSoC5/UART.c **** * Return:
 177:Generated_Source\PSoC5/UART.c **** *  None.
 178:Generated_Source\PSoC5/UART.c **** *
 179:Generated_Source\PSoC5/UART.c **** * Global Variables:
 180:Generated_Source\PSoC5/UART.c **** *  UART_rxAddressDetected - set to initial state (0).
 181:Generated_Source\PSoC5/UART.c **** *
 182:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 183:Generated_Source\PSoC5/UART.c **** void UART_Enable(void) 
 184:Generated_Source\PSoC5/UART.c **** {
  65              		.loc 1 184 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69 0000 10B5     		push	{r4, lr}
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 4, -8
  72              		.cfi_offset 14, -4
 185:Generated_Source\PSoC5/UART.c ****     uint8 enableInterrupts;
 186:Generated_Source\PSoC5/UART.c ****     enableInterrupts = CyEnterCriticalSection();
  73              		.loc 1 186 0
  74 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  75              	.LVL0:
  76 0006 0446     		mov	r4, r0
  77              	.LVL1:
 187:Generated_Source\PSoC5/UART.c **** 
 188:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_ENABLED || UART_HD_ENABLED)
 189:Generated_Source\PSoC5/UART.c ****         /* RX Counter (Count7) Enable */
 190:Generated_Source\PSoC5/UART.c ****         UART_RXBITCTR_CONTROL_REG |= UART_CNTR_ENABLE;
  78              		.loc 1 190 0
  79 0008 0B4A     		ldr	r2, .L5
  80 000a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  81 000c 43F02003 		orr	r3, r3, #32
  82 0010 1370     		strb	r3, [r2]
 191:Generated_Source\PSoC5/UART.c **** 
 192:Generated_Source\PSoC5/UART.c ****         /* Enable the RX Interrupt */
 193:Generated_Source\PSoC5/UART.c ****         UART_RXSTATUS_ACTL_REG  |= UART_INT_ENABLE;
  83              		.loc 1 193 0
  84 0012 92F80131 		ldrb	r3, [r2, #257]	@ zero_extendqisi2
  85 0016 43F01003 		orr	r3, r3, #16
  86 001a 82F80131 		strb	r3, [r2, #257]
 194:Generated_Source\PSoC5/UART.c **** 
 195:Generated_Source\PSoC5/UART.c ****         #if (UART_RX_INTERRUPT_ENABLED)
 196:Generated_Source\PSoC5/UART.c ****             UART_EnableRxInt();
 197:Generated_Source\PSoC5/UART.c **** 
 198:Generated_Source\PSoC5/UART.c ****             #if (UART_RXHW_ADDRESS_ENABLED)
 199:Generated_Source\PSoC5/UART.c ****                 UART_rxAddressDetected = 0u;
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 6


 200:Generated_Source\PSoC5/UART.c ****             #endif /* (UART_RXHW_ADDRESS_ENABLED) */
 201:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_RX_INTERRUPT_ENABLED) */
 202:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_ENABLED || UART_HD_ENABLED) */
 203:Generated_Source\PSoC5/UART.c **** 
 204:Generated_Source\PSoC5/UART.c ****     #if(UART_TX_ENABLED)
 205:Generated_Source\PSoC5/UART.c ****         /* TX Counter (DP/Count7) Enable */
 206:Generated_Source\PSoC5/UART.c ****         #if(!UART_TXCLKGEN_DP)
 207:Generated_Source\PSoC5/UART.c ****             UART_TXBITCTR_CONTROL_REG |= UART_CNTR_ENABLE;
 208:Generated_Source\PSoC5/UART.c ****         #endif /* End UART_TXCLKGEN_DP */
 209:Generated_Source\PSoC5/UART.c **** 
 210:Generated_Source\PSoC5/UART.c ****         /* Enable the TX Interrupt */
 211:Generated_Source\PSoC5/UART.c ****         UART_TXSTATUS_ACTL_REG |= UART_INT_ENABLE;
  87              		.loc 1 211 0
  88 001e 92F80231 		ldrb	r3, [r2, #258]	@ zero_extendqisi2
  89 0022 43F01003 		orr	r3, r3, #16
  90 0026 82F80231 		strb	r3, [r2, #258]
 212:Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 213:Generated_Source\PSoC5/UART.c ****             UART_ClearPendingTxInt(); /* Clear history of TX_NOT_EMPTY */
 214:Generated_Source\PSoC5/UART.c ****             UART_EnableTxInt();
 215:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_INTERRUPT_ENABLED) */
 216:Generated_Source\PSoC5/UART.c ****      #endif /* (UART_TX_INTERRUPT_ENABLED) */
 217:Generated_Source\PSoC5/UART.c **** 
 218:Generated_Source\PSoC5/UART.c ****     #if (UART_INTERNAL_CLOCK_USED)
 219:Generated_Source\PSoC5/UART.c ****         UART_IntClock_Start();  /* Enable the clock */
  91              		.loc 1 219 0
  92 002a FFF7FEFF 		bl	UART_IntClock_Start
  93              	.LVL2:
 220:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_INTERNAL_CLOCK_USED) */
 221:Generated_Source\PSoC5/UART.c **** 
 222:Generated_Source\PSoC5/UART.c ****     CyExitCriticalSection(enableInterrupts);
  94              		.loc 1 222 0
  95 002e 2046     		mov	r0, r4
 223:Generated_Source\PSoC5/UART.c **** }
  96              		.loc 1 223 0
  97 0030 BDE81040 		pop	{r4, lr}
  98              		.cfi_restore 14
  99              		.cfi_restore 4
 100              		.cfi_def_cfa_offset 0
 101              	.LVL3:
 222:Generated_Source\PSoC5/UART.c **** }
 102              		.loc 1 222 0
 103 0034 FFF7FEBF 		b	CyExitCriticalSection
 104              	.LVL4:
 105              	.L6:
 106              		.align	2
 107              	.L5:
 108 0038 99640040 		.word	1073767577
 109              		.cfi_endproc
 110              	.LFE2:
 111              		.size	UART_Enable, .-UART_Enable
 112              		.section	.text.UART_Start,"ax",%progbits
 113              		.align	1
 114              		.global	UART_Start
 115              		.thumb
 116              		.thumb_func
 117              		.type	UART_Start, %function
 118              	UART_Start:
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 7


 119              	.LFB0:
  77:Generated_Source\PSoC5/UART.c ****     /* If not initialized then initialize all required hardware and software */
 120              		.loc 1 77 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124 0000 08B5     		push	{r3, lr}
 125              		.cfi_def_cfa_offset 8
 126              		.cfi_offset 3, -8
 127              		.cfi_offset 14, -4
  79:Generated_Source\PSoC5/UART.c ****     {
 128              		.loc 1 79 0
 129 0002 0549     		ldr	r1, .L10
 130 0004 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 131 0006 1BB9     		cbnz	r3, .L8
  81:Generated_Source\PSoC5/UART.c ****         UART_initVar = 1u;
 132              		.loc 1 81 0
 133 0008 FFF7FEFF 		bl	UART_Init
 134              	.LVL5:
  82:Generated_Source\PSoC5/UART.c ****     }
 135              		.loc 1 82 0
 136 000c 0123     		movs	r3, #1
 137 000e 0B70     		strb	r3, [r1]
 138              	.L8:
  86:Generated_Source\PSoC5/UART.c **** 
 139              		.loc 1 86 0
 140 0010 BDE80840 		pop	{r3, lr}
 141              		.cfi_restore 14
 142              		.cfi_restore 3
 143              		.cfi_def_cfa_offset 0
  85:Generated_Source\PSoC5/UART.c **** }
 144              		.loc 1 85 0
 145 0014 FFF7FEBF 		b	UART_Enable
 146              	.LVL6:
 147              	.L11:
 148              		.align	2
 149              	.L10:
 150 0018 00000000 		.word	.LANCHOR0
 151              		.cfi_endproc
 152              	.LFE0:
 153              		.size	UART_Start, .-UART_Start
 154              		.section	.text.UART_Stop,"ax",%progbits
 155              		.align	1
 156              		.global	UART_Stop
 157              		.thumb
 158              		.thumb_func
 159              		.type	UART_Stop, %function
 160              	UART_Stop:
 161              	.LFB3:
 224:Generated_Source\PSoC5/UART.c **** 
 225:Generated_Source\PSoC5/UART.c **** 
 226:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
 227:Generated_Source\PSoC5/UART.c **** * Function Name: UART_Stop
 228:Generated_Source\PSoC5/UART.c **** ********************************************************************************
 229:Generated_Source\PSoC5/UART.c **** *
 230:Generated_Source\PSoC5/UART.c **** * Summary:
 231:Generated_Source\PSoC5/UART.c **** *  Disables the UART operation.
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 8


 232:Generated_Source\PSoC5/UART.c **** *
 233:Generated_Source\PSoC5/UART.c **** * Parameters:
 234:Generated_Source\PSoC5/UART.c **** *  None.
 235:Generated_Source\PSoC5/UART.c **** *
 236:Generated_Source\PSoC5/UART.c **** * Return:
 237:Generated_Source\PSoC5/UART.c **** *  None.
 238:Generated_Source\PSoC5/UART.c **** *
 239:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 240:Generated_Source\PSoC5/UART.c **** void UART_Stop(void) 
 241:Generated_Source\PSoC5/UART.c **** {
 162              		.loc 1 241 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166 0000 10B5     		push	{r4, lr}
 167              		.cfi_def_cfa_offset 8
 168              		.cfi_offset 4, -8
 169              		.cfi_offset 14, -4
 242:Generated_Source\PSoC5/UART.c ****     uint8 enableInterrupts;
 243:Generated_Source\PSoC5/UART.c ****     enableInterrupts = CyEnterCriticalSection();
 170              		.loc 1 243 0
 171 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 172              	.LVL7:
 173 0006 0446     		mov	r4, r0
 174              	.LVL8:
 244:Generated_Source\PSoC5/UART.c **** 
 245:Generated_Source\PSoC5/UART.c ****     /* Write Bit Counter Disable */
 246:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_ENABLED || UART_HD_ENABLED)
 247:Generated_Source\PSoC5/UART.c ****         UART_RXBITCTR_CONTROL_REG &= (uint8) ~UART_CNTR_ENABLE;
 175              		.loc 1 247 0
 176 0008 0A4A     		ldr	r2, .L13
 177 000a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 178 000c 03F0DF03 		and	r3, r3, #223
 179 0010 1370     		strb	r3, [r2]
 248:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_ENABLED || UART_HD_ENABLED) */
 249:Generated_Source\PSoC5/UART.c **** 
 250:Generated_Source\PSoC5/UART.c ****     #if (UART_TX_ENABLED)
 251:Generated_Source\PSoC5/UART.c ****         #if(!UART_TXCLKGEN_DP)
 252:Generated_Source\PSoC5/UART.c ****             UART_TXBITCTR_CONTROL_REG &= (uint8) ~UART_CNTR_ENABLE;
 253:Generated_Source\PSoC5/UART.c ****         #endif /* (!UART_TXCLKGEN_DP) */
 254:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_TX_ENABLED) */
 255:Generated_Source\PSoC5/UART.c **** 
 256:Generated_Source\PSoC5/UART.c ****     #if (UART_INTERNAL_CLOCK_USED)
 257:Generated_Source\PSoC5/UART.c ****         UART_IntClock_Stop();   /* Disable the clock */
 180              		.loc 1 257 0
 181 0012 FFF7FEFF 		bl	UART_IntClock_Stop
 182              	.LVL9:
 258:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_INTERNAL_CLOCK_USED) */
 259:Generated_Source\PSoC5/UART.c **** 
 260:Generated_Source\PSoC5/UART.c ****     /* Disable internal interrupt component */
 261:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_ENABLED || UART_HD_ENABLED)
 262:Generated_Source\PSoC5/UART.c ****         UART_RXSTATUS_ACTL_REG  &= (uint8) ~UART_INT_ENABLE;
 183              		.loc 1 262 0
 184 0016 084A     		ldr	r2, .L13+4
 263:Generated_Source\PSoC5/UART.c **** 
 264:Generated_Source\PSoC5/UART.c ****         #if (UART_RX_INTERRUPT_ENABLED)
 265:Generated_Source\PSoC5/UART.c ****             UART_DisableRxInt();
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 9


 266:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_RX_INTERRUPT_ENABLED) */
 267:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_ENABLED || UART_HD_ENABLED) */
 268:Generated_Source\PSoC5/UART.c **** 
 269:Generated_Source\PSoC5/UART.c ****     #if (UART_TX_ENABLED)
 270:Generated_Source\PSoC5/UART.c ****         UART_TXSTATUS_ACTL_REG &= (uint8) ~UART_INT_ENABLE;
 271:Generated_Source\PSoC5/UART.c **** 
 272:Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 273:Generated_Source\PSoC5/UART.c ****             UART_DisableTxInt();
 274:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_INTERRUPT_ENABLED) */
 275:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_TX_ENABLED) */
 276:Generated_Source\PSoC5/UART.c **** 
 277:Generated_Source\PSoC5/UART.c ****     CyExitCriticalSection(enableInterrupts);
 185              		.loc 1 277 0
 186 0018 2046     		mov	r0, r4
 262:Generated_Source\PSoC5/UART.c **** 
 187              		.loc 1 262 0
 188 001a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 189 001c 03F0EF03 		and	r3, r3, #239
 190 0020 1370     		strb	r3, [r2]
 270:Generated_Source\PSoC5/UART.c **** 
 191              		.loc 1 270 0
 192 0022 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 193 0024 03F0EF03 		and	r3, r3, #239
 194 0028 5370     		strb	r3, [r2, #1]
 278:Generated_Source\PSoC5/UART.c **** }
 195              		.loc 1 278 0
 196 002a BDE81040 		pop	{r4, lr}
 197              		.cfi_restore 14
 198              		.cfi_restore 4
 199              		.cfi_def_cfa_offset 0
 200              	.LVL10:
 277:Generated_Source\PSoC5/UART.c **** }
 201              		.loc 1 277 0
 202 002e FFF7FEBF 		b	CyExitCriticalSection
 203              	.LVL11:
 204              	.L14:
 205 0032 00BF     		.align	2
 206              	.L13:
 207 0034 99640040 		.word	1073767577
 208 0038 9A650040 		.word	1073767834
 209              		.cfi_endproc
 210              	.LFE3:
 211              		.size	UART_Stop, .-UART_Stop
 212              		.section	.text.UART_ReadControlRegister,"ax",%progbits
 213              		.align	1
 214              		.global	UART_ReadControlRegister
 215              		.thumb
 216              		.thumb_func
 217              		.type	UART_ReadControlRegister, %function
 218              	UART_ReadControlRegister:
 219              	.LFB4:
 279:Generated_Source\PSoC5/UART.c **** 
 280:Generated_Source\PSoC5/UART.c **** 
 281:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
 282:Generated_Source\PSoC5/UART.c **** * Function Name: UART_ReadControlRegister
 283:Generated_Source\PSoC5/UART.c **** ********************************************************************************
 284:Generated_Source\PSoC5/UART.c **** *
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 10


 285:Generated_Source\PSoC5/UART.c **** * Summary:
 286:Generated_Source\PSoC5/UART.c **** *  Returns the current value of the control register.
 287:Generated_Source\PSoC5/UART.c **** *
 288:Generated_Source\PSoC5/UART.c **** * Parameters:
 289:Generated_Source\PSoC5/UART.c **** *  None.
 290:Generated_Source\PSoC5/UART.c **** *
 291:Generated_Source\PSoC5/UART.c **** * Return:
 292:Generated_Source\PSoC5/UART.c **** *  Contents of the control register.
 293:Generated_Source\PSoC5/UART.c **** *
 294:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 295:Generated_Source\PSoC5/UART.c **** uint8 UART_ReadControlRegister(void) 
 296:Generated_Source\PSoC5/UART.c **** {
 220              		.loc 1 296 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224              		@ link register save eliminated.
 297:Generated_Source\PSoC5/UART.c ****     #if (UART_CONTROL_REG_REMOVED)
 298:Generated_Source\PSoC5/UART.c ****         return(0u);
 299:Generated_Source\PSoC5/UART.c ****     #else
 300:Generated_Source\PSoC5/UART.c ****         return(UART_CONTROL_REG);
 301:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_CONTROL_REG_REMOVED) */
 302:Generated_Source\PSoC5/UART.c **** }
 225              		.loc 1 302 0
 226 0000 0020     		movs	r0, #0
 227 0002 7047     		bx	lr
 228              		.cfi_endproc
 229              	.LFE4:
 230              		.size	UART_ReadControlRegister, .-UART_ReadControlRegister
 231              		.section	.text.UART_WriteControlRegister,"ax",%progbits
 232              		.align	1
 233              		.global	UART_WriteControlRegister
 234              		.thumb
 235              		.thumb_func
 236              		.type	UART_WriteControlRegister, %function
 237              	UART_WriteControlRegister:
 238              	.LFB30:
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              		@ link register save eliminated.
 243 0000 7047     		bx	lr
 244              		.cfi_endproc
 245              	.LFE30:
 246              		.size	UART_WriteControlRegister, .-UART_WriteControlRegister
 247              		.section	.text.UART_SetRxInterruptMode,"ax",%progbits
 248              		.align	1
 249              		.global	UART_SetRxInterruptMode
 250              		.thumb
 251              		.thumb_func
 252              		.type	UART_SetRxInterruptMode, %function
 253              	UART_SetRxInterruptMode:
 254              	.LFB6:
 303:Generated_Source\PSoC5/UART.c **** 
 304:Generated_Source\PSoC5/UART.c **** 
 305:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
 306:Generated_Source\PSoC5/UART.c **** * Function Name: UART_WriteControlRegister
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 11


 307:Generated_Source\PSoC5/UART.c **** ********************************************************************************
 308:Generated_Source\PSoC5/UART.c **** *
 309:Generated_Source\PSoC5/UART.c **** * Summary:
 310:Generated_Source\PSoC5/UART.c **** *  Writes an 8-bit value into the control register
 311:Generated_Source\PSoC5/UART.c **** *
 312:Generated_Source\PSoC5/UART.c **** * Parameters:
 313:Generated_Source\PSoC5/UART.c **** *  control:  control register value
 314:Generated_Source\PSoC5/UART.c **** *
 315:Generated_Source\PSoC5/UART.c **** * Return:
 316:Generated_Source\PSoC5/UART.c **** *  None.
 317:Generated_Source\PSoC5/UART.c **** *
 318:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 319:Generated_Source\PSoC5/UART.c **** void  UART_WriteControlRegister(uint8 control) 
 320:Generated_Source\PSoC5/UART.c **** {
 321:Generated_Source\PSoC5/UART.c ****     #if (UART_CONTROL_REG_REMOVED)
 322:Generated_Source\PSoC5/UART.c ****         if(0u != control)
 323:Generated_Source\PSoC5/UART.c ****         {
 324:Generated_Source\PSoC5/UART.c ****             /* Suppress compiler warning */
 325:Generated_Source\PSoC5/UART.c ****         }
 326:Generated_Source\PSoC5/UART.c ****     #else
 327:Generated_Source\PSoC5/UART.c ****        UART_CONTROL_REG = control;
 328:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_CONTROL_REG_REMOVED) */
 329:Generated_Source\PSoC5/UART.c **** }
 330:Generated_Source\PSoC5/UART.c **** 
 331:Generated_Source\PSoC5/UART.c **** 
 332:Generated_Source\PSoC5/UART.c **** #if(UART_RX_ENABLED || UART_HD_ENABLED)
 333:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 334:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetRxInterruptMode
 335:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 336:Generated_Source\PSoC5/UART.c ****     *
 337:Generated_Source\PSoC5/UART.c ****     * Summary:
 338:Generated_Source\PSoC5/UART.c ****     *  Configures the RX interrupt sources enabled.
 339:Generated_Source\PSoC5/UART.c ****     *
 340:Generated_Source\PSoC5/UART.c ****     * Parameters:
 341:Generated_Source\PSoC5/UART.c ****     *  IntSrc:  Bit field containing the RX interrupts to enable. Based on the 
 342:Generated_Source\PSoC5/UART.c ****     *  bit-field arrangement of the status register. This value must be a 
 343:Generated_Source\PSoC5/UART.c ****     *  combination of status register bit-masks shown below:
 344:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_FIFO_NOTEMPTY    Interrupt on byte received.
 345:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_PAR_ERROR        Interrupt on parity error.
 346:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_STOP_ERROR       Interrupt on stop error.
 347:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_BREAK            Interrupt on break.
 348:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_OVERRUN          Interrupt on overrun error.
 349:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_ADDR_MATCH       Interrupt on address match.
 350:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_MRKSPC           Interrupt on address detect.
 351:Generated_Source\PSoC5/UART.c ****     *
 352:Generated_Source\PSoC5/UART.c ****     * Return:
 353:Generated_Source\PSoC5/UART.c ****     *  None.
 354:Generated_Source\PSoC5/UART.c ****     *
 355:Generated_Source\PSoC5/UART.c ****     * Theory:
 356:Generated_Source\PSoC5/UART.c ****     *  Enables the output of specific status bits to the interrupt controller
 357:Generated_Source\PSoC5/UART.c ****     *
 358:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 359:Generated_Source\PSoC5/UART.c ****     void UART_SetRxInterruptMode(uint8 intSrc) 
 360:Generated_Source\PSoC5/UART.c ****     {
 255              		.loc 1 360 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 12


 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259              		@ link register save eliminated.
 260              	.LVL12:
 361:Generated_Source\PSoC5/UART.c ****         UART_RXSTATUS_MASK_REG  = intSrc;
 261              		.loc 1 361 0
 262 0000 014B     		ldr	r3, .L18
 263 0002 1870     		strb	r0, [r3]
 264 0004 7047     		bx	lr
 265              	.L19:
 266 0006 00BF     		.align	2
 267              	.L18:
 268 0008 8A650040 		.word	1073767818
 269              		.cfi_endproc
 270              	.LFE6:
 271              		.size	UART_SetRxInterruptMode, .-UART_SetRxInterruptMode
 272              		.section	.text.UART_ReadRxData,"ax",%progbits
 273              		.align	1
 274              		.global	UART_ReadRxData
 275              		.thumb
 276              		.thumb_func
 277              		.type	UART_ReadRxData, %function
 278              	UART_ReadRxData:
 279              	.LFB7:
 362:Generated_Source\PSoC5/UART.c ****     }
 363:Generated_Source\PSoC5/UART.c **** 
 364:Generated_Source\PSoC5/UART.c **** 
 365:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 366:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ReadRxData
 367:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 368:Generated_Source\PSoC5/UART.c ****     *
 369:Generated_Source\PSoC5/UART.c ****     * Summary:
 370:Generated_Source\PSoC5/UART.c ****     *  Returns the next byte of received data. This function returns data without
 371:Generated_Source\PSoC5/UART.c ****     *  checking the status. You must check the status separately.
 372:Generated_Source\PSoC5/UART.c ****     *
 373:Generated_Source\PSoC5/UART.c ****     * Parameters:
 374:Generated_Source\PSoC5/UART.c ****     *  None.
 375:Generated_Source\PSoC5/UART.c ****     *
 376:Generated_Source\PSoC5/UART.c ****     * Return:
 377:Generated_Source\PSoC5/UART.c ****     *  Received data from RX register
 378:Generated_Source\PSoC5/UART.c ****     *
 379:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 380:Generated_Source\PSoC5/UART.c ****     *  UART_rxBuffer - RAM buffer pointer for save received data.
 381:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferWrite - cyclic index for write to rxBuffer,
 382:Generated_Source\PSoC5/UART.c ****     *     checked to identify new data.
 383:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferRead - cyclic index for read from rxBuffer,
 384:Generated_Source\PSoC5/UART.c ****     *     incremented after each byte has been read from buffer.
 385:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferLoopDetect - cleared if loop condition was detected
 386:Generated_Source\PSoC5/UART.c ****     *     in RX ISR.
 387:Generated_Source\PSoC5/UART.c ****     *
 388:Generated_Source\PSoC5/UART.c ****     * Reentrant:
 389:Generated_Source\PSoC5/UART.c ****     *  No.
 390:Generated_Source\PSoC5/UART.c ****     *
 391:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 392:Generated_Source\PSoC5/UART.c ****     uint8 UART_ReadRxData(void) 
 393:Generated_Source\PSoC5/UART.c ****     {
 280              		.loc 1 393 0
 281              		.cfi_startproc
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 13


 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              		@ link register save eliminated.
 394:Generated_Source\PSoC5/UART.c ****         uint8 rxData;
 395:Generated_Source\PSoC5/UART.c **** 
 396:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 397:Generated_Source\PSoC5/UART.c **** 
 398:Generated_Source\PSoC5/UART.c ****         uint8 locRxBufferRead;
 399:Generated_Source\PSoC5/UART.c ****         uint8 locRxBufferWrite;
 400:Generated_Source\PSoC5/UART.c **** 
 401:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt */
 402:Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 403:Generated_Source\PSoC5/UART.c **** 
 404:Generated_Source\PSoC5/UART.c ****         locRxBufferRead  = UART_rxBufferRead;
 405:Generated_Source\PSoC5/UART.c ****         locRxBufferWrite = UART_rxBufferWrite;
 406:Generated_Source\PSoC5/UART.c **** 
 407:Generated_Source\PSoC5/UART.c ****         if( (UART_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 408:Generated_Source\PSoC5/UART.c ****         {
 409:Generated_Source\PSoC5/UART.c ****             rxData = UART_rxBuffer[locRxBufferRead];
 410:Generated_Source\PSoC5/UART.c ****             locRxBufferRead++;
 411:Generated_Source\PSoC5/UART.c **** 
 412:Generated_Source\PSoC5/UART.c ****             if(locRxBufferRead >= UART_RX_BUFFER_SIZE)
 413:Generated_Source\PSoC5/UART.c ****             {
 414:Generated_Source\PSoC5/UART.c ****                 locRxBufferRead = 0u;
 415:Generated_Source\PSoC5/UART.c ****             }
 416:Generated_Source\PSoC5/UART.c ****             /* Update the real pointer */
 417:Generated_Source\PSoC5/UART.c ****             UART_rxBufferRead = locRxBufferRead;
 418:Generated_Source\PSoC5/UART.c **** 
 419:Generated_Source\PSoC5/UART.c ****             if(UART_rxBufferLoopDetect != 0u)
 420:Generated_Source\PSoC5/UART.c ****             {
 421:Generated_Source\PSoC5/UART.c ****                 UART_rxBufferLoopDetect = 0u;
 422:Generated_Source\PSoC5/UART.c ****                 #if ((UART_RX_INTERRUPT_ENABLED) && (UART_FLOW_CONTROL != 0u))
 423:Generated_Source\PSoC5/UART.c ****                     /* When Hardware Flow Control selected - return RX mask */
 424:Generated_Source\PSoC5/UART.c ****                     #if( UART_HD_ENABLED )
 425:Generated_Source\PSoC5/UART.c ****                         if((UART_CONTROL_REG & UART_CTRL_HD_SEND) == 0u)
 426:Generated_Source\PSoC5/UART.c ****                         {   /* In Half duplex mode return RX mask only in RX
 427:Generated_Source\PSoC5/UART.c ****                             *  configuration set, otherwise
 428:Generated_Source\PSoC5/UART.c ****                             *  mask will be returned in LoadRxConfig() API.
 429:Generated_Source\PSoC5/UART.c ****                             */
 430:Generated_Source\PSoC5/UART.c ****                             UART_RXSTATUS_MASK_REG  |= UART_RX_STS_FIFO_NOTEMPTY;
 431:Generated_Source\PSoC5/UART.c ****                         }
 432:Generated_Source\PSoC5/UART.c ****                     #else
 433:Generated_Source\PSoC5/UART.c ****                         UART_RXSTATUS_MASK_REG  |= UART_RX_STS_FIFO_NOTEMPTY;
 434:Generated_Source\PSoC5/UART.c ****                     #endif /* end UART_HD_ENABLED */
 435:Generated_Source\PSoC5/UART.c ****                 #endif /* ((UART_RX_INTERRUPT_ENABLED) && (UART_FLOW_CONTROL != 0u)) */
 436:Generated_Source\PSoC5/UART.c ****             }
 437:Generated_Source\PSoC5/UART.c ****         }
 438:Generated_Source\PSoC5/UART.c ****         else
 439:Generated_Source\PSoC5/UART.c ****         {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 440:Generated_Source\PSoC5/UART.c ****             rxData = UART_RXDATA_REG;
 441:Generated_Source\PSoC5/UART.c ****         }
 442:Generated_Source\PSoC5/UART.c **** 
 443:Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 444:Generated_Source\PSoC5/UART.c **** 
 445:Generated_Source\PSoC5/UART.c ****     #else
 446:Generated_Source\PSoC5/UART.c **** 
 447:Generated_Source\PSoC5/UART.c ****         /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 14


 448:Generated_Source\PSoC5/UART.c ****         rxData = UART_RXDATA_REG;
 285              		.loc 1 448 0
 286 0000 014B     		ldr	r3, .L21
 287 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 288              	.LVL13:
 449:Generated_Source\PSoC5/UART.c **** 
 450:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 451:Generated_Source\PSoC5/UART.c **** 
 452:Generated_Source\PSoC5/UART.c ****         return(rxData);
 453:Generated_Source\PSoC5/UART.c ****     }
 289              		.loc 1 453 0
 290 0004 7047     		bx	lr
 291              	.L22:
 292 0006 00BF     		.align	2
 293              	.L21:
 294 0008 4A650040 		.word	1073767754
 295              		.cfi_endproc
 296              	.LFE7:
 297              		.size	UART_ReadRxData, .-UART_ReadRxData
 298              		.section	.text.UART_ReadRxStatus,"ax",%progbits
 299              		.align	1
 300              		.global	UART_ReadRxStatus
 301              		.thumb
 302              		.thumb_func
 303              		.type	UART_ReadRxStatus, %function
 304              	UART_ReadRxStatus:
 305              	.LFB8:
 454:Generated_Source\PSoC5/UART.c **** 
 455:Generated_Source\PSoC5/UART.c **** 
 456:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 457:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ReadRxStatus
 458:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 459:Generated_Source\PSoC5/UART.c ****     *
 460:Generated_Source\PSoC5/UART.c ****     * Summary:
 461:Generated_Source\PSoC5/UART.c ****     *  Returns the current state of the receiver status register and the software
 462:Generated_Source\PSoC5/UART.c ****     *  buffer overflow status.
 463:Generated_Source\PSoC5/UART.c ****     *
 464:Generated_Source\PSoC5/UART.c ****     * Parameters:
 465:Generated_Source\PSoC5/UART.c ****     *  None.
 466:Generated_Source\PSoC5/UART.c ****     *
 467:Generated_Source\PSoC5/UART.c ****     * Return:
 468:Generated_Source\PSoC5/UART.c ****     *  Current state of the status register.
 469:Generated_Source\PSoC5/UART.c ****     *
 470:Generated_Source\PSoC5/UART.c ****     * Side Effect:
 471:Generated_Source\PSoC5/UART.c ****     *  All status register bits are clear-on-read except
 472:Generated_Source\PSoC5/UART.c ****     *  UART_RX_STS_FIFO_NOTEMPTY.
 473:Generated_Source\PSoC5/UART.c ****     *  UART_RX_STS_FIFO_NOTEMPTY clears immediately after RX data
 474:Generated_Source\PSoC5/UART.c ****     *  register read.
 475:Generated_Source\PSoC5/UART.c ****     *
 476:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 477:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferOverflow - used to indicate overload condition.
 478:Generated_Source\PSoC5/UART.c ****     *   It set to one in RX interrupt when there isn't free space in
 479:Generated_Source\PSoC5/UART.c ****     *   UART_rxBufferRead to write new data. This condition returned
 480:Generated_Source\PSoC5/UART.c ****     *   and cleared to zero by this API as an
 481:Generated_Source\PSoC5/UART.c ****     *   UART_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 482:Generated_Source\PSoC5/UART.c ****     *   bits.
 483:Generated_Source\PSoC5/UART.c ****     *
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 15


 484:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 485:Generated_Source\PSoC5/UART.c ****     uint8 UART_ReadRxStatus(void) 
 486:Generated_Source\PSoC5/UART.c ****     {
 306              		.loc 1 486 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310              		@ link register save eliminated.
 487:Generated_Source\PSoC5/UART.c ****         uint8 status;
 488:Generated_Source\PSoC5/UART.c **** 
 489:Generated_Source\PSoC5/UART.c ****         status = UART_RXSTATUS_REG & UART_RX_HW_MASK;
 311              		.loc 1 489 0
 312 0000 024B     		ldr	r3, .L24
 313 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 314              	.LVL14:
 490:Generated_Source\PSoC5/UART.c **** 
 491:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 492:Generated_Source\PSoC5/UART.c ****         if(UART_rxBufferOverflow != 0u)
 493:Generated_Source\PSoC5/UART.c ****         {
 494:Generated_Source\PSoC5/UART.c ****             status |= UART_RX_STS_SOFT_BUFF_OVER;
 495:Generated_Source\PSoC5/UART.c ****             UART_rxBufferOverflow = 0u;
 496:Generated_Source\PSoC5/UART.c ****         }
 497:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 498:Generated_Source\PSoC5/UART.c **** 
 499:Generated_Source\PSoC5/UART.c ****         return(status);
 500:Generated_Source\PSoC5/UART.c ****     }
 315              		.loc 1 500 0
 316 0004 00F07F00 		and	r0, r0, #127
 317              	.LVL15:
 318 0008 7047     		bx	lr
 319              	.L25:
 320 000a 00BF     		.align	2
 321              	.L24:
 322 000c 6A650040 		.word	1073767786
 323              		.cfi_endproc
 324              	.LFE8:
 325              		.size	UART_ReadRxStatus, .-UART_ReadRxStatus
 326              		.section	.text.UART_GetChar,"ax",%progbits
 327              		.align	1
 328              		.global	UART_GetChar
 329              		.thumb
 330              		.thumb_func
 331              		.type	UART_GetChar, %function
 332              	UART_GetChar:
 333              	.LFB9:
 501:Generated_Source\PSoC5/UART.c **** 
 502:Generated_Source\PSoC5/UART.c **** 
 503:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 504:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_GetChar
 505:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 506:Generated_Source\PSoC5/UART.c ****     *
 507:Generated_Source\PSoC5/UART.c ****     * Summary:
 508:Generated_Source\PSoC5/UART.c ****     *  Returns the last received byte of data. UART_GetChar() is
 509:Generated_Source\PSoC5/UART.c ****     *  designed for ASCII characters and returns a uint8 where 1 to 255 are values
 510:Generated_Source\PSoC5/UART.c ****     *  for valid characters and 0 indicates an error occurred or no data is present.
 511:Generated_Source\PSoC5/UART.c ****     *
 512:Generated_Source\PSoC5/UART.c ****     * Parameters:
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 16


 513:Generated_Source\PSoC5/UART.c ****     *  None.
 514:Generated_Source\PSoC5/UART.c ****     *
 515:Generated_Source\PSoC5/UART.c ****     * Return:
 516:Generated_Source\PSoC5/UART.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 517:Generated_Source\PSoC5/UART.c ****     *  A returned zero signifies an error condition or no data available.
 518:Generated_Source\PSoC5/UART.c ****     *
 519:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 520:Generated_Source\PSoC5/UART.c ****     *  UART_rxBuffer - RAM buffer pointer for save received data.
 521:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferWrite - cyclic index for write to rxBuffer,
 522:Generated_Source\PSoC5/UART.c ****     *     checked to identify new data.
 523:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferRead - cyclic index for read from rxBuffer,
 524:Generated_Source\PSoC5/UART.c ****     *     incremented after each byte has been read from buffer.
 525:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferLoopDetect - cleared if loop condition was detected
 526:Generated_Source\PSoC5/UART.c ****     *     in RX ISR.
 527:Generated_Source\PSoC5/UART.c ****     *
 528:Generated_Source\PSoC5/UART.c ****     * Reentrant:
 529:Generated_Source\PSoC5/UART.c ****     *  No.
 530:Generated_Source\PSoC5/UART.c ****     *
 531:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 532:Generated_Source\PSoC5/UART.c ****     uint8 UART_GetChar(void) 
 533:Generated_Source\PSoC5/UART.c ****     {
 334              		.loc 1 533 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339              	.LVL16:
 534:Generated_Source\PSoC5/UART.c ****         uint8 rxData = 0u;
 535:Generated_Source\PSoC5/UART.c ****         uint8 rxStatus;
 536:Generated_Source\PSoC5/UART.c **** 
 537:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 538:Generated_Source\PSoC5/UART.c ****         uint8 locRxBufferRead;
 539:Generated_Source\PSoC5/UART.c ****         uint8 locRxBufferWrite;
 540:Generated_Source\PSoC5/UART.c **** 
 541:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt */
 542:Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 543:Generated_Source\PSoC5/UART.c **** 
 544:Generated_Source\PSoC5/UART.c ****         locRxBufferRead  = UART_rxBufferRead;
 545:Generated_Source\PSoC5/UART.c ****         locRxBufferWrite = UART_rxBufferWrite;
 546:Generated_Source\PSoC5/UART.c **** 
 547:Generated_Source\PSoC5/UART.c ****         if( (UART_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 548:Generated_Source\PSoC5/UART.c ****         {
 549:Generated_Source\PSoC5/UART.c ****             rxData = UART_rxBuffer[locRxBufferRead];
 550:Generated_Source\PSoC5/UART.c ****             locRxBufferRead++;
 551:Generated_Source\PSoC5/UART.c ****             if(locRxBufferRead >= UART_RX_BUFFER_SIZE)
 552:Generated_Source\PSoC5/UART.c ****             {
 553:Generated_Source\PSoC5/UART.c ****                 locRxBufferRead = 0u;
 554:Generated_Source\PSoC5/UART.c ****             }
 555:Generated_Source\PSoC5/UART.c ****             /* Update the real pointer */
 556:Generated_Source\PSoC5/UART.c ****             UART_rxBufferRead = locRxBufferRead;
 557:Generated_Source\PSoC5/UART.c **** 
 558:Generated_Source\PSoC5/UART.c ****             if(UART_rxBufferLoopDetect != 0u)
 559:Generated_Source\PSoC5/UART.c ****             {
 560:Generated_Source\PSoC5/UART.c ****                 UART_rxBufferLoopDetect = 0u;
 561:Generated_Source\PSoC5/UART.c ****                 #if( (UART_RX_INTERRUPT_ENABLED) && (UART_FLOW_CONTROL != 0u) )
 562:Generated_Source\PSoC5/UART.c ****                     /* When Hardware Flow Control selected - return RX mask */
 563:Generated_Source\PSoC5/UART.c ****                     #if( UART_HD_ENABLED )
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 17


 564:Generated_Source\PSoC5/UART.c ****                         if((UART_CONTROL_REG & UART_CTRL_HD_SEND) == 0u)
 565:Generated_Source\PSoC5/UART.c ****                         {   /* In Half duplex mode return RX mask only if
 566:Generated_Source\PSoC5/UART.c ****                             *  RX configuration set, otherwise
 567:Generated_Source\PSoC5/UART.c ****                             *  mask will be returned in LoadRxConfig() API.
 568:Generated_Source\PSoC5/UART.c ****                             */
 569:Generated_Source\PSoC5/UART.c ****                             UART_RXSTATUS_MASK_REG |= UART_RX_STS_FIFO_NOTEMPTY;
 570:Generated_Source\PSoC5/UART.c ****                         }
 571:Generated_Source\PSoC5/UART.c ****                     #else
 572:Generated_Source\PSoC5/UART.c ****                         UART_RXSTATUS_MASK_REG |= UART_RX_STS_FIFO_NOTEMPTY;
 573:Generated_Source\PSoC5/UART.c ****                     #endif /* end UART_HD_ENABLED */
 574:Generated_Source\PSoC5/UART.c ****                 #endif /* UART_RX_INTERRUPT_ENABLED and Hardware flow control*/
 575:Generated_Source\PSoC5/UART.c ****             }
 576:Generated_Source\PSoC5/UART.c **** 
 577:Generated_Source\PSoC5/UART.c ****         }
 578:Generated_Source\PSoC5/UART.c ****         else
 579:Generated_Source\PSoC5/UART.c ****         {   rxStatus = UART_RXSTATUS_REG;
 580:Generated_Source\PSoC5/UART.c ****             if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 581:Generated_Source\PSoC5/UART.c ****             {   /* Read received data from FIFO */
 582:Generated_Source\PSoC5/UART.c ****                 rxData = UART_RXDATA_REG;
 583:Generated_Source\PSoC5/UART.c ****                 /*Check status on error*/
 584:Generated_Source\PSoC5/UART.c ****                 if((rxStatus & (UART_RX_STS_BREAK | UART_RX_STS_PAR_ERROR |
 585:Generated_Source\PSoC5/UART.c ****                                 UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 586:Generated_Source\PSoC5/UART.c ****                 {
 587:Generated_Source\PSoC5/UART.c ****                     rxData = 0u;
 588:Generated_Source\PSoC5/UART.c ****                 }
 589:Generated_Source\PSoC5/UART.c ****             }
 590:Generated_Source\PSoC5/UART.c ****         }
 591:Generated_Source\PSoC5/UART.c **** 
 592:Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 593:Generated_Source\PSoC5/UART.c **** 
 594:Generated_Source\PSoC5/UART.c ****     #else
 595:Generated_Source\PSoC5/UART.c **** 
 596:Generated_Source\PSoC5/UART.c ****         rxStatus =UART_RXSTATUS_REG;
 340              		.loc 1 596 0
 341 0000 074B     		ldr	r3, .L30
 342 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 343 0004 DBB2     		uxtb	r3, r3
 344              	.LVL17:
 597:Generated_Source\PSoC5/UART.c ****         if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 345              		.loc 1 597 0
 346 0006 03F02002 		and	r2, r3, #32
 347 000a 02F0FF00 		and	r0, r2, #255
 348 000e 2AB1     		cbz	r2, .L27
 598:Generated_Source\PSoC5/UART.c ****         {
 599:Generated_Source\PSoC5/UART.c ****             /* Read received data from FIFO */
 600:Generated_Source\PSoC5/UART.c ****             rxData = UART_RXDATA_REG;
 349              		.loc 1 600 0
 350 0010 044A     		ldr	r2, .L30+4
 601:Generated_Source\PSoC5/UART.c **** 
 602:Generated_Source\PSoC5/UART.c ****             /*Check status on error*/
 603:Generated_Source\PSoC5/UART.c ****             if((rxStatus & (UART_RX_STS_BREAK | UART_RX_STS_PAR_ERROR |
 351              		.loc 1 603 0
 352 0012 13F01E0F 		tst	r3, #30
 600:Generated_Source\PSoC5/UART.c **** 
 353              		.loc 1 600 0
 354 0016 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 355              	.LVL18:
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 18


 604:Generated_Source\PSoC5/UART.c ****                             UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 605:Generated_Source\PSoC5/UART.c ****             {
 606:Generated_Source\PSoC5/UART.c ****                 rxData = 0u;
 356              		.loc 1 606 0
 357 0018 18BF     		it	ne
 358 001a 0020     		movne	r0, #0
 359              	.LVL19:
 360              	.L27:
 607:Generated_Source\PSoC5/UART.c ****             }
 608:Generated_Source\PSoC5/UART.c ****         }
 609:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 610:Generated_Source\PSoC5/UART.c **** 
 611:Generated_Source\PSoC5/UART.c ****         return(rxData);
 612:Generated_Source\PSoC5/UART.c ****     }
 361              		.loc 1 612 0
 362 001c 7047     		bx	lr
 363              	.L31:
 364 001e 00BF     		.align	2
 365              	.L30:
 366 0020 6A650040 		.word	1073767786
 367 0024 4A650040 		.word	1073767754
 368              		.cfi_endproc
 369              	.LFE9:
 370              		.size	UART_GetChar, .-UART_GetChar
 371              		.section	.text.UART_GetByte,"ax",%progbits
 372              		.align	1
 373              		.global	UART_GetByte
 374              		.thumb
 375              		.thumb_func
 376              		.type	UART_GetByte, %function
 377              	UART_GetByte:
 378              	.LFB10:
 613:Generated_Source\PSoC5/UART.c **** 
 614:Generated_Source\PSoC5/UART.c **** 
 615:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 616:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_GetByte
 617:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 618:Generated_Source\PSoC5/UART.c ****     *
 619:Generated_Source\PSoC5/UART.c ****     * Summary:
 620:Generated_Source\PSoC5/UART.c ****     *  Reads UART RX buffer immediately, returns received character and error
 621:Generated_Source\PSoC5/UART.c ****     *  condition.
 622:Generated_Source\PSoC5/UART.c ****     *
 623:Generated_Source\PSoC5/UART.c ****     * Parameters:
 624:Generated_Source\PSoC5/UART.c ****     *  None.
 625:Generated_Source\PSoC5/UART.c ****     *
 626:Generated_Source\PSoC5/UART.c ****     * Return:
 627:Generated_Source\PSoC5/UART.c ****     *  MSB contains status and LSB contains UART RX data. If the MSB is nonzero,
 628:Generated_Source\PSoC5/UART.c ****     *  an error has occurred.
 629:Generated_Source\PSoC5/UART.c ****     *
 630:Generated_Source\PSoC5/UART.c ****     * Reentrant:
 631:Generated_Source\PSoC5/UART.c ****     *  No.
 632:Generated_Source\PSoC5/UART.c ****     *
 633:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 634:Generated_Source\PSoC5/UART.c ****     uint16 UART_GetByte(void) 
 635:Generated_Source\PSoC5/UART.c ****     {
 379              		.loc 1 635 0
 380              		.cfi_startproc
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 19


 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              		@ link register save eliminated.
 384              	.LBB6:
 385              	.LBB7:
 489:Generated_Source\PSoC5/UART.c **** 
 386              		.loc 1 489 0
 387 0000 044B     		ldr	r3, .L33
 388              	.LBE7:
 389              	.LBE6:
 390              	.LBB9:
 391              	.LBB10:
 448:Generated_Source\PSoC5/UART.c **** 
 392              		.loc 1 448 0
 393 0002 054A     		ldr	r2, .L33+4
 394              	.LBE10:
 395              	.LBE9:
 396              	.LBB12:
 397              	.LBB8:
 489:Generated_Source\PSoC5/UART.c **** 
 398              		.loc 1 489 0
 399 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 400              	.LBE8:
 401              	.LBE12:
 402              	.LBB13:
 403              	.LBB11:
 448:Generated_Source\PSoC5/UART.c **** 
 404              		.loc 1 448 0
 405 0006 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 406              	.LBE11:
 407              	.LBE13:
 636:Generated_Source\PSoC5/UART.c ****         
 637:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 638:Generated_Source\PSoC5/UART.c ****         uint16 locErrorStatus;
 639:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt */
 640:Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 641:Generated_Source\PSoC5/UART.c ****         locErrorStatus = (uint16)UART_errorStatus;
 642:Generated_Source\PSoC5/UART.c ****         UART_errorStatus = 0u;
 643:Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 644:Generated_Source\PSoC5/UART.c ****         return ( (uint16)(locErrorStatus << 8u) | UART_ReadRxData() );
 645:Generated_Source\PSoC5/UART.c ****     #else
 646:Generated_Source\PSoC5/UART.c ****         return ( ((uint16)UART_ReadRxStatus() << 8u) | UART_ReadRxData() );
 408              		.loc 1 646 0
 409 0008 03F07F03 		and	r3, r3, #127
 647:Generated_Source\PSoC5/UART.c ****     #endif /* UART_RX_INTERRUPT_ENABLED */
 648:Generated_Source\PSoC5/UART.c ****         
 649:Generated_Source\PSoC5/UART.c ****     }
 410              		.loc 1 649 0
 411 000c 40EA0320 		orr	r0, r0, r3, lsl #8
 412 0010 7047     		bx	lr
 413              	.L34:
 414 0012 00BF     		.align	2
 415              	.L33:
 416 0014 6A650040 		.word	1073767786
 417 0018 4A650040 		.word	1073767754
 418              		.cfi_endproc
 419              	.LFE10:
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 20


 420              		.size	UART_GetByte, .-UART_GetByte
 421              		.section	.text.UART_GetRxBufferSize,"ax",%progbits
 422              		.align	1
 423              		.global	UART_GetRxBufferSize
 424              		.thumb
 425              		.thumb_func
 426              		.type	UART_GetRxBufferSize, %function
 427              	UART_GetRxBufferSize:
 428              	.LFB11:
 650:Generated_Source\PSoC5/UART.c **** 
 651:Generated_Source\PSoC5/UART.c **** 
 652:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 653:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_GetRxBufferSize
 654:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 655:Generated_Source\PSoC5/UART.c ****     *
 656:Generated_Source\PSoC5/UART.c ****     * Summary:
 657:Generated_Source\PSoC5/UART.c ****     *  Returns the number of received bytes available in the RX buffer.
 658:Generated_Source\PSoC5/UART.c ****     *  * RX software buffer is disabled (RX Buffer Size parameter is equal to 4): 
 659:Generated_Source\PSoC5/UART.c ****     *    returns 0 for empty RX FIFO or 1 for not empty RX FIFO.
 660:Generated_Source\PSoC5/UART.c ****     *  * RX software buffer is enabled: returns the number of bytes available in 
 661:Generated_Source\PSoC5/UART.c ****     *    the RX software buffer. Bytes available in the RX FIFO do not take to 
 662:Generated_Source\PSoC5/UART.c ****     *    account.
 663:Generated_Source\PSoC5/UART.c ****     *
 664:Generated_Source\PSoC5/UART.c ****     * Parameters:
 665:Generated_Source\PSoC5/UART.c ****     *  None.
 666:Generated_Source\PSoC5/UART.c ****     *
 667:Generated_Source\PSoC5/UART.c ****     * Return:
 668:Generated_Source\PSoC5/UART.c ****     *  uint8: Number of bytes in the RX buffer. 
 669:Generated_Source\PSoC5/UART.c ****     *    Return value type depends on RX Buffer Size parameter.
 670:Generated_Source\PSoC5/UART.c ****     *
 671:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 672:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferWrite - used to calculate left bytes.
 673:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferRead - used to calculate left bytes.
 674:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferLoopDetect - checked to decide left bytes amount.
 675:Generated_Source\PSoC5/UART.c ****     *
 676:Generated_Source\PSoC5/UART.c ****     * Reentrant:
 677:Generated_Source\PSoC5/UART.c ****     *  No.
 678:Generated_Source\PSoC5/UART.c ****     *
 679:Generated_Source\PSoC5/UART.c ****     * Theory:
 680:Generated_Source\PSoC5/UART.c ****     *  Allows the user to find out how full the RX Buffer is.
 681:Generated_Source\PSoC5/UART.c ****     *
 682:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 683:Generated_Source\PSoC5/UART.c ****     uint8 UART_GetRxBufferSize(void)
 684:Generated_Source\PSoC5/UART.c ****                                                             
 685:Generated_Source\PSoC5/UART.c ****     {
 429              		.loc 1 685 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433              		@ link register save eliminated.
 686:Generated_Source\PSoC5/UART.c ****         uint8 size;
 687:Generated_Source\PSoC5/UART.c **** 
 688:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 689:Generated_Source\PSoC5/UART.c **** 
 690:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt */
 691:Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 692:Generated_Source\PSoC5/UART.c **** 
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 21


 693:Generated_Source\PSoC5/UART.c ****         if(UART_rxBufferRead == UART_rxBufferWrite)
 694:Generated_Source\PSoC5/UART.c ****         {
 695:Generated_Source\PSoC5/UART.c ****             if(UART_rxBufferLoopDetect != 0u)
 696:Generated_Source\PSoC5/UART.c ****             {
 697:Generated_Source\PSoC5/UART.c ****                 size = UART_RX_BUFFER_SIZE;
 698:Generated_Source\PSoC5/UART.c ****             }
 699:Generated_Source\PSoC5/UART.c ****             else
 700:Generated_Source\PSoC5/UART.c ****             {
 701:Generated_Source\PSoC5/UART.c ****                 size = 0u;
 702:Generated_Source\PSoC5/UART.c ****             }
 703:Generated_Source\PSoC5/UART.c ****         }
 704:Generated_Source\PSoC5/UART.c ****         else if(UART_rxBufferRead < UART_rxBufferWrite)
 705:Generated_Source\PSoC5/UART.c ****         {
 706:Generated_Source\PSoC5/UART.c ****             size = (UART_rxBufferWrite - UART_rxBufferRead);
 707:Generated_Source\PSoC5/UART.c ****         }
 708:Generated_Source\PSoC5/UART.c ****         else
 709:Generated_Source\PSoC5/UART.c ****         {
 710:Generated_Source\PSoC5/UART.c ****             size = (UART_RX_BUFFER_SIZE - UART_rxBufferRead) + UART_rxBufferWrite;
 711:Generated_Source\PSoC5/UART.c ****         }
 712:Generated_Source\PSoC5/UART.c **** 
 713:Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 714:Generated_Source\PSoC5/UART.c **** 
 715:Generated_Source\PSoC5/UART.c ****     #else
 716:Generated_Source\PSoC5/UART.c **** 
 717:Generated_Source\PSoC5/UART.c ****         /* We can only know if there is data in the fifo. */
 718:Generated_Source\PSoC5/UART.c ****         size = ((UART_RXSTATUS_REG & UART_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 434              		.loc 1 718 0
 435 0000 024B     		ldr	r3, .L36
 436 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 437              	.LVL20:
 719:Generated_Source\PSoC5/UART.c **** 
 720:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 721:Generated_Source\PSoC5/UART.c **** 
 722:Generated_Source\PSoC5/UART.c ****         return(size);
 723:Generated_Source\PSoC5/UART.c ****     }
 438              		.loc 1 723 0
 439 0004 C0F34010 		ubfx	r0, r0, #5, #1
 440              	.LVL21:
 441 0008 7047     		bx	lr
 442              	.L37:
 443 000a 00BF     		.align	2
 444              	.L36:
 445 000c 6A650040 		.word	1073767786
 446              		.cfi_endproc
 447              	.LFE11:
 448              		.size	UART_GetRxBufferSize, .-UART_GetRxBufferSize
 449              		.section	.text.UART_ClearRxBuffer,"ax",%progbits
 450              		.align	1
 451              		.global	UART_ClearRxBuffer
 452              		.thumb
 453              		.thumb_func
 454              		.type	UART_ClearRxBuffer, %function
 455              	UART_ClearRxBuffer:
 456              	.LFB12:
 724:Generated_Source\PSoC5/UART.c **** 
 725:Generated_Source\PSoC5/UART.c **** 
 726:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 22


 727:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ClearRxBuffer
 728:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 729:Generated_Source\PSoC5/UART.c ****     *
 730:Generated_Source\PSoC5/UART.c ****     * Summary:
 731:Generated_Source\PSoC5/UART.c ****     *  Clears the receiver memory buffer and hardware RX FIFO of all received data.
 732:Generated_Source\PSoC5/UART.c ****     *
 733:Generated_Source\PSoC5/UART.c ****     * Parameters:
 734:Generated_Source\PSoC5/UART.c ****     *  None.
 735:Generated_Source\PSoC5/UART.c ****     *
 736:Generated_Source\PSoC5/UART.c ****     * Return:
 737:Generated_Source\PSoC5/UART.c ****     *  None.
 738:Generated_Source\PSoC5/UART.c ****     *
 739:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 740:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferWrite - cleared to zero.
 741:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferRead - cleared to zero.
 742:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferLoopDetect - cleared to zero.
 743:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferOverflow - cleared to zero.
 744:Generated_Source\PSoC5/UART.c ****     *
 745:Generated_Source\PSoC5/UART.c ****     * Reentrant:
 746:Generated_Source\PSoC5/UART.c ****     *  No.
 747:Generated_Source\PSoC5/UART.c ****     *
 748:Generated_Source\PSoC5/UART.c ****     * Theory:
 749:Generated_Source\PSoC5/UART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 750:Generated_Source\PSoC5/UART.c ****     *  read and writing will resume at address 0 overwriting any data that may
 751:Generated_Source\PSoC5/UART.c ****     *  have remained in the RAM.
 752:Generated_Source\PSoC5/UART.c ****     *
 753:Generated_Source\PSoC5/UART.c ****     * Side Effects:
 754:Generated_Source\PSoC5/UART.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 755:Generated_Source\PSoC5/UART.c ****     *
 756:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 757:Generated_Source\PSoC5/UART.c ****     void UART_ClearRxBuffer(void) 
 758:Generated_Source\PSoC5/UART.c ****     {
 457              		.loc 1 758 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461 0000 08B5     		push	{r3, lr}
 462              		.cfi_def_cfa_offset 8
 463              		.cfi_offset 3, -8
 464              		.cfi_offset 14, -4
 759:Generated_Source\PSoC5/UART.c ****         uint8 enableInterrupts;
 760:Generated_Source\PSoC5/UART.c **** 
 761:Generated_Source\PSoC5/UART.c ****         /* Clear the HW FIFO */
 762:Generated_Source\PSoC5/UART.c ****         enableInterrupts = CyEnterCriticalSection();
 465              		.loc 1 762 0
 466 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 467              	.LVL22:
 763:Generated_Source\PSoC5/UART.c ****         UART_RXDATA_AUX_CTL_REG |= (uint8)  UART_RX_FIFO_CLR;
 468              		.loc 1 763 0
 469 0006 064B     		ldr	r3, .L39
 470 0008 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 471 000a 42F00102 		orr	r2, r2, #1
 472 000e 1A70     		strb	r2, [r3]
 764:Generated_Source\PSoC5/UART.c ****         UART_RXDATA_AUX_CTL_REG &= (uint8) ~UART_RX_FIFO_CLR;
 473              		.loc 1 764 0
 474 0010 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 475 0012 02F0FE02 		and	r2, r2, #254
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 23


 476 0016 1A70     		strb	r2, [r3]
 765:Generated_Source\PSoC5/UART.c ****         CyExitCriticalSection(enableInterrupts);
 766:Generated_Source\PSoC5/UART.c **** 
 767:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 768:Generated_Source\PSoC5/UART.c **** 
 769:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt. */
 770:Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 771:Generated_Source\PSoC5/UART.c **** 
 772:Generated_Source\PSoC5/UART.c ****         UART_rxBufferRead = 0u;
 773:Generated_Source\PSoC5/UART.c ****         UART_rxBufferWrite = 0u;
 774:Generated_Source\PSoC5/UART.c ****         UART_rxBufferLoopDetect = 0u;
 775:Generated_Source\PSoC5/UART.c ****         UART_rxBufferOverflow = 0u;
 776:Generated_Source\PSoC5/UART.c **** 
 777:Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 778:Generated_Source\PSoC5/UART.c **** 
 779:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 780:Generated_Source\PSoC5/UART.c **** 
 781:Generated_Source\PSoC5/UART.c ****     }
 477              		.loc 1 781 0
 478 0018 BDE80840 		pop	{r3, lr}
 479              		.cfi_restore 14
 480              		.cfi_restore 3
 481              		.cfi_def_cfa_offset 0
 765:Generated_Source\PSoC5/UART.c ****         CyExitCriticalSection(enableInterrupts);
 482              		.loc 1 765 0
 483 001c FFF7FEBF 		b	CyExitCriticalSection
 484              	.LVL23:
 485              	.L40:
 486              		.align	2
 487              	.L39:
 488 0020 9A650040 		.word	1073767834
 489              		.cfi_endproc
 490              	.LFE12:
 491              		.size	UART_ClearRxBuffer, .-UART_ClearRxBuffer
 492              		.section	.text.UART_SetRxAddressMode,"ax",%progbits
 493              		.align	1
 494              		.global	UART_SetRxAddressMode
 495              		.thumb
 496              		.thumb_func
 497              		.type	UART_SetRxAddressMode, %function
 498              	UART_SetRxAddressMode:
 499              	.LFB28:
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 0
 502              		@ frame_needed = 0, uses_anonymous_args = 0
 503              		@ link register save eliminated.
 504 0000 7047     		bx	lr
 505              		.cfi_endproc
 506              	.LFE28:
 507              		.size	UART_SetRxAddressMode, .-UART_SetRxAddressMode
 508              		.section	.text.UART_SetRxAddress1,"ax",%progbits
 509              		.align	1
 510              		.global	UART_SetRxAddress1
 511              		.thumb
 512              		.thumb_func
 513              		.type	UART_SetRxAddress1, %function
 514              	UART_SetRxAddress1:
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 24


 515              	.LFB14:
 782:Generated_Source\PSoC5/UART.c **** 
 783:Generated_Source\PSoC5/UART.c **** 
 784:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 785:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetRxAddressMode
 786:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 787:Generated_Source\PSoC5/UART.c ****     *
 788:Generated_Source\PSoC5/UART.c ****     * Summary:
 789:Generated_Source\PSoC5/UART.c ****     *  Sets the software controlled Addressing mode used by the RX portion of the
 790:Generated_Source\PSoC5/UART.c ****     *  UART.
 791:Generated_Source\PSoC5/UART.c ****     *
 792:Generated_Source\PSoC5/UART.c ****     * Parameters:
 793:Generated_Source\PSoC5/UART.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 794:Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 795:Generated_Source\PSoC5/UART.c ****     *                                               detection
 796:Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 797:Generated_Source\PSoC5/UART.c ****     *                                               address detection
 798:Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 799:Generated_Source\PSoC5/UART.c ****     *                                               detection
 800:Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 801:Generated_Source\PSoC5/UART.c ****     *                                               address detection
 802:Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_NONE - No address detection
 803:Generated_Source\PSoC5/UART.c ****     *
 804:Generated_Source\PSoC5/UART.c ****     * Return:
 805:Generated_Source\PSoC5/UART.c ****     *  None.
 806:Generated_Source\PSoC5/UART.c ****     *
 807:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 808:Generated_Source\PSoC5/UART.c ****     *  UART_rxAddressMode - the parameter stored in this variable for
 809:Generated_Source\PSoC5/UART.c ****     *   the farther usage in RX ISR.
 810:Generated_Source\PSoC5/UART.c ****     *  UART_rxAddressDetected - set to initial state (0).
 811:Generated_Source\PSoC5/UART.c ****     *
 812:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 813:Generated_Source\PSoC5/UART.c ****     void UART_SetRxAddressMode(uint8 addressMode)
 814:Generated_Source\PSoC5/UART.c ****                                                         
 815:Generated_Source\PSoC5/UART.c ****     {
 816:Generated_Source\PSoC5/UART.c ****         #if(UART_RXHW_ADDRESS_ENABLED)
 817:Generated_Source\PSoC5/UART.c ****             #if(UART_CONTROL_REG_REMOVED)
 818:Generated_Source\PSoC5/UART.c ****                 if(0u != addressMode)
 819:Generated_Source\PSoC5/UART.c ****                 {
 820:Generated_Source\PSoC5/UART.c ****                     /* Suppress compiler warning */
 821:Generated_Source\PSoC5/UART.c ****                 }
 822:Generated_Source\PSoC5/UART.c ****             #else /* UART_CONTROL_REG_REMOVED */
 823:Generated_Source\PSoC5/UART.c ****                 uint8 tmpCtrl;
 824:Generated_Source\PSoC5/UART.c ****                 tmpCtrl = UART_CONTROL_REG & (uint8)~UART_CTRL_RXADDR_MODE_MASK;
 825:Generated_Source\PSoC5/UART.c ****                 tmpCtrl |= (uint8)(addressMode << UART_CTRL_RXADDR_MODE0_SHIFT);
 826:Generated_Source\PSoC5/UART.c ****                 UART_CONTROL_REG = tmpCtrl;
 827:Generated_Source\PSoC5/UART.c **** 
 828:Generated_Source\PSoC5/UART.c ****                 #if(UART_RX_INTERRUPT_ENABLED && \
 829:Generated_Source\PSoC5/UART.c ****                    (UART_RXBUFFERSIZE > UART_FIFO_LENGTH) )
 830:Generated_Source\PSoC5/UART.c ****                     UART_rxAddressMode = addressMode;
 831:Generated_Source\PSoC5/UART.c ****                     UART_rxAddressDetected = 0u;
 832:Generated_Source\PSoC5/UART.c ****                 #endif /* End UART_RXBUFFERSIZE > UART_FIFO_LENGTH*/
 833:Generated_Source\PSoC5/UART.c ****             #endif /* End UART_CONTROL_REG_REMOVED */
 834:Generated_Source\PSoC5/UART.c ****         #else /* UART_RXHW_ADDRESS_ENABLED */
 835:Generated_Source\PSoC5/UART.c ****             if(0u != addressMode)
 836:Generated_Source\PSoC5/UART.c ****             {
 837:Generated_Source\PSoC5/UART.c ****                 /* Suppress compiler warning */
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 25


 838:Generated_Source\PSoC5/UART.c ****             }
 839:Generated_Source\PSoC5/UART.c ****         #endif /* End UART_RXHW_ADDRESS_ENABLED */
 840:Generated_Source\PSoC5/UART.c ****     }
 841:Generated_Source\PSoC5/UART.c **** 
 842:Generated_Source\PSoC5/UART.c **** 
 843:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 844:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetRxAddress1
 845:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 846:Generated_Source\PSoC5/UART.c ****     *
 847:Generated_Source\PSoC5/UART.c ****     * Summary:
 848:Generated_Source\PSoC5/UART.c ****     *  Sets the first of two hardware-detectable receiver addresses.
 849:Generated_Source\PSoC5/UART.c ****     *
 850:Generated_Source\PSoC5/UART.c ****     * Parameters:
 851:Generated_Source\PSoC5/UART.c ****     *  address: Address #1 for hardware address detection.
 852:Generated_Source\PSoC5/UART.c ****     *
 853:Generated_Source\PSoC5/UART.c ****     * Return:
 854:Generated_Source\PSoC5/UART.c ****     *  None.
 855:Generated_Source\PSoC5/UART.c ****     *
 856:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 857:Generated_Source\PSoC5/UART.c ****     void UART_SetRxAddress1(uint8 address) 
 858:Generated_Source\PSoC5/UART.c ****     {
 516              		.loc 1 858 0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 0
 519              		@ frame_needed = 0, uses_anonymous_args = 0
 520              		@ link register save eliminated.
 521              	.LVL24:
 859:Generated_Source\PSoC5/UART.c ****         UART_RXADDRESS1_REG = address;
 522              		.loc 1 859 0
 523 0000 014B     		ldr	r3, .L43
 524 0002 1870     		strb	r0, [r3]
 525 0004 7047     		bx	lr
 526              	.L44:
 527 0006 00BF     		.align	2
 528              	.L43:
 529 0008 2A650040 		.word	1073767722
 530              		.cfi_endproc
 531              	.LFE14:
 532              		.size	UART_SetRxAddress1, .-UART_SetRxAddress1
 533              		.section	.text.UART_SetRxAddress2,"ax",%progbits
 534              		.align	1
 535              		.global	UART_SetRxAddress2
 536              		.thumb
 537              		.thumb_func
 538              		.type	UART_SetRxAddress2, %function
 539              	UART_SetRxAddress2:
 540              	.LFB15:
 860:Generated_Source\PSoC5/UART.c ****     }
 861:Generated_Source\PSoC5/UART.c **** 
 862:Generated_Source\PSoC5/UART.c **** 
 863:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 864:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetRxAddress2
 865:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 866:Generated_Source\PSoC5/UART.c ****     *
 867:Generated_Source\PSoC5/UART.c ****     * Summary:
 868:Generated_Source\PSoC5/UART.c ****     *  Sets the second of two hardware-detectable receiver addresses.
 869:Generated_Source\PSoC5/UART.c ****     *
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 26


 870:Generated_Source\PSoC5/UART.c ****     * Parameters:
 871:Generated_Source\PSoC5/UART.c ****     *  address: Address #2 for hardware address detection.
 872:Generated_Source\PSoC5/UART.c ****     *
 873:Generated_Source\PSoC5/UART.c ****     * Return:
 874:Generated_Source\PSoC5/UART.c ****     *  None.
 875:Generated_Source\PSoC5/UART.c ****     *
 876:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 877:Generated_Source\PSoC5/UART.c ****     void UART_SetRxAddress2(uint8 address) 
 878:Generated_Source\PSoC5/UART.c ****     {
 541              		.loc 1 878 0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 0, uses_anonymous_args = 0
 545              		@ link register save eliminated.
 546              	.LVL25:
 879:Generated_Source\PSoC5/UART.c ****         UART_RXADDRESS2_REG = address;
 547              		.loc 1 879 0
 548 0000 014B     		ldr	r3, .L46
 549 0002 1870     		strb	r0, [r3]
 550 0004 7047     		bx	lr
 551              	.L47:
 552 0006 00BF     		.align	2
 553              	.L46:
 554 0008 3A650040 		.word	1073767738
 555              		.cfi_endproc
 556              	.LFE15:
 557              		.size	UART_SetRxAddress2, .-UART_SetRxAddress2
 558              		.section	.text.UART_SetTxInterruptMode,"ax",%progbits
 559              		.align	1
 560              		.global	UART_SetTxInterruptMode
 561              		.thumb
 562              		.thumb_func
 563              		.type	UART_SetTxInterruptMode, %function
 564              	UART_SetTxInterruptMode:
 565              	.LFB16:
 880:Generated_Source\PSoC5/UART.c ****     }
 881:Generated_Source\PSoC5/UART.c **** 
 882:Generated_Source\PSoC5/UART.c **** #endif  /* UART_RX_ENABLED || UART_HD_ENABLED*/
 883:Generated_Source\PSoC5/UART.c **** 
 884:Generated_Source\PSoC5/UART.c **** 
 885:Generated_Source\PSoC5/UART.c **** #if( (UART_TX_ENABLED) || (UART_HD_ENABLED) )
 886:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 887:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetTxInterruptMode
 888:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 889:Generated_Source\PSoC5/UART.c ****     *
 890:Generated_Source\PSoC5/UART.c ****     * Summary:
 891:Generated_Source\PSoC5/UART.c ****     *  Configures the TX interrupt sources to be enabled, but does not enable the
 892:Generated_Source\PSoC5/UART.c ****     *  interrupt.
 893:Generated_Source\PSoC5/UART.c ****     *
 894:Generated_Source\PSoC5/UART.c ****     * Parameters:
 895:Generated_Source\PSoC5/UART.c ****     *  intSrc: Bit field containing the TX interrupt sources to enable
 896:Generated_Source\PSoC5/UART.c ****     *   UART_TX_STS_COMPLETE        Interrupt on TX byte complete
 897:Generated_Source\PSoC5/UART.c ****     *   UART_TX_STS_FIFO_EMPTY      Interrupt when TX FIFO is empty
 898:Generated_Source\PSoC5/UART.c ****     *   UART_TX_STS_FIFO_FULL       Interrupt when TX FIFO is full
 899:Generated_Source\PSoC5/UART.c ****     *   UART_TX_STS_FIFO_NOT_FULL   Interrupt when TX FIFO is not full
 900:Generated_Source\PSoC5/UART.c ****     *
 901:Generated_Source\PSoC5/UART.c ****     * Return:
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 27


 902:Generated_Source\PSoC5/UART.c ****     *  None.
 903:Generated_Source\PSoC5/UART.c ****     *
 904:Generated_Source\PSoC5/UART.c ****     * Theory:
 905:Generated_Source\PSoC5/UART.c ****     *  Enables the output of specific status bits to the interrupt controller
 906:Generated_Source\PSoC5/UART.c ****     *
 907:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 908:Generated_Source\PSoC5/UART.c ****     void UART_SetTxInterruptMode(uint8 intSrc) 
 909:Generated_Source\PSoC5/UART.c ****     {
 566              		.loc 1 909 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 571              	.LVL26:
 910:Generated_Source\PSoC5/UART.c ****         UART_TXSTATUS_MASK_REG = intSrc;
 572              		.loc 1 910 0
 573 0000 014B     		ldr	r3, .L49
 574 0002 1870     		strb	r0, [r3]
 575 0004 7047     		bx	lr
 576              	.L50:
 577 0006 00BF     		.align	2
 578              	.L49:
 579 0008 8B650040 		.word	1073767819
 580              		.cfi_endproc
 581              	.LFE16:
 582              		.size	UART_SetTxInterruptMode, .-UART_SetTxInterruptMode
 583              		.section	.text.UART_WriteTxData,"ax",%progbits
 584              		.align	1
 585              		.global	UART_WriteTxData
 586              		.thumb
 587              		.thumb_func
 588              		.type	UART_WriteTxData, %function
 589              	UART_WriteTxData:
 590              	.LFB17:
 911:Generated_Source\PSoC5/UART.c ****     }
 912:Generated_Source\PSoC5/UART.c **** 
 913:Generated_Source\PSoC5/UART.c **** 
 914:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 915:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_WriteTxData
 916:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 917:Generated_Source\PSoC5/UART.c ****     *
 918:Generated_Source\PSoC5/UART.c ****     * Summary:
 919:Generated_Source\PSoC5/UART.c ****     *  Places a byte of data into the transmit buffer to be sent when the bus is
 920:Generated_Source\PSoC5/UART.c ****     *  available without checking the TX status register. You must check status
 921:Generated_Source\PSoC5/UART.c ****     *  separately.
 922:Generated_Source\PSoC5/UART.c ****     *
 923:Generated_Source\PSoC5/UART.c ****     * Parameters:
 924:Generated_Source\PSoC5/UART.c ****     *  txDataByte: data byte
 925:Generated_Source\PSoC5/UART.c ****     *
 926:Generated_Source\PSoC5/UART.c ****     * Return:
 927:Generated_Source\PSoC5/UART.c ****     * None.
 928:Generated_Source\PSoC5/UART.c ****     *
 929:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 930:Generated_Source\PSoC5/UART.c ****     *  UART_txBuffer - RAM buffer pointer for save data for transmission
 931:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferWrite - cyclic index for write to txBuffer,
 932:Generated_Source\PSoC5/UART.c ****     *    incremented after each byte saved to buffer.
 933:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferRead - cyclic index for read from txBuffer,
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 28


 934:Generated_Source\PSoC5/UART.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 935:Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
 936:Generated_Source\PSoC5/UART.c ****     *    initialized.
 937:Generated_Source\PSoC5/UART.c ****     *
 938:Generated_Source\PSoC5/UART.c ****     * Reentrant:
 939:Generated_Source\PSoC5/UART.c ****     *  No.
 940:Generated_Source\PSoC5/UART.c ****     *
 941:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 942:Generated_Source\PSoC5/UART.c ****     void UART_WriteTxData(uint8 txDataByte) 
 943:Generated_Source\PSoC5/UART.c ****     {
 591              		.loc 1 943 0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              		@ link register save eliminated.
 596              	.LVL27:
 944:Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function*/
 945:Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 597              		.loc 1 945 0
 598 0000 024B     		ldr	r3, .L56
 599 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 600 0004 0BB1     		cbz	r3, .L51
 946:Generated_Source\PSoC5/UART.c ****         {
 947:Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 948:Generated_Source\PSoC5/UART.c **** 
 949:Generated_Source\PSoC5/UART.c ****             /* Protect variables that could change on interrupt. */
 950:Generated_Source\PSoC5/UART.c ****             UART_DisableTxInt();
 951:Generated_Source\PSoC5/UART.c **** 
 952:Generated_Source\PSoC5/UART.c ****             if( (UART_txBufferRead == UART_txBufferWrite) &&
 953:Generated_Source\PSoC5/UART.c ****                 ((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) == 0u) )
 954:Generated_Source\PSoC5/UART.c ****             {
 955:Generated_Source\PSoC5/UART.c ****                 /* Add directly to the FIFO. */
 956:Generated_Source\PSoC5/UART.c ****                 UART_TXDATA_REG = txDataByte;
 957:Generated_Source\PSoC5/UART.c ****             }
 958:Generated_Source\PSoC5/UART.c ****             else
 959:Generated_Source\PSoC5/UART.c ****             {
 960:Generated_Source\PSoC5/UART.c ****                 if(UART_txBufferWrite >= UART_TX_BUFFER_SIZE)
 961:Generated_Source\PSoC5/UART.c ****                 {
 962:Generated_Source\PSoC5/UART.c ****                     UART_txBufferWrite = 0u;
 963:Generated_Source\PSoC5/UART.c ****                 }
 964:Generated_Source\PSoC5/UART.c **** 
 965:Generated_Source\PSoC5/UART.c ****                 UART_txBuffer[UART_txBufferWrite] = txDataByte;
 966:Generated_Source\PSoC5/UART.c **** 
 967:Generated_Source\PSoC5/UART.c ****                 /* Add to the software buffer. */
 968:Generated_Source\PSoC5/UART.c ****                 UART_txBufferWrite++;
 969:Generated_Source\PSoC5/UART.c ****             }
 970:Generated_Source\PSoC5/UART.c **** 
 971:Generated_Source\PSoC5/UART.c ****             UART_EnableTxInt();
 972:Generated_Source\PSoC5/UART.c **** 
 973:Generated_Source\PSoC5/UART.c ****         #else
 974:Generated_Source\PSoC5/UART.c **** 
 975:Generated_Source\PSoC5/UART.c ****             /* Add directly to the FIFO. */
 976:Generated_Source\PSoC5/UART.c ****             UART_TXDATA_REG = txDataByte;
 601              		.loc 1 976 0
 602 0006 024B     		ldr	r3, .L56+4
 603 0008 1870     		strb	r0, [r3]
 604              	.L51:
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 29


 605 000a 7047     		bx	lr
 606              	.L57:
 607              		.align	2
 608              	.L56:
 609 000c 00000000 		.word	.LANCHOR0
 610 0010 48650040 		.word	1073767752
 611              		.cfi_endproc
 612              	.LFE17:
 613              		.size	UART_WriteTxData, .-UART_WriteTxData
 614              		.section	.text.UART_ReadTxStatus,"ax",%progbits
 615              		.align	1
 616              		.global	UART_ReadTxStatus
 617              		.thumb
 618              		.thumb_func
 619              		.type	UART_ReadTxStatus, %function
 620              	UART_ReadTxStatus:
 621              	.LFB18:
 977:Generated_Source\PSoC5/UART.c **** 
 978:Generated_Source\PSoC5/UART.c ****         #endif /*(UART_TX_INTERRUPT_ENABLED) */
 979:Generated_Source\PSoC5/UART.c ****         }
 980:Generated_Source\PSoC5/UART.c ****     }
 981:Generated_Source\PSoC5/UART.c **** 
 982:Generated_Source\PSoC5/UART.c **** 
 983:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 984:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ReadTxStatus
 985:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 986:Generated_Source\PSoC5/UART.c ****     *
 987:Generated_Source\PSoC5/UART.c ****     * Summary:
 988:Generated_Source\PSoC5/UART.c ****     *  Reads the status register for the TX portion of the UART.
 989:Generated_Source\PSoC5/UART.c ****     *
 990:Generated_Source\PSoC5/UART.c ****     * Parameters:
 991:Generated_Source\PSoC5/UART.c ****     *  None.
 992:Generated_Source\PSoC5/UART.c ****     *
 993:Generated_Source\PSoC5/UART.c ****     * Return:
 994:Generated_Source\PSoC5/UART.c ****     *  Contents of the status register
 995:Generated_Source\PSoC5/UART.c ****     *
 996:Generated_Source\PSoC5/UART.c ****     * Theory:
 997:Generated_Source\PSoC5/UART.c ****     *  This function reads the TX status register, which is cleared on read.
 998:Generated_Source\PSoC5/UART.c ****     *  It is up to the user to handle all bits in this return value accordingly,
 999:Generated_Source\PSoC5/UART.c ****     *  even if the bit was not enabled as an interrupt source the event happened
1000:Generated_Source\PSoC5/UART.c ****     *  and must be handled accordingly.
1001:Generated_Source\PSoC5/UART.c ****     *
1002:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1003:Generated_Source\PSoC5/UART.c ****     uint8 UART_ReadTxStatus(void) 
1004:Generated_Source\PSoC5/UART.c ****     {
 622              		.loc 1 1004 0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 0
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626              		@ link register save eliminated.
1005:Generated_Source\PSoC5/UART.c ****         return(UART_TXSTATUS_REG);
 627              		.loc 1 1005 0
 628 0000 014B     		ldr	r3, .L59
 629 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
1006:Generated_Source\PSoC5/UART.c ****     }
 630              		.loc 1 1006 0
 631 0004 7047     		bx	lr
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 30


 632              	.L60:
 633 0006 00BF     		.align	2
 634              	.L59:
 635 0008 6B650040 		.word	1073767787
 636              		.cfi_endproc
 637              	.LFE18:
 638              		.size	UART_ReadTxStatus, .-UART_ReadTxStatus
 639              		.section	.text.UART_PutChar,"ax",%progbits
 640              		.align	1
 641              		.global	UART_PutChar
 642              		.thumb
 643              		.thumb_func
 644              		.type	UART_PutChar, %function
 645              	UART_PutChar:
 646              	.LFB19:
1007:Generated_Source\PSoC5/UART.c **** 
1008:Generated_Source\PSoC5/UART.c **** 
1009:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1010:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_PutChar
1011:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1012:Generated_Source\PSoC5/UART.c ****     *
1013:Generated_Source\PSoC5/UART.c ****     * Summary:
1014:Generated_Source\PSoC5/UART.c ****     *  Puts a byte of data into the transmit buffer to be sent when the bus is
1015:Generated_Source\PSoC5/UART.c ****     *  available. This is a blocking API that waits until the TX buffer has room to
1016:Generated_Source\PSoC5/UART.c ****     *  hold the data.
1017:Generated_Source\PSoC5/UART.c ****     *
1018:Generated_Source\PSoC5/UART.c ****     * Parameters:
1019:Generated_Source\PSoC5/UART.c ****     *  txDataByte: Byte containing the data to transmit
1020:Generated_Source\PSoC5/UART.c ****     *
1021:Generated_Source\PSoC5/UART.c ****     * Return:
1022:Generated_Source\PSoC5/UART.c ****     *  None.
1023:Generated_Source\PSoC5/UART.c ****     *
1024:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1025:Generated_Source\PSoC5/UART.c ****     *  UART_txBuffer - RAM buffer pointer for save data for transmission
1026:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferWrite - cyclic index for write to txBuffer,
1027:Generated_Source\PSoC5/UART.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1028:Generated_Source\PSoC5/UART.c ****     *     saved to buffer.
1029:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferRead - cyclic index for read from txBuffer,
1030:Generated_Source\PSoC5/UART.c ****     *     checked to identify free space in txBuffer.
1031:Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1032:Generated_Source\PSoC5/UART.c ****     *     initialized.
1033:Generated_Source\PSoC5/UART.c ****     *
1034:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1035:Generated_Source\PSoC5/UART.c ****     *  No.
1036:Generated_Source\PSoC5/UART.c ****     *
1037:Generated_Source\PSoC5/UART.c ****     * Theory:
1038:Generated_Source\PSoC5/UART.c ****     *  Allows the user to transmit any byte of data in a single transfer
1039:Generated_Source\PSoC5/UART.c ****     *
1040:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1041:Generated_Source\PSoC5/UART.c ****     void UART_PutChar(uint8 txDataByte) 
1042:Generated_Source\PSoC5/UART.c ****     {
 647              		.loc 1 1042 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 652              	.LVL28:
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 31


1043:Generated_Source\PSoC5/UART.c ****     #if (UART_TX_INTERRUPT_ENABLED)
1044:Generated_Source\PSoC5/UART.c ****         /* The temporary output pointer is used since it takes two instructions
1045:Generated_Source\PSoC5/UART.c ****         *  to increment with a wrap, and we can't risk doing that with the real
1046:Generated_Source\PSoC5/UART.c ****         *  pointer and getting an interrupt in between instructions.
1047:Generated_Source\PSoC5/UART.c ****         */
1048:Generated_Source\PSoC5/UART.c ****         uint8 locTxBufferWrite;
1049:Generated_Source\PSoC5/UART.c ****         uint8 locTxBufferRead;
1050:Generated_Source\PSoC5/UART.c **** 
1051:Generated_Source\PSoC5/UART.c ****         do
1052:Generated_Source\PSoC5/UART.c ****         { /* Block if software buffer is full, so we don't overwrite. */
1053:Generated_Source\PSoC5/UART.c **** 
1054:Generated_Source\PSoC5/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1055:Generated_Source\PSoC5/UART.c ****             /* Disable TX interrupt to protect variables from modification */
1056:Generated_Source\PSoC5/UART.c ****             UART_DisableTxInt();
1057:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1058:Generated_Source\PSoC5/UART.c **** 
1059:Generated_Source\PSoC5/UART.c ****             locTxBufferWrite = UART_txBufferWrite;
1060:Generated_Source\PSoC5/UART.c ****             locTxBufferRead  = UART_txBufferRead;
1061:Generated_Source\PSoC5/UART.c **** 
1062:Generated_Source\PSoC5/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1063:Generated_Source\PSoC5/UART.c ****             /* Enable interrupt to continue transmission */
1064:Generated_Source\PSoC5/UART.c ****             UART_EnableTxInt();
1065:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1066:Generated_Source\PSoC5/UART.c ****         }
1067:Generated_Source\PSoC5/UART.c ****         while( (locTxBufferWrite < locTxBufferRead) ? (locTxBufferWrite == (locTxBufferRead - 1u)) 
1068:Generated_Source\PSoC5/UART.c ****                                 ((locTxBufferWrite - locTxBufferRead) ==
1069:Generated_Source\PSoC5/UART.c ****                                 (uint8)(UART_TX_BUFFER_SIZE - 1u)) );
1070:Generated_Source\PSoC5/UART.c **** 
1071:Generated_Source\PSoC5/UART.c ****         if( (locTxBufferRead == locTxBufferWrite) &&
1072:Generated_Source\PSoC5/UART.c ****             ((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) == 0u) )
1073:Generated_Source\PSoC5/UART.c ****         {
1074:Generated_Source\PSoC5/UART.c ****             /* Add directly to the FIFO */
1075:Generated_Source\PSoC5/UART.c ****             UART_TXDATA_REG = txDataByte;
1076:Generated_Source\PSoC5/UART.c ****         }
1077:Generated_Source\PSoC5/UART.c ****         else
1078:Generated_Source\PSoC5/UART.c ****         {
1079:Generated_Source\PSoC5/UART.c ****             if(locTxBufferWrite >= UART_TX_BUFFER_SIZE)
1080:Generated_Source\PSoC5/UART.c ****             {
1081:Generated_Source\PSoC5/UART.c ****                 locTxBufferWrite = 0u;
1082:Generated_Source\PSoC5/UART.c ****             }
1083:Generated_Source\PSoC5/UART.c ****             /* Add to the software buffer. */
1084:Generated_Source\PSoC5/UART.c ****             UART_txBuffer[locTxBufferWrite] = txDataByte;
1085:Generated_Source\PSoC5/UART.c ****             locTxBufferWrite++;
1086:Generated_Source\PSoC5/UART.c **** 
1087:Generated_Source\PSoC5/UART.c ****             /* Finally, update the real output pointer */
1088:Generated_Source\PSoC5/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1089:Generated_Source\PSoC5/UART.c ****             UART_DisableTxInt();
1090:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1091:Generated_Source\PSoC5/UART.c **** 
1092:Generated_Source\PSoC5/UART.c ****             UART_txBufferWrite = locTxBufferWrite;
1093:Generated_Source\PSoC5/UART.c **** 
1094:Generated_Source\PSoC5/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1095:Generated_Source\PSoC5/UART.c ****             UART_EnableTxInt();
1096:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1097:Generated_Source\PSoC5/UART.c **** 
1098:Generated_Source\PSoC5/UART.c ****             if(0u != (UART_TXSTATUS_REG & UART_TX_STS_FIFO_EMPTY))
1099:Generated_Source\PSoC5/UART.c ****             {
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 32


1100:Generated_Source\PSoC5/UART.c ****                 /* Trigger TX interrupt to send software buffer */
1101:Generated_Source\PSoC5/UART.c ****                 UART_SetPendingTxInt();
1102:Generated_Source\PSoC5/UART.c ****             }
1103:Generated_Source\PSoC5/UART.c ****         }
1104:Generated_Source\PSoC5/UART.c **** 
1105:Generated_Source\PSoC5/UART.c ****     #else
1106:Generated_Source\PSoC5/UART.c **** 
1107:Generated_Source\PSoC5/UART.c ****         while((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) != 0u)
 653              		.loc 1 1107 0
 654 0000 034A     		ldr	r2, .L64
 655              	.L62:
 656              		.loc 1 1107 0 is_stmt 0 discriminator 1
 657 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 658 0004 5B07     		lsls	r3, r3, #29
 659 0006 FCD4     		bmi	.L62
1108:Generated_Source\PSoC5/UART.c ****         {
1109:Generated_Source\PSoC5/UART.c ****             /* Wait for room in the FIFO */
1110:Generated_Source\PSoC5/UART.c ****         }
1111:Generated_Source\PSoC5/UART.c **** 
1112:Generated_Source\PSoC5/UART.c ****         /* Add directly to the FIFO */
1113:Generated_Source\PSoC5/UART.c ****         UART_TXDATA_REG = txDataByte;
 660              		.loc 1 1113 0 is_stmt 1
 661 0008 024B     		ldr	r3, .L64+4
 662 000a 1870     		strb	r0, [r3]
 663 000c 7047     		bx	lr
 664              	.L65:
 665 000e 00BF     		.align	2
 666              	.L64:
 667 0010 6B650040 		.word	1073767787
 668 0014 48650040 		.word	1073767752
 669              		.cfi_endproc
 670              	.LFE19:
 671              		.size	UART_PutChar, .-UART_PutChar
 672              		.section	.text.UART_PutString,"ax",%progbits
 673              		.align	1
 674              		.global	UART_PutString
 675              		.thumb
 676              		.thumb_func
 677              		.type	UART_PutString, %function
 678              	UART_PutString:
 679              	.LFB20:
1114:Generated_Source\PSoC5/UART.c **** 
1115:Generated_Source\PSoC5/UART.c ****     #endif /* UART_TX_INTERRUPT_ENABLED */
1116:Generated_Source\PSoC5/UART.c ****     }
1117:Generated_Source\PSoC5/UART.c **** 
1118:Generated_Source\PSoC5/UART.c **** 
1119:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1120:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_PutString
1121:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1122:Generated_Source\PSoC5/UART.c ****     *
1123:Generated_Source\PSoC5/UART.c ****     * Summary:
1124:Generated_Source\PSoC5/UART.c ****     *  Sends a NULL terminated string to the TX buffer for transmission.
1125:Generated_Source\PSoC5/UART.c ****     *
1126:Generated_Source\PSoC5/UART.c ****     * Parameters:
1127:Generated_Source\PSoC5/UART.c ****     *  string[]: Pointer to the null terminated string array residing in RAM or ROM
1128:Generated_Source\PSoC5/UART.c ****     *
1129:Generated_Source\PSoC5/UART.c ****     * Return:
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 33


1130:Generated_Source\PSoC5/UART.c ****     *  None.
1131:Generated_Source\PSoC5/UART.c ****     *
1132:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1133:Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1134:Generated_Source\PSoC5/UART.c ****     *     initialized.
1135:Generated_Source\PSoC5/UART.c ****     *
1136:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1137:Generated_Source\PSoC5/UART.c ****     *  No.
1138:Generated_Source\PSoC5/UART.c ****     *
1139:Generated_Source\PSoC5/UART.c ****     * Theory:
1140:Generated_Source\PSoC5/UART.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1141:Generated_Source\PSoC5/UART.c ****     *  function blocks until the last character of the string is loaded into the
1142:Generated_Source\PSoC5/UART.c ****     *  TX buffer.
1143:Generated_Source\PSoC5/UART.c ****     *
1144:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1145:Generated_Source\PSoC5/UART.c ****     void UART_PutString(const char8 string[]) 
1146:Generated_Source\PSoC5/UART.c ****     {
 680              		.loc 1 1146 0
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 0
 683              		@ frame_needed = 0, uses_anonymous_args = 0
 684              	.LVL29:
 685 0000 10B5     		push	{r4, lr}
 686              		.cfi_def_cfa_offset 8
 687              		.cfi_offset 4, -8
 688              		.cfi_offset 14, -4
1147:Generated_Source\PSoC5/UART.c ****         uint16 bufIndex = 0u;
1148:Generated_Source\PSoC5/UART.c **** 
1149:Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function */
1150:Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 689              		.loc 1 1150 0
 690 0002 064B     		ldr	r3, .L73
1146:Generated_Source\PSoC5/UART.c ****         uint16 bufIndex = 0u;
 691              		.loc 1 1146 0
 692 0004 0446     		mov	r4, r0
 693              		.loc 1 1150 0
 694 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 695 0008 3BB1     		cbz	r3, .L66
 696 000a 0021     		movs	r1, #0
 697              	.LVL30:
 698              	.L68:
1151:Generated_Source\PSoC5/UART.c ****         {
1152:Generated_Source\PSoC5/UART.c ****             /* This is a blocking function, it will not exit until all data is sent */
1153:Generated_Source\PSoC5/UART.c ****             while(string[bufIndex] != (char8) 0)
 699              		.loc 1 1153 0
 700 000c 8BB2     		uxth	r3, r1
 701              	.LVL31:
 702 000e E05C     		ldrb	r0, [r4, r3]	@ zero_extendqisi2
 703 0010 0131     		adds	r1, r1, #1
 704 0012 10B1     		cbz	r0, .L66
1154:Generated_Source\PSoC5/UART.c ****             {
1155:Generated_Source\PSoC5/UART.c ****                 UART_PutChar((uint8)string[bufIndex]);
 705              		.loc 1 1155 0
 706 0014 FFF7FEFF 		bl	UART_PutChar
 707              	.LVL32:
 708 0018 F8E7     		b	.L68
 709              	.LVL33:
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 34


 710              	.L66:
 711 001a 10BD     		pop	{r4, pc}
 712              	.LVL34:
 713              	.L74:
 714              		.align	2
 715              	.L73:
 716 001c 00000000 		.word	.LANCHOR0
 717              		.cfi_endproc
 718              	.LFE20:
 719              		.size	UART_PutString, .-UART_PutString
 720              		.section	.text.UART_PutArray,"ax",%progbits
 721              		.align	1
 722              		.global	UART_PutArray
 723              		.thumb
 724              		.thumb_func
 725              		.type	UART_PutArray, %function
 726              	UART_PutArray:
 727              	.LFB21:
1156:Generated_Source\PSoC5/UART.c ****                 bufIndex++;
1157:Generated_Source\PSoC5/UART.c ****             }
1158:Generated_Source\PSoC5/UART.c ****         }
1159:Generated_Source\PSoC5/UART.c ****     }
1160:Generated_Source\PSoC5/UART.c **** 
1161:Generated_Source\PSoC5/UART.c **** 
1162:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1163:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_PutArray
1164:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1165:Generated_Source\PSoC5/UART.c ****     *
1166:Generated_Source\PSoC5/UART.c ****     * Summary:
1167:Generated_Source\PSoC5/UART.c ****     *  Places N bytes of data from a memory array into the TX buffer for
1168:Generated_Source\PSoC5/UART.c ****     *  transmission.
1169:Generated_Source\PSoC5/UART.c ****     *
1170:Generated_Source\PSoC5/UART.c ****     * Parameters:
1171:Generated_Source\PSoC5/UART.c ****     *  string[]: Address of the memory array residing in RAM or ROM.
1172:Generated_Source\PSoC5/UART.c ****     *  byteCount: Number of bytes to be transmitted. The type depends on TX Buffer
1173:Generated_Source\PSoC5/UART.c ****     *             Size parameter.
1174:Generated_Source\PSoC5/UART.c ****     *
1175:Generated_Source\PSoC5/UART.c ****     * Return:
1176:Generated_Source\PSoC5/UART.c ****     *  None.
1177:Generated_Source\PSoC5/UART.c ****     *
1178:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1179:Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1180:Generated_Source\PSoC5/UART.c ****     *     initialized.
1181:Generated_Source\PSoC5/UART.c ****     *
1182:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1183:Generated_Source\PSoC5/UART.c ****     *  No.
1184:Generated_Source\PSoC5/UART.c ****     *
1185:Generated_Source\PSoC5/UART.c ****     * Theory:
1186:Generated_Source\PSoC5/UART.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1187:Generated_Source\PSoC5/UART.c ****     *  function blocks until the last character of the string is loaded into the
1188:Generated_Source\PSoC5/UART.c ****     *  TX buffer.
1189:Generated_Source\PSoC5/UART.c ****     *
1190:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1191:Generated_Source\PSoC5/UART.c ****     void UART_PutArray(const uint8 string[], uint8 byteCount)
1192:Generated_Source\PSoC5/UART.c ****                                                                     
1193:Generated_Source\PSoC5/UART.c ****     {
 728              		.loc 1 1193 0
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 35


 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              	.LVL35:
 733 0000 10B5     		push	{r4, lr}
 734              		.cfi_def_cfa_offset 8
 735              		.cfi_offset 4, -8
 736              		.cfi_offset 14, -4
1194:Generated_Source\PSoC5/UART.c ****         uint8 bufIndex = 0u;
1195:Generated_Source\PSoC5/UART.c **** 
1196:Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function */
1197:Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 737              		.loc 1 1197 0
 738 0002 074B     		ldr	r3, .L80
 739 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 740 0006 4BB1     		cbz	r3, .L75
 741 0008 0139     		subs	r1, r1, #1
 742              	.LVL36:
 743 000a 441E     		subs	r4, r0, #1
 744 000c 0144     		add	r1, r1, r0
 745              	.LVL37:
 746              	.L77:
1198:Generated_Source\PSoC5/UART.c ****         {
1199:Generated_Source\PSoC5/UART.c ****             while(bufIndex < byteCount)
 747              		.loc 1 1199 0
 748 000e 8C42     		cmp	r4, r1
 749 0010 04D0     		beq	.L75
1200:Generated_Source\PSoC5/UART.c ****             {
1201:Generated_Source\PSoC5/UART.c ****                 UART_PutChar(string[bufIndex]);
 750              		.loc 1 1201 0
 751 0012 14F8010F 		ldrb	r0, [r4, #1]!	@ zero_extendqisi2
 752              	.LVL38:
 753 0016 FFF7FEFF 		bl	UART_PutChar
 754              	.LVL39:
 755 001a F8E7     		b	.L77
 756              	.LVL40:
 757              	.L75:
 758 001c 10BD     		pop	{r4, pc}
 759              	.L81:
 760 001e 00BF     		.align	2
 761              	.L80:
 762 0020 00000000 		.word	.LANCHOR0
 763              		.cfi_endproc
 764              	.LFE21:
 765              		.size	UART_PutArray, .-UART_PutArray
 766              		.section	.text.UART_PutCRLF,"ax",%progbits
 767              		.align	1
 768              		.global	UART_PutCRLF
 769              		.thumb
 770              		.thumb_func
 771              		.type	UART_PutCRLF, %function
 772              	UART_PutCRLF:
 773              	.LFB22:
1202:Generated_Source\PSoC5/UART.c ****                 bufIndex++;
1203:Generated_Source\PSoC5/UART.c ****             }
1204:Generated_Source\PSoC5/UART.c ****         }
1205:Generated_Source\PSoC5/UART.c ****     }
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 36


1206:Generated_Source\PSoC5/UART.c **** 
1207:Generated_Source\PSoC5/UART.c **** 
1208:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1209:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_PutCRLF
1210:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1211:Generated_Source\PSoC5/UART.c ****     *
1212:Generated_Source\PSoC5/UART.c ****     * Summary:
1213:Generated_Source\PSoC5/UART.c ****     *  Writes a byte of data followed by a carriage return (0x0D) and line feed
1214:Generated_Source\PSoC5/UART.c ****     *  (0x0A) to the transmit buffer.
1215:Generated_Source\PSoC5/UART.c ****     *
1216:Generated_Source\PSoC5/UART.c ****     * Parameters:
1217:Generated_Source\PSoC5/UART.c ****     *  txDataByte: Data byte to transmit before the carriage return and line feed.
1218:Generated_Source\PSoC5/UART.c ****     *
1219:Generated_Source\PSoC5/UART.c ****     * Return:
1220:Generated_Source\PSoC5/UART.c ****     *  None.
1221:Generated_Source\PSoC5/UART.c ****     *
1222:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1223:Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1224:Generated_Source\PSoC5/UART.c ****     *     initialized.
1225:Generated_Source\PSoC5/UART.c ****     *
1226:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1227:Generated_Source\PSoC5/UART.c ****     *  No.
1228:Generated_Source\PSoC5/UART.c ****     *
1229:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1230:Generated_Source\PSoC5/UART.c ****     void UART_PutCRLF(uint8 txDataByte) 
1231:Generated_Source\PSoC5/UART.c ****     {
 774              		.loc 1 1231 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 778              	.LVL41:
 779 0000 08B5     		push	{r3, lr}
 780              		.cfi_def_cfa_offset 8
 781              		.cfi_offset 3, -8
 782              		.cfi_offset 14, -4
1232:Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function */
1233:Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 783              		.loc 1 1233 0
 784 0002 074B     		ldr	r3, .L84
 785 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 786 0006 4BB1     		cbz	r3, .L82
1234:Generated_Source\PSoC5/UART.c ****         {
1235:Generated_Source\PSoC5/UART.c ****             UART_PutChar(txDataByte);
 787              		.loc 1 1235 0
 788 0008 FFF7FEFF 		bl	UART_PutChar
 789              	.LVL42:
1236:Generated_Source\PSoC5/UART.c ****             UART_PutChar(0x0Du);
 790              		.loc 1 1236 0
 791 000c 0D20     		movs	r0, #13
 792 000e FFF7FEFF 		bl	UART_PutChar
 793              	.LVL43:
1237:Generated_Source\PSoC5/UART.c ****             UART_PutChar(0x0Au);
1238:Generated_Source\PSoC5/UART.c ****         }
1239:Generated_Source\PSoC5/UART.c ****     }
 794              		.loc 1 1239 0
 795 0012 BDE80840 		pop	{r3, lr}
 796              		.cfi_remember_state
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 37


 797              		.cfi_restore 14
 798              		.cfi_restore 3
 799              		.cfi_def_cfa_offset 0
1237:Generated_Source\PSoC5/UART.c ****             UART_PutChar(0x0Au);
 800              		.loc 1 1237 0
 801 0016 0A20     		movs	r0, #10
 802 0018 FFF7FEBF 		b	UART_PutChar
 803              	.LVL44:
 804              	.L82:
 805              		.cfi_restore_state
 806 001c 08BD     		pop	{r3, pc}
 807              	.L85:
 808 001e 00BF     		.align	2
 809              	.L84:
 810 0020 00000000 		.word	.LANCHOR0
 811              		.cfi_endproc
 812              	.LFE22:
 813              		.size	UART_PutCRLF, .-UART_PutCRLF
 814              		.section	.text.UART_GetTxBufferSize,"ax",%progbits
 815              		.align	1
 816              		.global	UART_GetTxBufferSize
 817              		.thumb
 818              		.thumb_func
 819              		.type	UART_GetTxBufferSize, %function
 820              	UART_GetTxBufferSize:
 821              	.LFB23:
1240:Generated_Source\PSoC5/UART.c **** 
1241:Generated_Source\PSoC5/UART.c **** 
1242:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1243:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_GetTxBufferSize
1244:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1245:Generated_Source\PSoC5/UART.c ****     *
1246:Generated_Source\PSoC5/UART.c ****     * Summary:
1247:Generated_Source\PSoC5/UART.c ****     *  Returns the number of bytes in the TX buffer which are waiting to be 
1248:Generated_Source\PSoC5/UART.c ****     *  transmitted.
1249:Generated_Source\PSoC5/UART.c ****     *  * TX software buffer is disabled (TX Buffer Size parameter is equal to 4): 
1250:Generated_Source\PSoC5/UART.c ****     *    returns 0 for empty TX FIFO, 1 for not full TX FIFO or 4 for full TX FIFO.
1251:Generated_Source\PSoC5/UART.c ****     *  * TX software buffer is enabled: returns the number of bytes in the TX 
1252:Generated_Source\PSoC5/UART.c ****     *    software buffer which are waiting to be transmitted. Bytes available in the
1253:Generated_Source\PSoC5/UART.c ****     *    TX FIFO do not count.
1254:Generated_Source\PSoC5/UART.c ****     *
1255:Generated_Source\PSoC5/UART.c ****     * Parameters:
1256:Generated_Source\PSoC5/UART.c ****     *  None.
1257:Generated_Source\PSoC5/UART.c ****     *
1258:Generated_Source\PSoC5/UART.c ****     * Return:
1259:Generated_Source\PSoC5/UART.c ****     *  Number of bytes used in the TX buffer. Return value type depends on the TX 
1260:Generated_Source\PSoC5/UART.c ****     *  Buffer Size parameter.
1261:Generated_Source\PSoC5/UART.c ****     *
1262:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1263:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferWrite - used to calculate left space.
1264:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferRead - used to calculate left space.
1265:Generated_Source\PSoC5/UART.c ****     *
1266:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1267:Generated_Source\PSoC5/UART.c ****     *  No.
1268:Generated_Source\PSoC5/UART.c ****     *
1269:Generated_Source\PSoC5/UART.c ****     * Theory:
1270:Generated_Source\PSoC5/UART.c ****     *  Allows the user to find out how full the TX Buffer is.
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 38


1271:Generated_Source\PSoC5/UART.c ****     *
1272:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1273:Generated_Source\PSoC5/UART.c ****     uint8 UART_GetTxBufferSize(void)
1274:Generated_Source\PSoC5/UART.c ****                                                             
1275:Generated_Source\PSoC5/UART.c ****     {
 822              		.loc 1 1275 0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 0
 825              		@ frame_needed = 0, uses_anonymous_args = 0
 826              		@ link register save eliminated.
1276:Generated_Source\PSoC5/UART.c ****         uint8 size;
1277:Generated_Source\PSoC5/UART.c **** 
1278:Generated_Source\PSoC5/UART.c ****     #if (UART_TX_INTERRUPT_ENABLED)
1279:Generated_Source\PSoC5/UART.c **** 
1280:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt. */
1281:Generated_Source\PSoC5/UART.c ****         UART_DisableTxInt();
1282:Generated_Source\PSoC5/UART.c **** 
1283:Generated_Source\PSoC5/UART.c ****         if(UART_txBufferRead == UART_txBufferWrite)
1284:Generated_Source\PSoC5/UART.c ****         {
1285:Generated_Source\PSoC5/UART.c ****             size = 0u;
1286:Generated_Source\PSoC5/UART.c ****         }
1287:Generated_Source\PSoC5/UART.c ****         else if(UART_txBufferRead < UART_txBufferWrite)
1288:Generated_Source\PSoC5/UART.c ****         {
1289:Generated_Source\PSoC5/UART.c ****             size = (UART_txBufferWrite - UART_txBufferRead);
1290:Generated_Source\PSoC5/UART.c ****         }
1291:Generated_Source\PSoC5/UART.c ****         else
1292:Generated_Source\PSoC5/UART.c ****         {
1293:Generated_Source\PSoC5/UART.c ****             size = (UART_TX_BUFFER_SIZE - UART_txBufferRead) +
1294:Generated_Source\PSoC5/UART.c ****                     UART_txBufferWrite;
1295:Generated_Source\PSoC5/UART.c ****         }
1296:Generated_Source\PSoC5/UART.c **** 
1297:Generated_Source\PSoC5/UART.c ****         UART_EnableTxInt();
1298:Generated_Source\PSoC5/UART.c **** 
1299:Generated_Source\PSoC5/UART.c ****     #else
1300:Generated_Source\PSoC5/UART.c **** 
1301:Generated_Source\PSoC5/UART.c ****         size = UART_TXSTATUS_REG;
 827              		.loc 1 1301 0
 828 0000 054B     		ldr	r3, .L89
 829 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 830 0004 C0B2     		uxtb	r0, r0
 831              	.LVL45:
1302:Generated_Source\PSoC5/UART.c **** 
1303:Generated_Source\PSoC5/UART.c ****         /* Is the fifo is full. */
1304:Generated_Source\PSoC5/UART.c ****         if((size & UART_TX_STS_FIFO_FULL) != 0u)
 832              		.loc 1 1304 0
 833 0006 4307     		lsls	r3, r0, #29
1305:Generated_Source\PSoC5/UART.c ****         {
1306:Generated_Source\PSoC5/UART.c ****             size = UART_FIFO_LENGTH;
1307:Generated_Source\PSoC5/UART.c ****         }
1308:Generated_Source\PSoC5/UART.c ****         else if((size & UART_TX_STS_FIFO_EMPTY) != 0u)
 834              		.loc 1 1308 0
 835 0008 5ABF     		itte	pl
 836 000a 80F00200 		eorpl	r0, r0, #2
 837              	.LVL46:
 838 000e C0F34000 		ubfxpl	r0, r0, #1, #1
1306:Generated_Source\PSoC5/UART.c ****         }
 839              		.loc 1 1306 0
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 39


 840 0012 0420     		movmi	r0, #4
 841              	.LVL47:
1309:Generated_Source\PSoC5/UART.c ****         {
1310:Generated_Source\PSoC5/UART.c ****             size = 0u;
1311:Generated_Source\PSoC5/UART.c ****         }
1312:Generated_Source\PSoC5/UART.c ****         else
1313:Generated_Source\PSoC5/UART.c ****         {
1314:Generated_Source\PSoC5/UART.c ****             /* We only know there is data in the fifo. */
1315:Generated_Source\PSoC5/UART.c ****             size = 1u;
1316:Generated_Source\PSoC5/UART.c ****         }
1317:Generated_Source\PSoC5/UART.c **** 
1318:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_TX_INTERRUPT_ENABLED) */
1319:Generated_Source\PSoC5/UART.c **** 
1320:Generated_Source\PSoC5/UART.c ****     return(size);
1321:Generated_Source\PSoC5/UART.c ****     }
 842              		.loc 1 1321 0
 843 0014 7047     		bx	lr
 844              	.L90:
 845 0016 00BF     		.align	2
 846              	.L89:
 847 0018 6B650040 		.word	1073767787
 848              		.cfi_endproc
 849              	.LFE23:
 850              		.size	UART_GetTxBufferSize, .-UART_GetTxBufferSize
 851              		.section	.text.UART_ClearTxBuffer,"ax",%progbits
 852              		.align	1
 853              		.global	UART_ClearTxBuffer
 854              		.thumb
 855              		.thumb_func
 856              		.type	UART_ClearTxBuffer, %function
 857              	UART_ClearTxBuffer:
 858              	.LFB24:
1322:Generated_Source\PSoC5/UART.c **** 
1323:Generated_Source\PSoC5/UART.c **** 
1324:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1325:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ClearTxBuffer
1326:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1327:Generated_Source\PSoC5/UART.c ****     *
1328:Generated_Source\PSoC5/UART.c ****     * Summary:
1329:Generated_Source\PSoC5/UART.c ****     *  Clears all data from the TX buffer and hardware TX FIFO.
1330:Generated_Source\PSoC5/UART.c ****     *
1331:Generated_Source\PSoC5/UART.c ****     * Parameters:
1332:Generated_Source\PSoC5/UART.c ****     *  None.
1333:Generated_Source\PSoC5/UART.c ****     *
1334:Generated_Source\PSoC5/UART.c ****     * Return:
1335:Generated_Source\PSoC5/UART.c ****     *  None.
1336:Generated_Source\PSoC5/UART.c ****     *
1337:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1338:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferWrite - cleared to zero.
1339:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferRead - cleared to zero.
1340:Generated_Source\PSoC5/UART.c ****     *
1341:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1342:Generated_Source\PSoC5/UART.c ****     *  No.
1343:Generated_Source\PSoC5/UART.c ****     *
1344:Generated_Source\PSoC5/UART.c ****     * Theory:
1345:Generated_Source\PSoC5/UART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1346:Generated_Source\PSoC5/UART.c ****     *  read and writing will resume at address 0 overwriting any data that may have
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 40


1347:Generated_Source\PSoC5/UART.c ****     *  remained in the RAM.
1348:Generated_Source\PSoC5/UART.c ****     *
1349:Generated_Source\PSoC5/UART.c ****     * Side Effects:
1350:Generated_Source\PSoC5/UART.c ****     *  Data waiting in the transmit buffer is not sent; a byte that is currently
1351:Generated_Source\PSoC5/UART.c ****     *  transmitting finishes transmitting.
1352:Generated_Source\PSoC5/UART.c ****     *
1353:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1354:Generated_Source\PSoC5/UART.c ****     void UART_ClearTxBuffer(void) 
1355:Generated_Source\PSoC5/UART.c ****     {
 859              		.loc 1 1355 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863 0000 08B5     		push	{r3, lr}
 864              		.cfi_def_cfa_offset 8
 865              		.cfi_offset 3, -8
 866              		.cfi_offset 14, -4
1356:Generated_Source\PSoC5/UART.c ****         uint8 enableInterrupts;
1357:Generated_Source\PSoC5/UART.c **** 
1358:Generated_Source\PSoC5/UART.c ****         enableInterrupts = CyEnterCriticalSection();
 867              		.loc 1 1358 0
 868 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 869              	.LVL48:
1359:Generated_Source\PSoC5/UART.c ****         /* Clear the HW FIFO */
1360:Generated_Source\PSoC5/UART.c ****         UART_TXDATA_AUX_CTL_REG |= (uint8)  UART_TX_FIFO_CLR;
 870              		.loc 1 1360 0
 871 0006 064B     		ldr	r3, .L92
 872 0008 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 873 000a 42F00102 		orr	r2, r2, #1
 874 000e 1A70     		strb	r2, [r3]
1361:Generated_Source\PSoC5/UART.c ****         UART_TXDATA_AUX_CTL_REG &= (uint8) ~UART_TX_FIFO_CLR;
 875              		.loc 1 1361 0
 876 0010 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 877 0012 02F0FE02 		and	r2, r2, #254
 878 0016 1A70     		strb	r2, [r3]
1362:Generated_Source\PSoC5/UART.c ****         CyExitCriticalSection(enableInterrupts);
1363:Generated_Source\PSoC5/UART.c **** 
1364:Generated_Source\PSoC5/UART.c ****     #if (UART_TX_INTERRUPT_ENABLED)
1365:Generated_Source\PSoC5/UART.c **** 
1366:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt. */
1367:Generated_Source\PSoC5/UART.c ****         UART_DisableTxInt();
1368:Generated_Source\PSoC5/UART.c **** 
1369:Generated_Source\PSoC5/UART.c ****         UART_txBufferRead = 0u;
1370:Generated_Source\PSoC5/UART.c ****         UART_txBufferWrite = 0u;
1371:Generated_Source\PSoC5/UART.c **** 
1372:Generated_Source\PSoC5/UART.c ****         /* Enable Tx interrupt. */
1373:Generated_Source\PSoC5/UART.c ****         UART_EnableTxInt();
1374:Generated_Source\PSoC5/UART.c **** 
1375:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_TX_INTERRUPT_ENABLED) */
1376:Generated_Source\PSoC5/UART.c ****     }
 879              		.loc 1 1376 0
 880 0018 BDE80840 		pop	{r3, lr}
 881              		.cfi_restore 14
 882              		.cfi_restore 3
 883              		.cfi_def_cfa_offset 0
1362:Generated_Source\PSoC5/UART.c ****         CyExitCriticalSection(enableInterrupts);
 884              		.loc 1 1362 0
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 41


 885 001c FFF7FEBF 		b	CyExitCriticalSection
 886              	.LVL49:
 887              	.L93:
 888              		.align	2
 889              	.L92:
 890 0020 98650040 		.word	1073767832
 891              		.cfi_endproc
 892              	.LFE24:
 893              		.size	UART_ClearTxBuffer, .-UART_ClearTxBuffer
 894              		.section	.text.UART_SendBreak,"ax",%progbits
 895              		.align	1
 896              		.global	UART_SendBreak
 897              		.thumb
 898              		.thumb_func
 899              		.type	UART_SendBreak, %function
 900              	UART_SendBreak:
 901              	.LFB25:
1377:Generated_Source\PSoC5/UART.c **** 
1378:Generated_Source\PSoC5/UART.c **** 
1379:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1380:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SendBreak
1381:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1382:Generated_Source\PSoC5/UART.c ****     *
1383:Generated_Source\PSoC5/UART.c ****     * Summary:
1384:Generated_Source\PSoC5/UART.c ****     *  Transmits a break signal on the bus.
1385:Generated_Source\PSoC5/UART.c ****     *
1386:Generated_Source\PSoC5/UART.c ****     * Parameters:
1387:Generated_Source\PSoC5/UART.c ****     *  uint8 retMode:  Send Break return mode. See the following table for options.
1388:Generated_Source\PSoC5/UART.c ****     *   UART_SEND_BREAK - Initialize registers for break, send the Break
1389:Generated_Source\PSoC5/UART.c ****     *       signal and return immediately.
1390:Generated_Source\PSoC5/UART.c ****     *   UART_WAIT_FOR_COMPLETE_REINIT - Wait until break transmission is
1391:Generated_Source\PSoC5/UART.c ****     *       complete, reinitialize registers to normal transmission mode then return
1392:Generated_Source\PSoC5/UART.c ****     *   UART_REINIT - Reinitialize registers to normal transmission mode
1393:Generated_Source\PSoC5/UART.c ****     *       then return.
1394:Generated_Source\PSoC5/UART.c ****     *   UART_SEND_WAIT_REINIT - Performs both options: 
1395:Generated_Source\PSoC5/UART.c ****     *      UART_SEND_BREAK and UART_WAIT_FOR_COMPLETE_REINIT.
1396:Generated_Source\PSoC5/UART.c ****     *      This option is recommended for most cases.
1397:Generated_Source\PSoC5/UART.c ****     *
1398:Generated_Source\PSoC5/UART.c ****     * Return:
1399:Generated_Source\PSoC5/UART.c ****     *  None.
1400:Generated_Source\PSoC5/UART.c ****     *
1401:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1402:Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1403:Generated_Source\PSoC5/UART.c ****     *     initialized.
1404:Generated_Source\PSoC5/UART.c ****     *  txPeriod - static variable, used for keeping TX period configuration.
1405:Generated_Source\PSoC5/UART.c ****     *
1406:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1407:Generated_Source\PSoC5/UART.c ****     *  No.
1408:Generated_Source\PSoC5/UART.c ****     *
1409:Generated_Source\PSoC5/UART.c ****     * Theory:
1410:Generated_Source\PSoC5/UART.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1411:Generated_Source\PSoC5/UART.c ****     *  important to return the registers configuration to normal for continue 8-bit
1412:Generated_Source\PSoC5/UART.c ****     *  operation.
1413:Generated_Source\PSoC5/UART.c ****     *  There are 3 variants for this API usage:
1414:Generated_Source\PSoC5/UART.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1415:Generated_Source\PSoC5/UART.c ****     *     configuration returning. Function will block CPU until transmission
1416:Generated_Source\PSoC5/UART.c ****     *     complete.
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 42


1417:Generated_Source\PSoC5/UART.c ****     *  2) User may want to use blocking time if UART configured to the low speed
1418:Generated_Source\PSoC5/UART.c ****     *     operation
1419:Generated_Source\PSoC5/UART.c ****     *     Example for this case:
1420:Generated_Source\PSoC5/UART.c ****     *     SendBreak(0);     - initialize Break signal transmission
1421:Generated_Source\PSoC5/UART.c ****     *         Add your code here to use CPU time
1422:Generated_Source\PSoC5/UART.c ****     *     SendBreak(1);     - complete Break operation
1423:Generated_Source\PSoC5/UART.c ****     *  3) Same to 2) but user may want to initialize and use the interrupt to
1424:Generated_Source\PSoC5/UART.c ****     *     complete break operation.
1425:Generated_Source\PSoC5/UART.c ****     *     Example for this case:
1426:Generated_Source\PSoC5/UART.c ****     *     Initialize TX interrupt with "TX - On TX Complete" parameter
1427:Generated_Source\PSoC5/UART.c ****     *     SendBreak(0);     - initialize Break signal transmission
1428:Generated_Source\PSoC5/UART.c ****     *         Add your code here to use CPU time
1429:Generated_Source\PSoC5/UART.c ****     *     When interrupt appear with UART_TX_STS_COMPLETE status:
1430:Generated_Source\PSoC5/UART.c ****     *     SendBreak(2);     - complete Break operation
1431:Generated_Source\PSoC5/UART.c ****     *
1432:Generated_Source\PSoC5/UART.c ****     * Side Effects:
1433:Generated_Source\PSoC5/UART.c ****     *  The UART_SendBreak() function initializes registers to send a
1434:Generated_Source\PSoC5/UART.c ****     *  break signal.
1435:Generated_Source\PSoC5/UART.c ****     *  Break signal length depends on the break signal bits configuration.
1436:Generated_Source\PSoC5/UART.c ****     *  The register configuration should be reinitialized before normal 8-bit
1437:Generated_Source\PSoC5/UART.c ****     *  communication can continue.
1438:Generated_Source\PSoC5/UART.c ****     *
1439:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1440:Generated_Source\PSoC5/UART.c ****     void UART_SendBreak(uint8 retMode) 
1441:Generated_Source\PSoC5/UART.c ****     {
 902              		.loc 1 1441 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906              		@ link register save eliminated.
 907              	.LVL50:
1442:Generated_Source\PSoC5/UART.c **** 
1443:Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function*/
1444:Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 908              		.loc 1 1444 0
 909 0000 124B     		ldr	r3, .L117
 910 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 911 0004 02B3     		cbz	r2, .L94
 912              	.LBB14:
1445:Generated_Source\PSoC5/UART.c ****         {
1446:Generated_Source\PSoC5/UART.c ****             /* Set the Counter to 13-bits and transmit a 00 byte */
1447:Generated_Source\PSoC5/UART.c ****             /* When that is done then reset the counter value back */
1448:Generated_Source\PSoC5/UART.c ****             uint8 tmpStat;
1449:Generated_Source\PSoC5/UART.c **** 
1450:Generated_Source\PSoC5/UART.c ****         #if(UART_HD_ENABLED) /* Half Duplex mode*/
1451:Generated_Source\PSoC5/UART.c **** 
1452:Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_SEND_BREAK) ||
1453:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT ) )
1454:Generated_Source\PSoC5/UART.c ****             {
1455:Generated_Source\PSoC5/UART.c ****                 /* CTRL_HD_SEND_BREAK - sends break bits in HD mode */
1456:Generated_Source\PSoC5/UART.c ****                 UART_WriteControlRegister(UART_ReadControlRegister() |
1457:Generated_Source\PSoC5/UART.c ****                                                       UART_CTRL_HD_SEND_BREAK);
1458:Generated_Source\PSoC5/UART.c ****                 /* Send zeros */
1459:Generated_Source\PSoC5/UART.c ****                 UART_TXDATA_REG = 0u;
1460:Generated_Source\PSoC5/UART.c **** 
1461:Generated_Source\PSoC5/UART.c ****                 do /* Wait until transmit starts */
1462:Generated_Source\PSoC5/UART.c ****                 {
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 43


1463:Generated_Source\PSoC5/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
1464:Generated_Source\PSoC5/UART.c ****                 }
1465:Generated_Source\PSoC5/UART.c ****                 while((tmpStat & UART_TX_STS_FIFO_EMPTY) != 0u);
1466:Generated_Source\PSoC5/UART.c ****             }
1467:Generated_Source\PSoC5/UART.c **** 
1468:Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
1469:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1470:Generated_Source\PSoC5/UART.c ****             {
1471:Generated_Source\PSoC5/UART.c ****                 do /* Wait until transmit complete */
1472:Generated_Source\PSoC5/UART.c ****                 {
1473:Generated_Source\PSoC5/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
1474:Generated_Source\PSoC5/UART.c ****                 }
1475:Generated_Source\PSoC5/UART.c ****                 while(((uint8)~tmpStat & UART_TX_STS_COMPLETE) != 0u);
1476:Generated_Source\PSoC5/UART.c ****             }
1477:Generated_Source\PSoC5/UART.c **** 
1478:Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
1479:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_REINIT) ||
1480:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1481:Generated_Source\PSoC5/UART.c ****             {
1482:Generated_Source\PSoC5/UART.c ****                 UART_WriteControlRegister(UART_ReadControlRegister() &
1483:Generated_Source\PSoC5/UART.c ****                                               (uint8)~UART_CTRL_HD_SEND_BREAK);
1484:Generated_Source\PSoC5/UART.c ****             }
1485:Generated_Source\PSoC5/UART.c **** 
1486:Generated_Source\PSoC5/UART.c ****         #else /* UART_HD_ENABLED Full Duplex mode */
1487:Generated_Source\PSoC5/UART.c **** 
1488:Generated_Source\PSoC5/UART.c ****             static uint8 txPeriod;
1489:Generated_Source\PSoC5/UART.c **** 
1490:Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_SEND_BREAK) ||
 913              		.loc 1 1490 0
 914 0006 08B1     		cbz	r0, .L97
 915              		.loc 1 1490 0 is_stmt 0 discriminator 1
 916 0008 0328     		cmp	r0, #3
 917 000a 1BD1     		bne	.L98
 918              	.L97:
1491:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1492:Generated_Source\PSoC5/UART.c ****             {
1493:Generated_Source\PSoC5/UART.c ****                 /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex mode
1494:Generated_Source\PSoC5/UART.c ****                 #if( (UART_PARITY_TYPE != UART__B_UART__NONE_REVB) || \
1495:Generated_Source\PSoC5/UART.c ****                                     (UART_PARITY_TYPE_SW != 0u) )
1496:Generated_Source\PSoC5/UART.c ****                     UART_WriteControlRegister(UART_ReadControlRegister() |
1497:Generated_Source\PSoC5/UART.c ****                                                           UART_CTRL_HD_SEND_BREAK);
1498:Generated_Source\PSoC5/UART.c ****                 #endif /* End UART_PARITY_TYPE != UART__B_UART__NONE_REVB  */
1499:Generated_Source\PSoC5/UART.c **** 
1500:Generated_Source\PSoC5/UART.c ****                 #if(UART_TXCLKGEN_DP)
1501:Generated_Source\PSoC5/UART.c ****                     txPeriod = UART_TXBITCLKTX_COMPLETE_REG;
 919              		.loc 1 1501 0 is_stmt 1
 920 000c 104A     		ldr	r2, .L117+4
 921 000e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 922 0010 5970     		strb	r1, [r3, #1]
1502:Generated_Source\PSoC5/UART.c ****                     UART_TXBITCLKTX_COMPLETE_REG = UART_TXBITCTR_BREAKBITS;
 923              		.loc 1 1502 0
 924 0012 6721     		movs	r1, #103
 925 0014 1170     		strb	r1, [r2]
1503:Generated_Source\PSoC5/UART.c ****                 #else
1504:Generated_Source\PSoC5/UART.c ****                     txPeriod = UART_TXBITCTR_PERIOD_REG;
1505:Generated_Source\PSoC5/UART.c ****                     UART_TXBITCTR_PERIOD_REG = UART_TXBITCTR_BREAKBITS8X;
1506:Generated_Source\PSoC5/UART.c ****                 #endif /* End UART_TXCLKGEN_DP */
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 44


1507:Generated_Source\PSoC5/UART.c **** 
1508:Generated_Source\PSoC5/UART.c ****                 /* Send zeros */
1509:Generated_Source\PSoC5/UART.c ****                 UART_TXDATA_REG = 0u;
 926              		.loc 1 1509 0
 927 0016 0021     		movs	r1, #0
 928 0018 5173     		strb	r1, [r2, #13]
1510:Generated_Source\PSoC5/UART.c **** 
1511:Generated_Source\PSoC5/UART.c ****                 do /* Wait until transmit starts */
1512:Generated_Source\PSoC5/UART.c ****                 {
1513:Generated_Source\PSoC5/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
 929              		.loc 1 1513 0
 930 001a 0E49     		ldr	r1, .L117+8
 931              	.L99:
 932              		.loc 1 1513 0 is_stmt 0 discriminator 1
 933 001c 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 934              	.LVL51:
1514:Generated_Source\PSoC5/UART.c ****                 }
1515:Generated_Source\PSoC5/UART.c ****                 while((tmpStat & UART_TX_STS_FIFO_EMPTY) != 0u);
 935              		.loc 1 1515 0 is_stmt 1 discriminator 1
 936 001e 9207     		lsls	r2, r2, #30
 937              	.LVL52:
 938 0020 FCD4     		bmi	.L99
1516:Generated_Source\PSoC5/UART.c ****             }
1517:Generated_Source\PSoC5/UART.c **** 
1518:Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
 939              		.loc 1 1518 0
 940 0022 00F0FD02 		and	r2, r0, #253
 941 0026 012A     		cmp	r2, #1
 942              	.L116:
 943 0028 03D0     		beq	.L100
 944              	.L104:
1519:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1520:Generated_Source\PSoC5/UART.c ****             {
1521:Generated_Source\PSoC5/UART.c ****                 do /* Wait until transmit complete */
1522:Generated_Source\PSoC5/UART.c ****                 {
1523:Generated_Source\PSoC5/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
1524:Generated_Source\PSoC5/UART.c ****                 }
1525:Generated_Source\PSoC5/UART.c ****                 while(((uint8)~tmpStat & UART_TX_STS_COMPLETE) != 0u);
1526:Generated_Source\PSoC5/UART.c ****             }
1527:Generated_Source\PSoC5/UART.c **** 
1528:Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
 945              		.loc 1 1528 0
 946 002a 0138     		subs	r0, r0, #1
 947              	.LVL53:
 948 002c 0228     		cmp	r0, #2
 949 002e 05D9     		bls	.L101
 950 0030 7047     		bx	lr
 951              	.LVL54:
 952              	.L100:
1523:Generated_Source\PSoC5/UART.c ****                 }
 953              		.loc 1 1523 0
 954 0032 0849     		ldr	r1, .L117+8
 955              	.L103:
1523:Generated_Source\PSoC5/UART.c ****                 }
 956              		.loc 1 1523 0 is_stmt 0 discriminator 1
 957 0034 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 958              	.LVL55:
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 45


1525:Generated_Source\PSoC5/UART.c ****             }
 959              		.loc 1 1525 0 is_stmt 1 discriminator 1
 960 0036 D207     		lsls	r2, r2, #31
 961              	.LVL56:
 962 0038 FCD5     		bpl	.L103
 963 003a F6E7     		b	.L104
 964              	.LVL57:
 965              	.L101:
1529:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_REINIT) ||
1530:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1531:Generated_Source\PSoC5/UART.c ****             {
1532:Generated_Source\PSoC5/UART.c **** 
1533:Generated_Source\PSoC5/UART.c ****             #if(UART_TXCLKGEN_DP)
1534:Generated_Source\PSoC5/UART.c ****                 UART_TXBITCLKTX_COMPLETE_REG = txPeriod;
 966              		.loc 1 1534 0
 967 003c 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 968 003e 044B     		ldr	r3, .L117+4
 969 0040 1A70     		strb	r2, [r3]
 970              	.LBE14:
1535:Generated_Source\PSoC5/UART.c ****             #else
1536:Generated_Source\PSoC5/UART.c ****                 UART_TXBITCTR_PERIOD_REG = txPeriod;
1537:Generated_Source\PSoC5/UART.c ****             #endif /* End UART_TXCLKGEN_DP */
1538:Generated_Source\PSoC5/UART.c **** 
1539:Generated_Source\PSoC5/UART.c ****             #if( (UART_PARITY_TYPE != UART__B_UART__NONE_REVB) || \
1540:Generated_Source\PSoC5/UART.c ****                  (UART_PARITY_TYPE_SW != 0u) )
1541:Generated_Source\PSoC5/UART.c ****                 UART_WriteControlRegister(UART_ReadControlRegister() &
1542:Generated_Source\PSoC5/UART.c ****                                                       (uint8) ~UART_CTRL_HD_SEND_BREAK);
1543:Generated_Source\PSoC5/UART.c ****             #endif /* End UART_PARITY_TYPE != NONE */
1544:Generated_Source\PSoC5/UART.c ****             }
1545:Generated_Source\PSoC5/UART.c ****         #endif    /* End UART_HD_ENABLED */
1546:Generated_Source\PSoC5/UART.c ****         }
1547:Generated_Source\PSoC5/UART.c ****     }
 971              		.loc 1 1547 0
 972 0042 7047     		bx	lr
 973              	.LVL58:
 974              	.L98:
 975              	.LBB15:
1518:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
 976              		.loc 1 1518 0
 977 0044 0128     		cmp	r0, #1
 978 0046 EFE7     		b	.L116
 979              	.L94:
 980 0048 7047     		bx	lr
 981              	.L118:
 982 004a 00BF     		.align	2
 983              	.L117:
 984 004c 00000000 		.word	.LANCHOR0
 985 0050 3B650040 		.word	1073767739
 986 0054 6B650040 		.word	1073767787
 987              	.LBE15:
 988              		.cfi_endproc
 989              	.LFE25:
 990              		.size	UART_SendBreak, .-UART_SendBreak
 991              		.section	.text.UART_SetTxAddressMode,"ax",%progbits
 992              		.align	1
 993              		.global	UART_SetTxAddressMode
 994              		.thumb
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 46


 995              		.thumb_func
 996              		.type	UART_SetTxAddressMode, %function
 997              	UART_SetTxAddressMode:
 998              	.LFB26:
1548:Generated_Source\PSoC5/UART.c **** 
1549:Generated_Source\PSoC5/UART.c **** 
1550:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1551:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetTxAddressMode
1552:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1553:Generated_Source\PSoC5/UART.c ****     *
1554:Generated_Source\PSoC5/UART.c ****     * Summary:
1555:Generated_Source\PSoC5/UART.c ****     *  Configures the transmitter to signal the next bytes is address or data.
1556:Generated_Source\PSoC5/UART.c ****     *
1557:Generated_Source\PSoC5/UART.c ****     * Parameters:
1558:Generated_Source\PSoC5/UART.c ****     *  addressMode: 
1559:Generated_Source\PSoC5/UART.c ****     *       UART_SET_SPACE - Configure the transmitter to send the next
1560:Generated_Source\PSoC5/UART.c ****     *                                    byte as a data.
1561:Generated_Source\PSoC5/UART.c ****     *       UART_SET_MARK  - Configure the transmitter to send the next
1562:Generated_Source\PSoC5/UART.c ****     *                                    byte as an address.
1563:Generated_Source\PSoC5/UART.c ****     *
1564:Generated_Source\PSoC5/UART.c ****     * Return:
1565:Generated_Source\PSoC5/UART.c ****     *  None.
1566:Generated_Source\PSoC5/UART.c ****     *
1567:Generated_Source\PSoC5/UART.c ****     * Side Effects:
1568:Generated_Source\PSoC5/UART.c ****     *  This function sets and clears UART_CTRL_MARK bit in the Control
1569:Generated_Source\PSoC5/UART.c ****     *  register.
1570:Generated_Source\PSoC5/UART.c ****     *
1571:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1572:Generated_Source\PSoC5/UART.c ****     void UART_SetTxAddressMode(uint8 addressMode) 
1573:Generated_Source\PSoC5/UART.c ****     {
 999              		.loc 1 1573 0
 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 0
 1002              		@ frame_needed = 0, uses_anonymous_args = 0
 1003              		@ link register save eliminated.
 1004              	.LVL59:
 1005 0000 7047     		bx	lr
 1006              		.cfi_endproc
 1007              	.LFE26:
 1008              		.size	UART_SetTxAddressMode, .-UART_SetTxAddressMode
 1009              		.global	UART_initVar
 1010              		.bss
 1011              		.set	.LANCHOR0,. + 0
 1012              		.type	UART_initVar, %object
 1013              		.size	UART_initVar, 1
 1014              	UART_initVar:
 1015 0000 00       		.space	1
 1016              		.type	txPeriod.5112, %object
 1017              		.size	txPeriod.5112, 1
 1018              	txPeriod.5112:
 1019 0001 00       		.space	1
 1020              		.text
 1021              	.Letext0:
 1022              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 1023              		.file 3 "Generated_Source\\PSoC5\\CyLib.h"
 1024              		.file 4 "Generated_Source\\PSoC5\\UART_IntClock.h"
 1025              		.section	.debug_info,"",%progbits
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 47


 1026              	.Ldebug_info0:
 1027 0000 08060000 		.4byte	0x608
 1028 0004 0400     		.2byte	0x4
 1029 0006 00000000 		.4byte	.Ldebug_abbrev0
 1030 000a 04       		.byte	0x4
 1031 000b 01       		.uleb128 0x1
 1032 000c 83000000 		.4byte	.LASF59
 1033 0010 0C       		.byte	0xc
 1034 0011 0B030000 		.4byte	.LASF60
 1035 0015 59020000 		.4byte	.LASF61
 1036 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 1037 001d 00000000 		.4byte	0
 1038 0021 00000000 		.4byte	.Ldebug_line0
 1039 0025 02       		.uleb128 0x2
 1040 0026 01       		.byte	0x1
 1041 0027 06       		.byte	0x6
 1042 0028 77000000 		.4byte	.LASF0
 1043 002c 02       		.uleb128 0x2
 1044 002d 01       		.byte	0x1
 1045 002e 08       		.byte	0x8
 1046 002f 43030000 		.4byte	.LASF1
 1047 0033 02       		.uleb128 0x2
 1048 0034 02       		.byte	0x2
 1049 0035 05       		.byte	0x5
 1050 0036 62030000 		.4byte	.LASF2
 1051 003a 02       		.uleb128 0x2
 1052 003b 02       		.byte	0x2
 1053 003c 07       		.byte	0x7
 1054 003d FA010000 		.4byte	.LASF3
 1055 0041 02       		.uleb128 0x2
 1056 0042 04       		.byte	0x4
 1057 0043 05       		.byte	0x5
 1058 0044 1A010000 		.4byte	.LASF4
 1059 0048 02       		.uleb128 0x2
 1060 0049 04       		.byte	0x4
 1061 004a 07       		.byte	0x7
 1062 004b BE010000 		.4byte	.LASF5
 1063 004f 02       		.uleb128 0x2
 1064 0050 08       		.byte	0x8
 1065 0051 05       		.byte	0x5
 1066 0052 69000000 		.4byte	.LASF6
 1067 0056 02       		.uleb128 0x2
 1068 0057 08       		.byte	0x8
 1069 0058 07       		.byte	0x7
 1070 0059 2F000000 		.4byte	.LASF7
 1071 005d 03       		.uleb128 0x3
 1072 005e 04       		.byte	0x4
 1073 005f 05       		.byte	0x5
 1074 0060 696E7400 		.ascii	"int\000"
 1075 0064 02       		.uleb128 0x2
 1076 0065 04       		.byte	0x4
 1077 0066 07       		.byte	0x7
 1078 0067 91010000 		.4byte	.LASF8
 1079 006b 04       		.uleb128 0x4
 1080 006c 40010000 		.4byte	.LASF9
 1081 0070 02       		.byte	0x2
 1082 0071 9201     		.2byte	0x192
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 48


 1083 0073 2C000000 		.4byte	0x2c
 1084 0077 04       		.uleb128 0x4
 1085 0078 00000000 		.4byte	.LASF10
 1086 007c 02       		.byte	0x2
 1087 007d 9301     		.2byte	0x193
 1088 007f 3A000000 		.4byte	0x3a
 1089 0083 02       		.uleb128 0x2
 1090 0084 04       		.byte	0x4
 1091 0085 04       		.byte	0x4
 1092 0086 1E040000 		.4byte	.LASF11
 1093 008a 02       		.uleb128 0x2
 1094 008b 08       		.byte	0x8
 1095 008c 04       		.byte	0x4
 1096 008d 5F010000 		.4byte	.LASF12
 1097 0091 04       		.uleb128 0x4
 1098 0092 AF030000 		.4byte	.LASF13
 1099 0096 02       		.byte	0x2
 1100 0097 A301     		.2byte	0x1a3
 1101 0099 9D000000 		.4byte	0x9d
 1102 009d 02       		.uleb128 0x2
 1103 009e 01       		.byte	0x1
 1104 009f 08       		.byte	0x8
 1105 00a0 AA030000 		.4byte	.LASF14
 1106 00a4 04       		.uleb128 0x4
 1107 00a5 3E030000 		.4byte	.LASF15
 1108 00a9 02       		.byte	0x2
 1109 00aa 3C02     		.2byte	0x23c
 1110 00ac B0000000 		.4byte	0xb0
 1111 00b0 05       		.uleb128 0x5
 1112 00b1 6B000000 		.4byte	0x6b
 1113 00b5 02       		.uleb128 0x2
 1114 00b6 08       		.byte	0x8
 1115 00b7 04       		.byte	0x4
 1116 00b8 B5020000 		.4byte	.LASF16
 1117 00bc 02       		.uleb128 0x2
 1118 00bd 04       		.byte	0x4
 1119 00be 07       		.byte	0x7
 1120 00bf AC020000 		.4byte	.LASF17
 1121 00c3 06       		.uleb128 0x6
 1122 00c4 30010000 		.4byte	.LASF18
 1123 00c8 01       		.byte	0x1
 1124 00c9 8801     		.2byte	0x188
 1125 00cb 6B000000 		.4byte	0x6b
 1126 00cf 01       		.byte	0x1
 1127 00d0 E1000000 		.4byte	0xe1
 1128 00d4 07       		.uleb128 0x7
 1129 00d5 85030000 		.4byte	.LASF20
 1130 00d9 01       		.byte	0x1
 1131 00da 8A01     		.2byte	0x18a
 1132 00dc 6B000000 		.4byte	0x6b
 1133 00e0 00       		.byte	0
 1134 00e1 06       		.uleb128 0x6
 1135 00e2 98030000 		.4byte	.LASF19
 1136 00e6 01       		.byte	0x1
 1137 00e7 E501     		.2byte	0x1e5
 1138 00e9 6B000000 		.4byte	0x6b
 1139 00ed 01       		.byte	0x1
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 49


 1140 00ee FF000000 		.4byte	0xff
 1141 00f2 07       		.uleb128 0x7
 1142 00f3 0D040000 		.4byte	.LASF21
 1143 00f7 01       		.byte	0x1
 1144 00f8 E701     		.2byte	0x1e7
 1145 00fa 6B000000 		.4byte	0x6b
 1146 00fe 00       		.byte	0
 1147 00ff 08       		.uleb128 0x8
 1148 0100 72010000 		.4byte	.LASF62
 1149 0104 01       		.byte	0x1
 1150 0105 6A       		.byte	0x6a
 1151 0106 00000000 		.4byte	.LFB1
 1152 010a 24000000 		.4byte	.LFE1-.LFB1
 1153 010e 01       		.uleb128 0x1
 1154 010f 9C       		.byte	0x9c
 1155 0110 09       		.uleb128 0x9
 1156 0111 8C030000 		.4byte	.LASF22
 1157 0115 01       		.byte	0x1
 1158 0116 B7       		.byte	0xb7
 1159 0117 00000000 		.4byte	.LFB2
 1160 011b 3C000000 		.4byte	.LFE2-.LFB2
 1161 011f 01       		.uleb128 0x1
 1162 0120 9C       		.byte	0x9c
 1163 0121 50010000 		.4byte	0x150
 1164 0125 0A       		.uleb128 0xa
 1165 0126 DA030000 		.4byte	.LASF25
 1166 012a 01       		.byte	0x1
 1167 012b B9       		.byte	0xb9
 1168 012c 6B000000 		.4byte	0x6b
 1169 0130 00000000 		.4byte	.LLST0
 1170 0134 0B       		.uleb128 0xb
 1171 0135 06000000 		.4byte	.LVL0
 1172 0139 DF050000 		.4byte	0x5df
 1173 013d 0B       		.uleb128 0xb
 1174 013e 2E000000 		.4byte	.LVL2
 1175 0142 EA050000 		.4byte	0x5ea
 1176 0146 0C       		.uleb128 0xc
 1177 0147 38000000 		.4byte	.LVL4
 1178 014b F5050000 		.4byte	0x5f5
 1179 014f 00       		.byte	0
 1180 0150 09       		.uleb128 0x9
 1181 0151 46000000 		.4byte	.LASF23
 1182 0155 01       		.byte	0x1
 1183 0156 4C       		.byte	0x4c
 1184 0157 00000000 		.4byte	.LFB0
 1185 015b 1C000000 		.4byte	.LFE0-.LFB0
 1186 015f 01       		.uleb128 0x1
 1187 0160 9C       		.byte	0x9c
 1188 0161 78010000 		.4byte	0x178
 1189 0165 0B       		.uleb128 0xb
 1190 0166 0C000000 		.4byte	.LVL5
 1191 016a FF000000 		.4byte	0xff
 1192 016e 0C       		.uleb128 0xc
 1193 016f 18000000 		.4byte	.LVL6
 1194 0173 10010000 		.4byte	0x110
 1195 0177 00       		.byte	0
 1196 0178 09       		.uleb128 0x9
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 50


 1197 0179 14040000 		.4byte	.LASF24
 1198 017d 01       		.byte	0x1
 1199 017e F0       		.byte	0xf0
 1200 017f 00000000 		.4byte	.LFB3
 1201 0183 3C000000 		.4byte	.LFE3-.LFB3
 1202 0187 01       		.uleb128 0x1
 1203 0188 9C       		.byte	0x9c
 1204 0189 B8010000 		.4byte	0x1b8
 1205 018d 0A       		.uleb128 0xa
 1206 018e DA030000 		.4byte	.LASF25
 1207 0192 01       		.byte	0x1
 1208 0193 F2       		.byte	0xf2
 1209 0194 6B000000 		.4byte	0x6b
 1210 0198 13000000 		.4byte	.LLST1
 1211 019c 0B       		.uleb128 0xb
 1212 019d 06000000 		.4byte	.LVL7
 1213 01a1 DF050000 		.4byte	0x5df
 1214 01a5 0B       		.uleb128 0xb
 1215 01a6 16000000 		.4byte	.LVL9
 1216 01aa 00060000 		.4byte	0x600
 1217 01ae 0C       		.uleb128 0xc
 1218 01af 32000000 		.4byte	.LVL11
 1219 01b3 F5050000 		.4byte	0x5f5
 1220 01b7 00       		.byte	0
 1221 01b8 0D       		.uleb128 0xd
 1222 01b9 46010000 		.4byte	.LASF40
 1223 01bd 01       		.byte	0x1
 1224 01be 2701     		.2byte	0x127
 1225 01c0 6B000000 		.4byte	0x6b
 1226 01c4 00000000 		.4byte	.LFB4
 1227 01c8 04000000 		.4byte	.LFE4-.LFB4
 1228 01cc 01       		.uleb128 0x1
 1229 01cd 9C       		.byte	0x9c
 1230 01ce 0E       		.uleb128 0xe
 1231 01cf B5030000 		.4byte	.LASF26
 1232 01d3 01       		.byte	0x1
 1233 01d4 6701     		.2byte	0x167
 1234 01d6 00000000 		.4byte	.LFB6
 1235 01da 0C000000 		.4byte	.LFE6-.LFB6
 1236 01de 01       		.uleb128 0x1
 1237 01df 9C       		.byte	0x9c
 1238 01e0 F3010000 		.4byte	0x1f3
 1239 01e4 0F       		.uleb128 0xf
 1240 01e5 16020000 		.4byte	.LASF34
 1241 01e9 01       		.byte	0x1
 1242 01ea 6701     		.2byte	0x167
 1243 01ec 6B000000 		.4byte	0x6b
 1244 01f0 01       		.uleb128 0x1
 1245 01f1 50       		.byte	0x50
 1246 01f2 00       		.byte	0
 1247 01f3 10       		.uleb128 0x10
 1248 01f4 C3000000 		.4byte	0xc3
 1249 01f8 00000000 		.4byte	.LFB7
 1250 01fc 0C000000 		.4byte	.LFE7-.LFB7
 1251 0200 01       		.uleb128 0x1
 1252 0201 9C       		.byte	0x9c
 1253 0202 0E020000 		.4byte	0x20e
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 51


 1254 0206 11       		.uleb128 0x11
 1255 0207 D4000000 		.4byte	0xd4
 1256 020b 01       		.uleb128 0x1
 1257 020c 50       		.byte	0x50
 1258 020d 00       		.byte	0
 1259 020e 10       		.uleb128 0x10
 1260 020f E1000000 		.4byte	0xe1
 1261 0213 00000000 		.4byte	.LFB8
 1262 0217 10000000 		.4byte	.LFE8-.LFB8
 1263 021b 01       		.uleb128 0x1
 1264 021c 9C       		.byte	0x9c
 1265 021d 2B020000 		.4byte	0x22b
 1266 0221 12       		.uleb128 0x12
 1267 0222 F2000000 		.4byte	0xf2
 1268 0226 26000000 		.4byte	.LLST2
 1269 022a 00       		.byte	0
 1270 022b 13       		.uleb128 0x13
 1271 022c CD030000 		.4byte	.LASF28
 1272 0230 01       		.byte	0x1
 1273 0231 1402     		.2byte	0x214
 1274 0233 6B000000 		.4byte	0x6b
 1275 0237 00000000 		.4byte	.LFB9
 1276 023b 28000000 		.4byte	.LFE9-.LFB9
 1277 023f 01       		.uleb128 0x1
 1278 0240 9C       		.byte	0x9c
 1279 0241 64020000 		.4byte	0x264
 1280 0245 14       		.uleb128 0x14
 1281 0246 85030000 		.4byte	.LASF20
 1282 024a 01       		.byte	0x1
 1283 024b 1602     		.2byte	0x216
 1284 024d 6B000000 		.4byte	0x6b
 1285 0251 3E000000 		.4byte	.LLST3
 1286 0255 15       		.uleb128 0x15
 1287 0256 EF020000 		.4byte	.LASF27
 1288 025a 01       		.byte	0x1
 1289 025b 1702     		.2byte	0x217
 1290 025d 6B000000 		.4byte	0x6b
 1291 0261 01       		.uleb128 0x1
 1292 0262 53       		.byte	0x53
 1293 0263 00       		.byte	0
 1294 0264 13       		.uleb128 0x13
 1295 0265 84010000 		.4byte	.LASF29
 1296 0269 01       		.byte	0x1
 1297 026a 7A02     		.2byte	0x27a
 1298 026c 77000000 		.4byte	0x77
 1299 0270 00000000 		.4byte	.LFB10
 1300 0274 1C000000 		.4byte	.LFE10-.LFB10
 1301 0278 01       		.uleb128 0x1
 1302 0279 9C       		.byte	0x9c
 1303 027a BB020000 		.4byte	0x2bb
 1304 027e 16       		.uleb128 0x16
 1305 027f E1000000 		.4byte	0xe1
 1306 0283 00000000 		.4byte	.LBB6
 1307 0287 00000000 		.4byte	.Ldebug_ranges0+0
 1308 028b 01       		.byte	0x1
 1309 028c 8602     		.2byte	0x286
 1310 028e 9E020000 		.4byte	0x29e
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 52


 1311 0292 17       		.uleb128 0x17
 1312 0293 00000000 		.4byte	.Ldebug_ranges0+0
 1313 0297 18       		.uleb128 0x18
 1314 0298 F2000000 		.4byte	0xf2
 1315 029c 00       		.byte	0
 1316 029d 00       		.byte	0
 1317 029e 19       		.uleb128 0x19
 1318 029f C3000000 		.4byte	0xc3
 1319 02a3 02000000 		.4byte	.LBB9
 1320 02a7 18000000 		.4byte	.Ldebug_ranges0+0x18
 1321 02ab 01       		.byte	0x1
 1322 02ac 8602     		.2byte	0x286
 1323 02ae 17       		.uleb128 0x17
 1324 02af 18000000 		.4byte	.Ldebug_ranges0+0x18
 1325 02b3 18       		.uleb128 0x18
 1326 02b4 D4000000 		.4byte	0xd4
 1327 02b8 00       		.byte	0
 1328 02b9 00       		.byte	0
 1329 02ba 00       		.byte	0
 1330 02bb 13       		.uleb128 0x13
 1331 02bc F8030000 		.4byte	.LASF30
 1332 02c0 01       		.byte	0x1
 1333 02c1 AB02     		.2byte	0x2ab
 1334 02c3 6B000000 		.4byte	0x6b
 1335 02c7 00000000 		.4byte	.LFB11
 1336 02cb 10000000 		.4byte	.LFE11-.LFB11
 1337 02cf 01       		.uleb128 0x1
 1338 02d0 9C       		.byte	0x9c
 1339 02d1 E6020000 		.4byte	0x2e6
 1340 02d5 14       		.uleb128 0x14
 1341 02d6 F5010000 		.4byte	.LASF31
 1342 02da 01       		.byte	0x1
 1343 02db AE02     		.2byte	0x2ae
 1344 02dd 6B000000 		.4byte	0x6b
 1345 02e1 5D000000 		.4byte	.LLST4
 1346 02e5 00       		.byte	0
 1347 02e6 0E       		.uleb128 0xe
 1348 02e7 33040000 		.4byte	.LASF32
 1349 02eb 01       		.byte	0x1
 1350 02ec F502     		.2byte	0x2f5
 1351 02ee 00000000 		.4byte	.LFB12
 1352 02f2 24000000 		.4byte	.LFE12-.LFB12
 1353 02f6 01       		.uleb128 0x1
 1354 02f7 9C       		.byte	0x9c
 1355 02f8 1F030000 		.4byte	0x31f
 1356 02fc 14       		.uleb128 0x14
 1357 02fd DA030000 		.4byte	.LASF25
 1358 0301 01       		.byte	0x1
 1359 0302 F702     		.2byte	0x2f7
 1360 0304 6B000000 		.4byte	0x6b
 1361 0308 79000000 		.4byte	.LLST5
 1362 030c 0B       		.uleb128 0xb
 1363 030d 06000000 		.4byte	.LVL22
 1364 0311 DF050000 		.4byte	0x5df
 1365 0315 0C       		.uleb128 0xc
 1366 0316 20000000 		.4byte	.LVL23
 1367 031a F5050000 		.4byte	0x5f5
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 53


 1368 031e 00       		.byte	0
 1369 031f 0E       		.uleb128 0xe
 1370 0320 C9020000 		.4byte	.LASF33
 1371 0324 01       		.byte	0x1
 1372 0325 5903     		.2byte	0x359
 1373 0327 00000000 		.4byte	.LFB14
 1374 032b 0C000000 		.4byte	.LFE14-.LFB14
 1375 032f 01       		.uleb128 0x1
 1376 0330 9C       		.byte	0x9c
 1377 0331 44030000 		.4byte	0x344
 1378 0335 0F       		.uleb128 0xf
 1379 0336 C1020000 		.4byte	.LASF35
 1380 033a 01       		.byte	0x1
 1381 033b 5903     		.2byte	0x359
 1382 033d 6B000000 		.4byte	0x6b
 1383 0341 01       		.uleb128 0x1
 1384 0342 50       		.byte	0x50
 1385 0343 00       		.byte	0
 1386 0344 0E       		.uleb128 0xe
 1387 0345 DC020000 		.4byte	.LASF36
 1388 0349 01       		.byte	0x1
 1389 034a 6D03     		.2byte	0x36d
 1390 034c 00000000 		.4byte	.LFB15
 1391 0350 0C000000 		.4byte	.LFE15-.LFB15
 1392 0354 01       		.uleb128 0x1
 1393 0355 9C       		.byte	0x9c
 1394 0356 69030000 		.4byte	0x369
 1395 035a 0F       		.uleb128 0xf
 1396 035b C1020000 		.4byte	.LASF35
 1397 035f 01       		.byte	0x1
 1398 0360 6D03     		.2byte	0x36d
 1399 0362 6B000000 		.4byte	0x6b
 1400 0366 01       		.uleb128 0x1
 1401 0367 50       		.byte	0x50
 1402 0368 00       		.byte	0
 1403 0369 0E       		.uleb128 0xe
 1404 036a 51000000 		.4byte	.LASF37
 1405 036e 01       		.byte	0x1
 1406 036f 8C03     		.2byte	0x38c
 1407 0371 00000000 		.4byte	.LFB16
 1408 0375 0C000000 		.4byte	.LFE16-.LFB16
 1409 0379 01       		.uleb128 0x1
 1410 037a 9C       		.byte	0x9c
 1411 037b 8E030000 		.4byte	0x38e
 1412 037f 0F       		.uleb128 0xf
 1413 0380 16020000 		.4byte	.LASF34
 1414 0384 01       		.byte	0x1
 1415 0385 8C03     		.2byte	0x38c
 1416 0387 6B000000 		.4byte	0x6b
 1417 038b 01       		.uleb128 0x1
 1418 038c 50       		.byte	0x50
 1419 038d 00       		.byte	0
 1420 038e 0E       		.uleb128 0xe
 1421 038f 51030000 		.4byte	.LASF38
 1422 0393 01       		.byte	0x1
 1423 0394 AE03     		.2byte	0x3ae
 1424 0396 00000000 		.4byte	.LFB17
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 54


 1425 039a 14000000 		.4byte	.LFE17-.LFB17
 1426 039e 01       		.uleb128 0x1
 1427 039f 9C       		.byte	0x9c
 1428 03a0 B3030000 		.4byte	0x3b3
 1429 03a4 0F       		.uleb128 0xf
 1430 03a5 1D000000 		.4byte	.LASF39
 1431 03a9 01       		.byte	0x1
 1432 03aa AE03     		.2byte	0x3ae
 1433 03ac 6B000000 		.4byte	0x6b
 1434 03b0 01       		.uleb128 0x1
 1435 03b1 50       		.byte	0x50
 1436 03b2 00       		.byte	0
 1437 03b3 0D       		.uleb128 0xd
 1438 03b4 33020000 		.4byte	.LASF41
 1439 03b8 01       		.byte	0x1
 1440 03b9 EB03     		.2byte	0x3eb
 1441 03bb 6B000000 		.4byte	0x6b
 1442 03bf 00000000 		.4byte	.LFB18
 1443 03c3 0C000000 		.4byte	.LFE18-.LFB18
 1444 03c7 01       		.uleb128 0x1
 1445 03c8 9C       		.byte	0x9c
 1446 03c9 0E       		.uleb128 0xe
 1447 03ca 23010000 		.4byte	.LASF42
 1448 03ce 01       		.byte	0x1
 1449 03cf 1104     		.2byte	0x411
 1450 03d1 00000000 		.4byte	.LFB19
 1451 03d5 18000000 		.4byte	.LFE19-.LFB19
 1452 03d9 01       		.uleb128 0x1
 1453 03da 9C       		.byte	0x9c
 1454 03db EE030000 		.4byte	0x3ee
 1455 03df 0F       		.uleb128 0xf
 1456 03e0 1D000000 		.4byte	.LASF39
 1457 03e4 01       		.byte	0x1
 1458 03e5 1104     		.2byte	0x411
 1459 03e7 6B000000 		.4byte	0x6b
 1460 03eb 01       		.uleb128 0x1
 1461 03ec 50       		.byte	0x50
 1462 03ed 00       		.byte	0
 1463 03ee 0E       		.uleb128 0xe
 1464 03ef 24040000 		.4byte	.LASF43
 1465 03f3 01       		.byte	0x1
 1466 03f4 7904     		.2byte	0x479
 1467 03f6 00000000 		.4byte	.LFB20
 1468 03fa 20000000 		.4byte	.LFE20-.LFB20
 1469 03fe 01       		.uleb128 0x1
 1470 03ff 9C       		.byte	0x9c
 1471 0400 2E040000 		.4byte	0x42e
 1472 0404 1A       		.uleb128 0x1a
 1473 0405 28000000 		.4byte	.LASF44
 1474 0409 01       		.byte	0x1
 1475 040a 7904     		.2byte	0x479
 1476 040c 2E040000 		.4byte	0x42e
 1477 0410 8C000000 		.4byte	.LLST6
 1478 0414 14       		.uleb128 0x14
 1479 0415 0D020000 		.4byte	.LASF45
 1480 0419 01       		.byte	0x1
 1481 041a 7B04     		.2byte	0x47b
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 55


 1482 041c 77000000 		.4byte	0x77
 1483 0420 B8000000 		.4byte	.LLST7
 1484 0424 0B       		.uleb128 0xb
 1485 0425 18000000 		.4byte	.LVL32
 1486 0429 C9030000 		.4byte	0x3c9
 1487 042d 00       		.byte	0
 1488 042e 1B       		.uleb128 0x1b
 1489 042f 04       		.byte	0x4
 1490 0430 34040000 		.4byte	0x434
 1491 0434 1C       		.uleb128 0x1c
 1492 0435 91000000 		.4byte	0x91
 1493 0439 0E       		.uleb128 0xe
 1494 043a D0010000 		.4byte	.LASF46
 1495 043e 01       		.byte	0x1
 1496 043f A704     		.2byte	0x4a7
 1497 0441 00000000 		.4byte	.LFB21
 1498 0445 24000000 		.4byte	.LFE21-.LFB21
 1499 0449 01       		.uleb128 0x1
 1500 044a 9C       		.byte	0x9c
 1501 044b 89040000 		.4byte	0x489
 1502 044f 1A       		.uleb128 0x1a
 1503 0450 28000000 		.4byte	.LASF44
 1504 0454 01       		.byte	0x1
 1505 0455 A704     		.2byte	0x4a7
 1506 0457 89040000 		.4byte	0x489
 1507 045b ED000000 		.4byte	.LLST8
 1508 045f 1A       		.uleb128 0x1a
 1509 0460 7B030000 		.4byte	.LASF47
 1510 0464 01       		.byte	0x1
 1511 0465 A704     		.2byte	0x4a7
 1512 0467 6B000000 		.4byte	0x6b
 1513 046b 0E010000 		.4byte	.LLST9
 1514 046f 14       		.uleb128 0x14
 1515 0470 0D020000 		.4byte	.LASF45
 1516 0474 01       		.byte	0x1
 1517 0475 AA04     		.2byte	0x4aa
 1518 0477 6B000000 		.4byte	0x6b
 1519 047b 2F010000 		.4byte	.LLST10
 1520 047f 0B       		.uleb128 0xb
 1521 0480 1A000000 		.4byte	.LVL39
 1522 0484 C9030000 		.4byte	0x3c9
 1523 0488 00       		.byte	0
 1524 0489 1B       		.uleb128 0x1b
 1525 048a 04       		.byte	0x4
 1526 048b 8F040000 		.4byte	0x48f
 1527 048f 1C       		.uleb128 0x1c
 1528 0490 6B000000 		.4byte	0x6b
 1529 0494 0E       		.uleb128 0xe
 1530 0495 B1010000 		.4byte	.LASF48
 1531 0499 01       		.byte	0x1
 1532 049a CE04     		.2byte	0x4ce
 1533 049c 00000000 		.4byte	.LFB22
 1534 04a0 24000000 		.4byte	.LFE22-.LFB22
 1535 04a4 01       		.uleb128 0x1
 1536 04a5 9C       		.byte	0x9c
 1537 04a6 E6040000 		.4byte	0x4e6
 1538 04aa 1A       		.uleb128 0x1a
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 56


 1539 04ab 1D000000 		.4byte	.LASF39
 1540 04af 01       		.byte	0x1
 1541 04b0 CE04     		.2byte	0x4ce
 1542 04b2 6B000000 		.4byte	0x6b
 1543 04b6 69010000 		.4byte	.LLST11
 1544 04ba 0B       		.uleb128 0xb
 1545 04bb 0C000000 		.4byte	.LVL42
 1546 04bf C9030000 		.4byte	0x3c9
 1547 04c3 1D       		.uleb128 0x1d
 1548 04c4 12000000 		.4byte	.LVL43
 1549 04c8 C9030000 		.4byte	0x3c9
 1550 04cc D6040000 		.4byte	0x4d6
 1551 04d0 1E       		.uleb128 0x1e
 1552 04d1 01       		.uleb128 0x1
 1553 04d2 50       		.byte	0x50
 1554 04d3 01       		.uleb128 0x1
 1555 04d4 3D       		.byte	0x3d
 1556 04d5 00       		.byte	0
 1557 04d6 1F       		.uleb128 0x1f
 1558 04d7 1C000000 		.4byte	.LVL44
 1559 04db C9030000 		.4byte	0x3c9
 1560 04df 1E       		.uleb128 0x1e
 1561 04e0 01       		.uleb128 0x1
 1562 04e1 50       		.byte	0x50
 1563 04e2 01       		.uleb128 0x1
 1564 04e3 3A       		.byte	0x3a
 1565 04e4 00       		.byte	0
 1566 04e5 00       		.byte	0
 1567 04e6 13       		.uleb128 0x13
 1568 04e7 29030000 		.4byte	.LASF49
 1569 04eb 01       		.byte	0x1
 1570 04ec F904     		.2byte	0x4f9
 1571 04ee 6B000000 		.4byte	0x6b
 1572 04f2 00000000 		.4byte	.LFB23
 1573 04f6 1C000000 		.4byte	.LFE23-.LFB23
 1574 04fa 01       		.uleb128 0x1
 1575 04fb 9C       		.byte	0x9c
 1576 04fc 11050000 		.4byte	0x511
 1577 0500 14       		.uleb128 0x14
 1578 0501 F5010000 		.4byte	.LASF31
 1579 0505 01       		.byte	0x1
 1580 0506 FC04     		.2byte	0x4fc
 1581 0508 6B000000 		.4byte	0x6b
 1582 050c 95010000 		.4byte	.LLST12
 1583 0510 00       		.byte	0
 1584 0511 0E       		.uleb128 0xe
 1585 0512 9E010000 		.4byte	.LASF50
 1586 0516 01       		.byte	0x1
 1587 0517 4A05     		.2byte	0x54a
 1588 0519 00000000 		.4byte	.LFB24
 1589 051d 24000000 		.4byte	.LFE24-.LFB24
 1590 0521 01       		.uleb128 0x1
 1591 0522 9C       		.byte	0x9c
 1592 0523 4A050000 		.4byte	0x54a
 1593 0527 14       		.uleb128 0x14
 1594 0528 DA030000 		.4byte	.LASF25
 1595 052c 01       		.byte	0x1
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 57


 1596 052d 4C05     		.2byte	0x54c
 1597 052f 6B000000 		.4byte	0x6b
 1598 0533 B3010000 		.4byte	.LLST13
 1599 0537 0B       		.uleb128 0xb
 1600 0538 06000000 		.4byte	.LVL48
 1601 053c DF050000 		.4byte	0x5df
 1602 0540 0C       		.uleb128 0xc
 1603 0541 20000000 		.4byte	.LVL49
 1604 0545 F5050000 		.4byte	0x5f5
 1605 0549 00       		.byte	0
 1606 054a 0E       		.uleb128 0xe
 1607 054b 6C030000 		.4byte	.LASF51
 1608 054f 01       		.byte	0x1
 1609 0550 A005     		.2byte	0x5a0
 1610 0552 00000000 		.4byte	.LFB25
 1611 0556 58000000 		.4byte	.LFE25-.LFB25
 1612 055a 01       		.uleb128 0x1
 1613 055b 9C       		.byte	0x9c
 1614 055c 99050000 		.4byte	0x599
 1615 0560 1A       		.uleb128 0x1a
 1616 0561 7C010000 		.4byte	.LASF52
 1617 0565 01       		.byte	0x1
 1618 0566 A005     		.2byte	0x5a0
 1619 0568 6B000000 		.4byte	0x6b
 1620 056c C6010000 		.4byte	.LLST14
 1621 0570 17       		.uleb128 0x17
 1622 0571 30000000 		.4byte	.Ldebug_ranges0+0x30
 1623 0575 14       		.uleb128 0x14
 1624 0576 A4020000 		.4byte	.LASF53
 1625 057a 01       		.byte	0x1
 1626 057b A805     		.2byte	0x5a8
 1627 057d 6B000000 		.4byte	0x6b
 1628 0581 0B020000 		.4byte	.LLST15
 1629 0585 15       		.uleb128 0x15
 1630 0586 11010000 		.4byte	.LASF54
 1631 058a 01       		.byte	0x1
 1632 058b D005     		.2byte	0x5d0
 1633 058d 6B000000 		.4byte	0x6b
 1634 0591 05       		.uleb128 0x5
 1635 0592 03       		.byte	0x3
 1636 0593 01000000 		.4byte	txPeriod.5112
 1637 0597 00       		.byte	0
 1638 0598 00       		.byte	0
 1639 0599 20       		.uleb128 0x20
 1640 059a 1D020000 		.4byte	.LASF63
 1641 059e 01       		.byte	0x1
 1642 059f 2406     		.2byte	0x624
 1643 05a1 01       		.byte	0x1
 1644 05a2 B3050000 		.4byte	0x5b3
 1645 05a6 21       		.uleb128 0x21
 1646 05a7 66010000 		.4byte	.LASF64
 1647 05ab 01       		.byte	0x1
 1648 05ac 2406     		.2byte	0x624
 1649 05ae 6B000000 		.4byte	0x6b
 1650 05b2 00       		.byte	0
 1651 05b3 10       		.uleb128 0x10
 1652 05b4 99050000 		.4byte	0x599
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 58


 1653 05b8 00000000 		.4byte	.LFB26
 1654 05bc 02000000 		.4byte	.LFE26-.LFB26
 1655 05c0 01       		.uleb128 0x1
 1656 05c1 9C       		.byte	0x9c
 1657 05c2 CE050000 		.4byte	0x5ce
 1658 05c6 22       		.uleb128 0x22
 1659 05c7 A6050000 		.4byte	0x5a6
 1660 05cb 01       		.uleb128 0x1
 1661 05cc 50       		.byte	0x50
 1662 05cd 00       		.byte	0
 1663 05ce 23       		.uleb128 0x23
 1664 05cf EB030000 		.4byte	.LASF65
 1665 05d3 01       		.byte	0x1
 1666 05d4 1B       		.byte	0x1b
 1667 05d5 6B000000 		.4byte	0x6b
 1668 05d9 05       		.uleb128 0x5
 1669 05da 03       		.byte	0x3
 1670 05db 00000000 		.4byte	UART_initVar
 1671 05df 24       		.uleb128 0x24
 1672 05e0 DE010000 		.4byte	.LASF55
 1673 05e4 DE010000 		.4byte	.LASF55
 1674 05e8 03       		.byte	0x3
 1675 05e9 7D       		.byte	0x7d
 1676 05ea 24       		.uleb128 0x24
 1677 05eb 45020000 		.4byte	.LASF56
 1678 05ef 45020000 		.4byte	.LASF56
 1679 05f3 04       		.byte	0x4
 1680 05f4 27       		.byte	0x27
 1681 05f5 24       		.uleb128 0x24
 1682 05f6 07000000 		.4byte	.LASF57
 1683 05fa 07000000 		.4byte	.LASF57
 1684 05fe 03       		.byte	0x3
 1685 05ff 7E       		.byte	0x7e
 1686 0600 24       		.uleb128 0x24
 1687 0601 F8020000 		.4byte	.LASF58
 1688 0605 F8020000 		.4byte	.LASF58
 1689 0609 04       		.byte	0x4
 1690 060a 28       		.byte	0x28
 1691 060b 00       		.byte	0
 1692              		.section	.debug_abbrev,"",%progbits
 1693              	.Ldebug_abbrev0:
 1694 0000 01       		.uleb128 0x1
 1695 0001 11       		.uleb128 0x11
 1696 0002 01       		.byte	0x1
 1697 0003 25       		.uleb128 0x25
 1698 0004 0E       		.uleb128 0xe
 1699 0005 13       		.uleb128 0x13
 1700 0006 0B       		.uleb128 0xb
 1701 0007 03       		.uleb128 0x3
 1702 0008 0E       		.uleb128 0xe
 1703 0009 1B       		.uleb128 0x1b
 1704 000a 0E       		.uleb128 0xe
 1705 000b 55       		.uleb128 0x55
 1706 000c 17       		.uleb128 0x17
 1707 000d 11       		.uleb128 0x11
 1708 000e 01       		.uleb128 0x1
 1709 000f 10       		.uleb128 0x10
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 59


 1710 0010 17       		.uleb128 0x17
 1711 0011 00       		.byte	0
 1712 0012 00       		.byte	0
 1713 0013 02       		.uleb128 0x2
 1714 0014 24       		.uleb128 0x24
 1715 0015 00       		.byte	0
 1716 0016 0B       		.uleb128 0xb
 1717 0017 0B       		.uleb128 0xb
 1718 0018 3E       		.uleb128 0x3e
 1719 0019 0B       		.uleb128 0xb
 1720 001a 03       		.uleb128 0x3
 1721 001b 0E       		.uleb128 0xe
 1722 001c 00       		.byte	0
 1723 001d 00       		.byte	0
 1724 001e 03       		.uleb128 0x3
 1725 001f 24       		.uleb128 0x24
 1726 0020 00       		.byte	0
 1727 0021 0B       		.uleb128 0xb
 1728 0022 0B       		.uleb128 0xb
 1729 0023 3E       		.uleb128 0x3e
 1730 0024 0B       		.uleb128 0xb
 1731 0025 03       		.uleb128 0x3
 1732 0026 08       		.uleb128 0x8
 1733 0027 00       		.byte	0
 1734 0028 00       		.byte	0
 1735 0029 04       		.uleb128 0x4
 1736 002a 16       		.uleb128 0x16
 1737 002b 00       		.byte	0
 1738 002c 03       		.uleb128 0x3
 1739 002d 0E       		.uleb128 0xe
 1740 002e 3A       		.uleb128 0x3a
 1741 002f 0B       		.uleb128 0xb
 1742 0030 3B       		.uleb128 0x3b
 1743 0031 05       		.uleb128 0x5
 1744 0032 49       		.uleb128 0x49
 1745 0033 13       		.uleb128 0x13
 1746 0034 00       		.byte	0
 1747 0035 00       		.byte	0
 1748 0036 05       		.uleb128 0x5
 1749 0037 35       		.uleb128 0x35
 1750 0038 00       		.byte	0
 1751 0039 49       		.uleb128 0x49
 1752 003a 13       		.uleb128 0x13
 1753 003b 00       		.byte	0
 1754 003c 00       		.byte	0
 1755 003d 06       		.uleb128 0x6
 1756 003e 2E       		.uleb128 0x2e
 1757 003f 01       		.byte	0x1
 1758 0040 3F       		.uleb128 0x3f
 1759 0041 19       		.uleb128 0x19
 1760 0042 03       		.uleb128 0x3
 1761 0043 0E       		.uleb128 0xe
 1762 0044 3A       		.uleb128 0x3a
 1763 0045 0B       		.uleb128 0xb
 1764 0046 3B       		.uleb128 0x3b
 1765 0047 05       		.uleb128 0x5
 1766 0048 27       		.uleb128 0x27
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 60


 1767 0049 19       		.uleb128 0x19
 1768 004a 49       		.uleb128 0x49
 1769 004b 13       		.uleb128 0x13
 1770 004c 20       		.uleb128 0x20
 1771 004d 0B       		.uleb128 0xb
 1772 004e 01       		.uleb128 0x1
 1773 004f 13       		.uleb128 0x13
 1774 0050 00       		.byte	0
 1775 0051 00       		.byte	0
 1776 0052 07       		.uleb128 0x7
 1777 0053 34       		.uleb128 0x34
 1778 0054 00       		.byte	0
 1779 0055 03       		.uleb128 0x3
 1780 0056 0E       		.uleb128 0xe
 1781 0057 3A       		.uleb128 0x3a
 1782 0058 0B       		.uleb128 0xb
 1783 0059 3B       		.uleb128 0x3b
 1784 005a 05       		.uleb128 0x5
 1785 005b 49       		.uleb128 0x49
 1786 005c 13       		.uleb128 0x13
 1787 005d 00       		.byte	0
 1788 005e 00       		.byte	0
 1789 005f 08       		.uleb128 0x8
 1790 0060 2E       		.uleb128 0x2e
 1791 0061 00       		.byte	0
 1792 0062 3F       		.uleb128 0x3f
 1793 0063 19       		.uleb128 0x19
 1794 0064 03       		.uleb128 0x3
 1795 0065 0E       		.uleb128 0xe
 1796 0066 3A       		.uleb128 0x3a
 1797 0067 0B       		.uleb128 0xb
 1798 0068 3B       		.uleb128 0x3b
 1799 0069 0B       		.uleb128 0xb
 1800 006a 27       		.uleb128 0x27
 1801 006b 19       		.uleb128 0x19
 1802 006c 11       		.uleb128 0x11
 1803 006d 01       		.uleb128 0x1
 1804 006e 12       		.uleb128 0x12
 1805 006f 06       		.uleb128 0x6
 1806 0070 40       		.uleb128 0x40
 1807 0071 18       		.uleb128 0x18
 1808 0072 9742     		.uleb128 0x2117
 1809 0074 19       		.uleb128 0x19
 1810 0075 00       		.byte	0
 1811 0076 00       		.byte	0
 1812 0077 09       		.uleb128 0x9
 1813 0078 2E       		.uleb128 0x2e
 1814 0079 01       		.byte	0x1
 1815 007a 3F       		.uleb128 0x3f
 1816 007b 19       		.uleb128 0x19
 1817 007c 03       		.uleb128 0x3
 1818 007d 0E       		.uleb128 0xe
 1819 007e 3A       		.uleb128 0x3a
 1820 007f 0B       		.uleb128 0xb
 1821 0080 3B       		.uleb128 0x3b
 1822 0081 0B       		.uleb128 0xb
 1823 0082 27       		.uleb128 0x27
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 61


 1824 0083 19       		.uleb128 0x19
 1825 0084 11       		.uleb128 0x11
 1826 0085 01       		.uleb128 0x1
 1827 0086 12       		.uleb128 0x12
 1828 0087 06       		.uleb128 0x6
 1829 0088 40       		.uleb128 0x40
 1830 0089 18       		.uleb128 0x18
 1831 008a 9742     		.uleb128 0x2117
 1832 008c 19       		.uleb128 0x19
 1833 008d 01       		.uleb128 0x1
 1834 008e 13       		.uleb128 0x13
 1835 008f 00       		.byte	0
 1836 0090 00       		.byte	0
 1837 0091 0A       		.uleb128 0xa
 1838 0092 34       		.uleb128 0x34
 1839 0093 00       		.byte	0
 1840 0094 03       		.uleb128 0x3
 1841 0095 0E       		.uleb128 0xe
 1842 0096 3A       		.uleb128 0x3a
 1843 0097 0B       		.uleb128 0xb
 1844 0098 3B       		.uleb128 0x3b
 1845 0099 0B       		.uleb128 0xb
 1846 009a 49       		.uleb128 0x49
 1847 009b 13       		.uleb128 0x13
 1848 009c 02       		.uleb128 0x2
 1849 009d 17       		.uleb128 0x17
 1850 009e 00       		.byte	0
 1851 009f 00       		.byte	0
 1852 00a0 0B       		.uleb128 0xb
 1853 00a1 898201   		.uleb128 0x4109
 1854 00a4 00       		.byte	0
 1855 00a5 11       		.uleb128 0x11
 1856 00a6 01       		.uleb128 0x1
 1857 00a7 31       		.uleb128 0x31
 1858 00a8 13       		.uleb128 0x13
 1859 00a9 00       		.byte	0
 1860 00aa 00       		.byte	0
 1861 00ab 0C       		.uleb128 0xc
 1862 00ac 898201   		.uleb128 0x4109
 1863 00af 00       		.byte	0
 1864 00b0 11       		.uleb128 0x11
 1865 00b1 01       		.uleb128 0x1
 1866 00b2 9542     		.uleb128 0x2115
 1867 00b4 19       		.uleb128 0x19
 1868 00b5 31       		.uleb128 0x31
 1869 00b6 13       		.uleb128 0x13
 1870 00b7 00       		.byte	0
 1871 00b8 00       		.byte	0
 1872 00b9 0D       		.uleb128 0xd
 1873 00ba 2E       		.uleb128 0x2e
 1874 00bb 00       		.byte	0
 1875 00bc 3F       		.uleb128 0x3f
 1876 00bd 19       		.uleb128 0x19
 1877 00be 03       		.uleb128 0x3
 1878 00bf 0E       		.uleb128 0xe
 1879 00c0 3A       		.uleb128 0x3a
 1880 00c1 0B       		.uleb128 0xb
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 62


 1881 00c2 3B       		.uleb128 0x3b
 1882 00c3 05       		.uleb128 0x5
 1883 00c4 27       		.uleb128 0x27
 1884 00c5 19       		.uleb128 0x19
 1885 00c6 49       		.uleb128 0x49
 1886 00c7 13       		.uleb128 0x13
 1887 00c8 11       		.uleb128 0x11
 1888 00c9 01       		.uleb128 0x1
 1889 00ca 12       		.uleb128 0x12
 1890 00cb 06       		.uleb128 0x6
 1891 00cc 40       		.uleb128 0x40
 1892 00cd 18       		.uleb128 0x18
 1893 00ce 9742     		.uleb128 0x2117
 1894 00d0 19       		.uleb128 0x19
 1895 00d1 00       		.byte	0
 1896 00d2 00       		.byte	0
 1897 00d3 0E       		.uleb128 0xe
 1898 00d4 2E       		.uleb128 0x2e
 1899 00d5 01       		.byte	0x1
 1900 00d6 3F       		.uleb128 0x3f
 1901 00d7 19       		.uleb128 0x19
 1902 00d8 03       		.uleb128 0x3
 1903 00d9 0E       		.uleb128 0xe
 1904 00da 3A       		.uleb128 0x3a
 1905 00db 0B       		.uleb128 0xb
 1906 00dc 3B       		.uleb128 0x3b
 1907 00dd 05       		.uleb128 0x5
 1908 00de 27       		.uleb128 0x27
 1909 00df 19       		.uleb128 0x19
 1910 00e0 11       		.uleb128 0x11
 1911 00e1 01       		.uleb128 0x1
 1912 00e2 12       		.uleb128 0x12
 1913 00e3 06       		.uleb128 0x6
 1914 00e4 40       		.uleb128 0x40
 1915 00e5 18       		.uleb128 0x18
 1916 00e6 9742     		.uleb128 0x2117
 1917 00e8 19       		.uleb128 0x19
 1918 00e9 01       		.uleb128 0x1
 1919 00ea 13       		.uleb128 0x13
 1920 00eb 00       		.byte	0
 1921 00ec 00       		.byte	0
 1922 00ed 0F       		.uleb128 0xf
 1923 00ee 05       		.uleb128 0x5
 1924 00ef 00       		.byte	0
 1925 00f0 03       		.uleb128 0x3
 1926 00f1 0E       		.uleb128 0xe
 1927 00f2 3A       		.uleb128 0x3a
 1928 00f3 0B       		.uleb128 0xb
 1929 00f4 3B       		.uleb128 0x3b
 1930 00f5 05       		.uleb128 0x5
 1931 00f6 49       		.uleb128 0x49
 1932 00f7 13       		.uleb128 0x13
 1933 00f8 02       		.uleb128 0x2
 1934 00f9 18       		.uleb128 0x18
 1935 00fa 00       		.byte	0
 1936 00fb 00       		.byte	0
 1937 00fc 10       		.uleb128 0x10
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 63


 1938 00fd 2E       		.uleb128 0x2e
 1939 00fe 01       		.byte	0x1
 1940 00ff 31       		.uleb128 0x31
 1941 0100 13       		.uleb128 0x13
 1942 0101 11       		.uleb128 0x11
 1943 0102 01       		.uleb128 0x1
 1944 0103 12       		.uleb128 0x12
 1945 0104 06       		.uleb128 0x6
 1946 0105 40       		.uleb128 0x40
 1947 0106 18       		.uleb128 0x18
 1948 0107 9742     		.uleb128 0x2117
 1949 0109 19       		.uleb128 0x19
 1950 010a 01       		.uleb128 0x1
 1951 010b 13       		.uleb128 0x13
 1952 010c 00       		.byte	0
 1953 010d 00       		.byte	0
 1954 010e 11       		.uleb128 0x11
 1955 010f 34       		.uleb128 0x34
 1956 0110 00       		.byte	0
 1957 0111 31       		.uleb128 0x31
 1958 0112 13       		.uleb128 0x13
 1959 0113 02       		.uleb128 0x2
 1960 0114 18       		.uleb128 0x18
 1961 0115 00       		.byte	0
 1962 0116 00       		.byte	0
 1963 0117 12       		.uleb128 0x12
 1964 0118 34       		.uleb128 0x34
 1965 0119 00       		.byte	0
 1966 011a 31       		.uleb128 0x31
 1967 011b 13       		.uleb128 0x13
 1968 011c 02       		.uleb128 0x2
 1969 011d 17       		.uleb128 0x17
 1970 011e 00       		.byte	0
 1971 011f 00       		.byte	0
 1972 0120 13       		.uleb128 0x13
 1973 0121 2E       		.uleb128 0x2e
 1974 0122 01       		.byte	0x1
 1975 0123 3F       		.uleb128 0x3f
 1976 0124 19       		.uleb128 0x19
 1977 0125 03       		.uleb128 0x3
 1978 0126 0E       		.uleb128 0xe
 1979 0127 3A       		.uleb128 0x3a
 1980 0128 0B       		.uleb128 0xb
 1981 0129 3B       		.uleb128 0x3b
 1982 012a 05       		.uleb128 0x5
 1983 012b 27       		.uleb128 0x27
 1984 012c 19       		.uleb128 0x19
 1985 012d 49       		.uleb128 0x49
 1986 012e 13       		.uleb128 0x13
 1987 012f 11       		.uleb128 0x11
 1988 0130 01       		.uleb128 0x1
 1989 0131 12       		.uleb128 0x12
 1990 0132 06       		.uleb128 0x6
 1991 0133 40       		.uleb128 0x40
 1992 0134 18       		.uleb128 0x18
 1993 0135 9742     		.uleb128 0x2117
 1994 0137 19       		.uleb128 0x19
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 64


 1995 0138 01       		.uleb128 0x1
 1996 0139 13       		.uleb128 0x13
 1997 013a 00       		.byte	0
 1998 013b 00       		.byte	0
 1999 013c 14       		.uleb128 0x14
 2000 013d 34       		.uleb128 0x34
 2001 013e 00       		.byte	0
 2002 013f 03       		.uleb128 0x3
 2003 0140 0E       		.uleb128 0xe
 2004 0141 3A       		.uleb128 0x3a
 2005 0142 0B       		.uleb128 0xb
 2006 0143 3B       		.uleb128 0x3b
 2007 0144 05       		.uleb128 0x5
 2008 0145 49       		.uleb128 0x49
 2009 0146 13       		.uleb128 0x13
 2010 0147 02       		.uleb128 0x2
 2011 0148 17       		.uleb128 0x17
 2012 0149 00       		.byte	0
 2013 014a 00       		.byte	0
 2014 014b 15       		.uleb128 0x15
 2015 014c 34       		.uleb128 0x34
 2016 014d 00       		.byte	0
 2017 014e 03       		.uleb128 0x3
 2018 014f 0E       		.uleb128 0xe
 2019 0150 3A       		.uleb128 0x3a
 2020 0151 0B       		.uleb128 0xb
 2021 0152 3B       		.uleb128 0x3b
 2022 0153 05       		.uleb128 0x5
 2023 0154 49       		.uleb128 0x49
 2024 0155 13       		.uleb128 0x13
 2025 0156 02       		.uleb128 0x2
 2026 0157 18       		.uleb128 0x18
 2027 0158 00       		.byte	0
 2028 0159 00       		.byte	0
 2029 015a 16       		.uleb128 0x16
 2030 015b 1D       		.uleb128 0x1d
 2031 015c 01       		.byte	0x1
 2032 015d 31       		.uleb128 0x31
 2033 015e 13       		.uleb128 0x13
 2034 015f 52       		.uleb128 0x52
 2035 0160 01       		.uleb128 0x1
 2036 0161 55       		.uleb128 0x55
 2037 0162 17       		.uleb128 0x17
 2038 0163 58       		.uleb128 0x58
 2039 0164 0B       		.uleb128 0xb
 2040 0165 59       		.uleb128 0x59
 2041 0166 05       		.uleb128 0x5
 2042 0167 01       		.uleb128 0x1
 2043 0168 13       		.uleb128 0x13
 2044 0169 00       		.byte	0
 2045 016a 00       		.byte	0
 2046 016b 17       		.uleb128 0x17
 2047 016c 0B       		.uleb128 0xb
 2048 016d 01       		.byte	0x1
 2049 016e 55       		.uleb128 0x55
 2050 016f 17       		.uleb128 0x17
 2051 0170 00       		.byte	0
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 65


 2052 0171 00       		.byte	0
 2053 0172 18       		.uleb128 0x18
 2054 0173 34       		.uleb128 0x34
 2055 0174 00       		.byte	0
 2056 0175 31       		.uleb128 0x31
 2057 0176 13       		.uleb128 0x13
 2058 0177 00       		.byte	0
 2059 0178 00       		.byte	0
 2060 0179 19       		.uleb128 0x19
 2061 017a 1D       		.uleb128 0x1d
 2062 017b 01       		.byte	0x1
 2063 017c 31       		.uleb128 0x31
 2064 017d 13       		.uleb128 0x13
 2065 017e 52       		.uleb128 0x52
 2066 017f 01       		.uleb128 0x1
 2067 0180 55       		.uleb128 0x55
 2068 0181 17       		.uleb128 0x17
 2069 0182 58       		.uleb128 0x58
 2070 0183 0B       		.uleb128 0xb
 2071 0184 59       		.uleb128 0x59
 2072 0185 05       		.uleb128 0x5
 2073 0186 00       		.byte	0
 2074 0187 00       		.byte	0
 2075 0188 1A       		.uleb128 0x1a
 2076 0189 05       		.uleb128 0x5
 2077 018a 00       		.byte	0
 2078 018b 03       		.uleb128 0x3
 2079 018c 0E       		.uleb128 0xe
 2080 018d 3A       		.uleb128 0x3a
 2081 018e 0B       		.uleb128 0xb
 2082 018f 3B       		.uleb128 0x3b
 2083 0190 05       		.uleb128 0x5
 2084 0191 49       		.uleb128 0x49
 2085 0192 13       		.uleb128 0x13
 2086 0193 02       		.uleb128 0x2
 2087 0194 17       		.uleb128 0x17
 2088 0195 00       		.byte	0
 2089 0196 00       		.byte	0
 2090 0197 1B       		.uleb128 0x1b
 2091 0198 0F       		.uleb128 0xf
 2092 0199 00       		.byte	0
 2093 019a 0B       		.uleb128 0xb
 2094 019b 0B       		.uleb128 0xb
 2095 019c 49       		.uleb128 0x49
 2096 019d 13       		.uleb128 0x13
 2097 019e 00       		.byte	0
 2098 019f 00       		.byte	0
 2099 01a0 1C       		.uleb128 0x1c
 2100 01a1 26       		.uleb128 0x26
 2101 01a2 00       		.byte	0
 2102 01a3 49       		.uleb128 0x49
 2103 01a4 13       		.uleb128 0x13
 2104 01a5 00       		.byte	0
 2105 01a6 00       		.byte	0
 2106 01a7 1D       		.uleb128 0x1d
 2107 01a8 898201   		.uleb128 0x4109
 2108 01ab 01       		.byte	0x1
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 66


 2109 01ac 11       		.uleb128 0x11
 2110 01ad 01       		.uleb128 0x1
 2111 01ae 31       		.uleb128 0x31
 2112 01af 13       		.uleb128 0x13
 2113 01b0 01       		.uleb128 0x1
 2114 01b1 13       		.uleb128 0x13
 2115 01b2 00       		.byte	0
 2116 01b3 00       		.byte	0
 2117 01b4 1E       		.uleb128 0x1e
 2118 01b5 8A8201   		.uleb128 0x410a
 2119 01b8 00       		.byte	0
 2120 01b9 02       		.uleb128 0x2
 2121 01ba 18       		.uleb128 0x18
 2122 01bb 9142     		.uleb128 0x2111
 2123 01bd 18       		.uleb128 0x18
 2124 01be 00       		.byte	0
 2125 01bf 00       		.byte	0
 2126 01c0 1F       		.uleb128 0x1f
 2127 01c1 898201   		.uleb128 0x4109
 2128 01c4 01       		.byte	0x1
 2129 01c5 11       		.uleb128 0x11
 2130 01c6 01       		.uleb128 0x1
 2131 01c7 9542     		.uleb128 0x2115
 2132 01c9 19       		.uleb128 0x19
 2133 01ca 31       		.uleb128 0x31
 2134 01cb 13       		.uleb128 0x13
 2135 01cc 00       		.byte	0
 2136 01cd 00       		.byte	0
 2137 01ce 20       		.uleb128 0x20
 2138 01cf 2E       		.uleb128 0x2e
 2139 01d0 01       		.byte	0x1
 2140 01d1 3F       		.uleb128 0x3f
 2141 01d2 19       		.uleb128 0x19
 2142 01d3 03       		.uleb128 0x3
 2143 01d4 0E       		.uleb128 0xe
 2144 01d5 3A       		.uleb128 0x3a
 2145 01d6 0B       		.uleb128 0xb
 2146 01d7 3B       		.uleb128 0x3b
 2147 01d8 05       		.uleb128 0x5
 2148 01d9 27       		.uleb128 0x27
 2149 01da 19       		.uleb128 0x19
 2150 01db 20       		.uleb128 0x20
 2151 01dc 0B       		.uleb128 0xb
 2152 01dd 01       		.uleb128 0x1
 2153 01de 13       		.uleb128 0x13
 2154 01df 00       		.byte	0
 2155 01e0 00       		.byte	0
 2156 01e1 21       		.uleb128 0x21
 2157 01e2 05       		.uleb128 0x5
 2158 01e3 00       		.byte	0
 2159 01e4 03       		.uleb128 0x3
 2160 01e5 0E       		.uleb128 0xe
 2161 01e6 3A       		.uleb128 0x3a
 2162 01e7 0B       		.uleb128 0xb
 2163 01e8 3B       		.uleb128 0x3b
 2164 01e9 05       		.uleb128 0x5
 2165 01ea 49       		.uleb128 0x49
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 67


 2166 01eb 13       		.uleb128 0x13
 2167 01ec 00       		.byte	0
 2168 01ed 00       		.byte	0
 2169 01ee 22       		.uleb128 0x22
 2170 01ef 05       		.uleb128 0x5
 2171 01f0 00       		.byte	0
 2172 01f1 31       		.uleb128 0x31
 2173 01f2 13       		.uleb128 0x13
 2174 01f3 02       		.uleb128 0x2
 2175 01f4 18       		.uleb128 0x18
 2176 01f5 00       		.byte	0
 2177 01f6 00       		.byte	0
 2178 01f7 23       		.uleb128 0x23
 2179 01f8 34       		.uleb128 0x34
 2180 01f9 00       		.byte	0
 2181 01fa 03       		.uleb128 0x3
 2182 01fb 0E       		.uleb128 0xe
 2183 01fc 3A       		.uleb128 0x3a
 2184 01fd 0B       		.uleb128 0xb
 2185 01fe 3B       		.uleb128 0x3b
 2186 01ff 0B       		.uleb128 0xb
 2187 0200 49       		.uleb128 0x49
 2188 0201 13       		.uleb128 0x13
 2189 0202 3F       		.uleb128 0x3f
 2190 0203 19       		.uleb128 0x19
 2191 0204 02       		.uleb128 0x2
 2192 0205 18       		.uleb128 0x18
 2193 0206 00       		.byte	0
 2194 0207 00       		.byte	0
 2195 0208 24       		.uleb128 0x24
 2196 0209 2E       		.uleb128 0x2e
 2197 020a 00       		.byte	0
 2198 020b 3F       		.uleb128 0x3f
 2199 020c 19       		.uleb128 0x19
 2200 020d 3C       		.uleb128 0x3c
 2201 020e 19       		.uleb128 0x19
 2202 020f 6E       		.uleb128 0x6e
 2203 0210 0E       		.uleb128 0xe
 2204 0211 03       		.uleb128 0x3
 2205 0212 0E       		.uleb128 0xe
 2206 0213 3A       		.uleb128 0x3a
 2207 0214 0B       		.uleb128 0xb
 2208 0215 3B       		.uleb128 0x3b
 2209 0216 0B       		.uleb128 0xb
 2210 0217 00       		.byte	0
 2211 0218 00       		.byte	0
 2212 0219 00       		.byte	0
 2213              		.section	.debug_loc,"",%progbits
 2214              	.Ldebug_loc0:
 2215              	.LLST0:
 2216 0000 08000000 		.4byte	.LVL1
 2217 0004 34000000 		.4byte	.LVL3
 2218 0008 0100     		.2byte	0x1
 2219 000a 54       		.byte	0x54
 2220 000b 00000000 		.4byte	0
 2221 000f 00000000 		.4byte	0
 2222              	.LLST1:
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 68


 2223 0013 08000000 		.4byte	.LVL8
 2224 0017 2E000000 		.4byte	.LVL10
 2225 001b 0100     		.2byte	0x1
 2226 001d 54       		.byte	0x54
 2227 001e 00000000 		.4byte	0
 2228 0022 00000000 		.4byte	0
 2229              	.LLST2:
 2230 0026 04000000 		.4byte	.LVL14
 2231 002a 08000000 		.4byte	.LVL15
 2232 002e 0600     		.2byte	0x6
 2233 0030 70       		.byte	0x70
 2234 0031 00       		.sleb128 0
 2235 0032 08       		.byte	0x8
 2236 0033 7F       		.byte	0x7f
 2237 0034 1A       		.byte	0x1a
 2238 0035 9F       		.byte	0x9f
 2239 0036 00000000 		.4byte	0
 2240 003a 00000000 		.4byte	0
 2241              	.LLST3:
 2242 003e 00000000 		.4byte	.LVL16
 2243 0042 18000000 		.4byte	.LVL18
 2244 0046 0200     		.2byte	0x2
 2245 0048 30       		.byte	0x30
 2246 0049 9F       		.byte	0x9f
 2247 004a 18000000 		.4byte	.LVL18
 2248 004e 28000000 		.4byte	.LFE9
 2249 0052 0100     		.2byte	0x1
 2250 0054 50       		.byte	0x50
 2251 0055 00000000 		.4byte	0
 2252 0059 00000000 		.4byte	0
 2253              	.LLST4:
 2254 005d 04000000 		.4byte	.LVL20
 2255 0061 08000000 		.4byte	.LVL21
 2256 0065 0A00     		.2byte	0xa
 2257 0067 70       		.byte	0x70
 2258 0068 00       		.sleb128 0
 2259 0069 08       		.byte	0x8
 2260 006a 20       		.byte	0x20
 2261 006b 1A       		.byte	0x1a
 2262 006c 48       		.byte	0x48
 2263 006d 24       		.byte	0x24
 2264 006e 30       		.byte	0x30
 2265 006f 2E       		.byte	0x2e
 2266 0070 9F       		.byte	0x9f
 2267 0071 00000000 		.4byte	0
 2268 0075 00000000 		.4byte	0
 2269              	.LLST5:
 2270 0079 06000000 		.4byte	.LVL22
 2271 007d 1F000000 		.4byte	.LVL23-1
 2272 0081 0100     		.2byte	0x1
 2273 0083 50       		.byte	0x50
 2274 0084 00000000 		.4byte	0
 2275 0088 00000000 		.4byte	0
 2276              	.LLST6:
 2277 008c 00000000 		.4byte	.LVL29
 2278 0090 0C000000 		.4byte	.LVL30
 2279 0094 0100     		.2byte	0x1
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 69


 2280 0096 50       		.byte	0x50
 2281 0097 0C000000 		.4byte	.LVL30
 2282 009b 1C000000 		.4byte	.LVL34
 2283 009f 0100     		.2byte	0x1
 2284 00a1 54       		.byte	0x54
 2285 00a2 1C000000 		.4byte	.LVL34
 2286 00a6 20000000 		.4byte	.LFE20
 2287 00aa 0400     		.2byte	0x4
 2288 00ac F3       		.byte	0xf3
 2289 00ad 01       		.uleb128 0x1
 2290 00ae 50       		.byte	0x50
 2291 00af 9F       		.byte	0x9f
 2292 00b0 00000000 		.4byte	0
 2293 00b4 00000000 		.4byte	0
 2294              	.LLST7:
 2295 00b8 00000000 		.4byte	.LVL29
 2296 00bc 0C000000 		.4byte	.LVL30
 2297 00c0 0200     		.2byte	0x2
 2298 00c2 30       		.byte	0x30
 2299 00c3 9F       		.byte	0x9f
 2300 00c4 0C000000 		.4byte	.LVL30
 2301 00c8 0E000000 		.4byte	.LVL31
 2302 00cc 0100     		.2byte	0x1
 2303 00ce 51       		.byte	0x51
 2304 00cf 0E000000 		.4byte	.LVL31
 2305 00d3 17000000 		.4byte	.LVL32-1
 2306 00d7 0100     		.2byte	0x1
 2307 00d9 53       		.byte	0x53
 2308 00da 18000000 		.4byte	.LVL32
 2309 00de 1A000000 		.4byte	.LVL33
 2310 00e2 0100     		.2byte	0x1
 2311 00e4 51       		.byte	0x51
 2312 00e5 00000000 		.4byte	0
 2313 00e9 00000000 		.4byte	0
 2314              	.LLST8:
 2315 00ed 00000000 		.4byte	.LVL35
 2316 00f1 0E000000 		.4byte	.LVL37
 2317 00f5 0100     		.2byte	0x1
 2318 00f7 50       		.byte	0x50
 2319 00f8 0E000000 		.4byte	.LVL37
 2320 00fc 24000000 		.4byte	.LFE21
 2321 0100 0400     		.2byte	0x4
 2322 0102 F3       		.byte	0xf3
 2323 0103 01       		.uleb128 0x1
 2324 0104 50       		.byte	0x50
 2325 0105 9F       		.byte	0x9f
 2326 0106 00000000 		.4byte	0
 2327 010a 00000000 		.4byte	0
 2328              	.LLST9:
 2329 010e 00000000 		.4byte	.LVL35
 2330 0112 0A000000 		.4byte	.LVL36
 2331 0116 0100     		.2byte	0x1
 2332 0118 51       		.byte	0x51
 2333 0119 0A000000 		.4byte	.LVL36
 2334 011d 24000000 		.4byte	.LFE21
 2335 0121 0400     		.2byte	0x4
 2336 0123 F3       		.byte	0xf3
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 70


 2337 0124 01       		.uleb128 0x1
 2338 0125 51       		.byte	0x51
 2339 0126 9F       		.byte	0x9f
 2340 0127 00000000 		.4byte	0
 2341 012b 00000000 		.4byte	0
 2342              	.LLST10:
 2343 012f 00000000 		.4byte	.LVL35
 2344 0133 0E000000 		.4byte	.LVL37
 2345 0137 0200     		.2byte	0x2
 2346 0139 30       		.byte	0x30
 2347 013a 9F       		.byte	0x9f
 2348 013b 0E000000 		.4byte	.LVL37
 2349 013f 16000000 		.4byte	.LVL38
 2350 0143 0900     		.2byte	0x9
 2351 0145 74       		.byte	0x74
 2352 0146 00       		.sleb128 0
 2353 0147 F3       		.byte	0xf3
 2354 0148 01       		.uleb128 0x1
 2355 0149 50       		.byte	0x50
 2356 014a 31       		.byte	0x31
 2357 014b 1C       		.byte	0x1c
 2358 014c 1C       		.byte	0x1c
 2359 014d 9F       		.byte	0x9f
 2360 014e 1A000000 		.4byte	.LVL39
 2361 0152 1C000000 		.4byte	.LVL40
 2362 0156 0900     		.2byte	0x9
 2363 0158 74       		.byte	0x74
 2364 0159 00       		.sleb128 0
 2365 015a F3       		.byte	0xf3
 2366 015b 01       		.uleb128 0x1
 2367 015c 50       		.byte	0x50
 2368 015d 31       		.byte	0x31
 2369 015e 1C       		.byte	0x1c
 2370 015f 1C       		.byte	0x1c
 2371 0160 9F       		.byte	0x9f
 2372 0161 00000000 		.4byte	0
 2373 0165 00000000 		.4byte	0
 2374              	.LLST11:
 2375 0169 00000000 		.4byte	.LVL41
 2376 016d 0B000000 		.4byte	.LVL42-1
 2377 0171 0100     		.2byte	0x1
 2378 0173 50       		.byte	0x50
 2379 0174 0B000000 		.4byte	.LVL42-1
 2380 0178 1C000000 		.4byte	.LVL44
 2381 017c 0400     		.2byte	0x4
 2382 017e F3       		.byte	0xf3
 2383 017f 01       		.uleb128 0x1
 2384 0180 50       		.byte	0x50
 2385 0181 9F       		.byte	0x9f
 2386 0182 1C000000 		.4byte	.LVL44
 2387 0186 24000000 		.4byte	.LFE22
 2388 018a 0100     		.2byte	0x1
 2389 018c 50       		.byte	0x50
 2390 018d 00000000 		.4byte	0
 2391 0191 00000000 		.4byte	0
 2392              	.LLST12:
 2393 0195 06000000 		.4byte	.LVL45
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 71


 2394 0199 0E000000 		.4byte	.LVL46
 2395 019d 0100     		.2byte	0x1
 2396 019f 50       		.byte	0x50
 2397 01a0 14000000 		.4byte	.LVL47
 2398 01a4 1C000000 		.4byte	.LFE23
 2399 01a8 0100     		.2byte	0x1
 2400 01aa 50       		.byte	0x50
 2401 01ab 00000000 		.4byte	0
 2402 01af 00000000 		.4byte	0
 2403              	.LLST13:
 2404 01b3 06000000 		.4byte	.LVL48
 2405 01b7 1F000000 		.4byte	.LVL49-1
 2406 01bb 0100     		.2byte	0x1
 2407 01bd 50       		.byte	0x50
 2408 01be 00000000 		.4byte	0
 2409 01c2 00000000 		.4byte	0
 2410              	.LLST14:
 2411 01c6 00000000 		.4byte	.LVL50
 2412 01ca 2C000000 		.4byte	.LVL53
 2413 01ce 0100     		.2byte	0x1
 2414 01d0 50       		.byte	0x50
 2415 01d1 2C000000 		.4byte	.LVL53
 2416 01d5 32000000 		.4byte	.LVL54
 2417 01d9 0400     		.2byte	0x4
 2418 01db F3       		.byte	0xf3
 2419 01dc 01       		.uleb128 0x1
 2420 01dd 50       		.byte	0x50
 2421 01de 9F       		.byte	0x9f
 2422 01df 32000000 		.4byte	.LVL54
 2423 01e3 3C000000 		.4byte	.LVL57
 2424 01e7 0100     		.2byte	0x1
 2425 01e9 50       		.byte	0x50
 2426 01ea 3C000000 		.4byte	.LVL57
 2427 01ee 44000000 		.4byte	.LVL58
 2428 01f2 0400     		.2byte	0x4
 2429 01f4 F3       		.byte	0xf3
 2430 01f5 01       		.uleb128 0x1
 2431 01f6 50       		.byte	0x50
 2432 01f7 9F       		.byte	0x9f
 2433 01f8 44000000 		.4byte	.LVL58
 2434 01fc 58000000 		.4byte	.LFE25
 2435 0200 0100     		.2byte	0x1
 2436 0202 50       		.byte	0x50
 2437 0203 00000000 		.4byte	0
 2438 0207 00000000 		.4byte	0
 2439              	.LLST15:
 2440 020b 1E000000 		.4byte	.LVL51
 2441 020f 20000000 		.4byte	.LVL52
 2442 0213 0100     		.2byte	0x1
 2443 0215 52       		.byte	0x52
 2444 0216 36000000 		.4byte	.LVL55
 2445 021a 38000000 		.4byte	.LVL56
 2446 021e 0100     		.2byte	0x1
 2447 0220 52       		.byte	0x52
 2448 0221 00000000 		.4byte	0
 2449 0225 00000000 		.4byte	0
 2450              		.section	.debug_aranges,"",%progbits
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 72


 2451 0000 DC000000 		.4byte	0xdc
 2452 0004 0200     		.2byte	0x2
 2453 0006 00000000 		.4byte	.Ldebug_info0
 2454 000a 04       		.byte	0x4
 2455 000b 00       		.byte	0
 2456 000c 0000     		.2byte	0
 2457 000e 0000     		.2byte	0
 2458 0010 00000000 		.4byte	.LFB1
 2459 0014 24000000 		.4byte	.LFE1-.LFB1
 2460 0018 00000000 		.4byte	.LFB2
 2461 001c 3C000000 		.4byte	.LFE2-.LFB2
 2462 0020 00000000 		.4byte	.LFB0
 2463 0024 1C000000 		.4byte	.LFE0-.LFB0
 2464 0028 00000000 		.4byte	.LFB3
 2465 002c 3C000000 		.4byte	.LFE3-.LFB3
 2466 0030 00000000 		.4byte	.LFB4
 2467 0034 04000000 		.4byte	.LFE4-.LFB4
 2468 0038 00000000 		.4byte	.LFB6
 2469 003c 0C000000 		.4byte	.LFE6-.LFB6
 2470 0040 00000000 		.4byte	.LFB7
 2471 0044 0C000000 		.4byte	.LFE7-.LFB7
 2472 0048 00000000 		.4byte	.LFB8
 2473 004c 10000000 		.4byte	.LFE8-.LFB8
 2474 0050 00000000 		.4byte	.LFB9
 2475 0054 28000000 		.4byte	.LFE9-.LFB9
 2476 0058 00000000 		.4byte	.LFB10
 2477 005c 1C000000 		.4byte	.LFE10-.LFB10
 2478 0060 00000000 		.4byte	.LFB11
 2479 0064 10000000 		.4byte	.LFE11-.LFB11
 2480 0068 00000000 		.4byte	.LFB12
 2481 006c 24000000 		.4byte	.LFE12-.LFB12
 2482 0070 00000000 		.4byte	.LFB14
 2483 0074 0C000000 		.4byte	.LFE14-.LFB14
 2484 0078 00000000 		.4byte	.LFB15
 2485 007c 0C000000 		.4byte	.LFE15-.LFB15
 2486 0080 00000000 		.4byte	.LFB16
 2487 0084 0C000000 		.4byte	.LFE16-.LFB16
 2488 0088 00000000 		.4byte	.LFB17
 2489 008c 14000000 		.4byte	.LFE17-.LFB17
 2490 0090 00000000 		.4byte	.LFB18
 2491 0094 0C000000 		.4byte	.LFE18-.LFB18
 2492 0098 00000000 		.4byte	.LFB19
 2493 009c 18000000 		.4byte	.LFE19-.LFB19
 2494 00a0 00000000 		.4byte	.LFB20
 2495 00a4 20000000 		.4byte	.LFE20-.LFB20
 2496 00a8 00000000 		.4byte	.LFB21
 2497 00ac 24000000 		.4byte	.LFE21-.LFB21
 2498 00b0 00000000 		.4byte	.LFB22
 2499 00b4 24000000 		.4byte	.LFE22-.LFB22
 2500 00b8 00000000 		.4byte	.LFB23
 2501 00bc 1C000000 		.4byte	.LFE23-.LFB23
 2502 00c0 00000000 		.4byte	.LFB24
 2503 00c4 24000000 		.4byte	.LFE24-.LFB24
 2504 00c8 00000000 		.4byte	.LFB25
 2505 00cc 58000000 		.4byte	.LFE25-.LFB25
 2506 00d0 00000000 		.4byte	.LFB26
 2507 00d4 02000000 		.4byte	.LFE26-.LFB26
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 73


 2508 00d8 00000000 		.4byte	0
 2509 00dc 00000000 		.4byte	0
 2510              		.section	.debug_ranges,"",%progbits
 2511              	.Ldebug_ranges0:
 2512 0000 00000000 		.4byte	.LBB6
 2513 0004 02000000 		.4byte	.LBE6
 2514 0008 04000000 		.4byte	.LBB12
 2515 000c 06000000 		.4byte	.LBE12
 2516 0010 00000000 		.4byte	0
 2517 0014 00000000 		.4byte	0
 2518 0018 02000000 		.4byte	.LBB9
 2519 001c 04000000 		.4byte	.LBE9
 2520 0020 06000000 		.4byte	.LBB13
 2521 0024 08000000 		.4byte	.LBE13
 2522 0028 00000000 		.4byte	0
 2523 002c 00000000 		.4byte	0
 2524 0030 06000000 		.4byte	.LBB14
 2525 0034 42000000 		.4byte	.LBE14
 2526 0038 44000000 		.4byte	.LBB15
 2527 003c 58000000 		.4byte	.LBE15
 2528 0040 00000000 		.4byte	0
 2529 0044 00000000 		.4byte	0
 2530 0048 00000000 		.4byte	.LFB1
 2531 004c 24000000 		.4byte	.LFE1
 2532 0050 00000000 		.4byte	.LFB2
 2533 0054 3C000000 		.4byte	.LFE2
 2534 0058 00000000 		.4byte	.LFB0
 2535 005c 1C000000 		.4byte	.LFE0
 2536 0060 00000000 		.4byte	.LFB3
 2537 0064 3C000000 		.4byte	.LFE3
 2538 0068 00000000 		.4byte	.LFB4
 2539 006c 04000000 		.4byte	.LFE4
 2540 0070 00000000 		.4byte	.LFB6
 2541 0074 0C000000 		.4byte	.LFE6
 2542 0078 00000000 		.4byte	.LFB7
 2543 007c 0C000000 		.4byte	.LFE7
 2544 0080 00000000 		.4byte	.LFB8
 2545 0084 10000000 		.4byte	.LFE8
 2546 0088 00000000 		.4byte	.LFB9
 2547 008c 28000000 		.4byte	.LFE9
 2548 0090 00000000 		.4byte	.LFB10
 2549 0094 1C000000 		.4byte	.LFE10
 2550 0098 00000000 		.4byte	.LFB11
 2551 009c 10000000 		.4byte	.LFE11
 2552 00a0 00000000 		.4byte	.LFB12
 2553 00a4 24000000 		.4byte	.LFE12
 2554 00a8 00000000 		.4byte	.LFB14
 2555 00ac 0C000000 		.4byte	.LFE14
 2556 00b0 00000000 		.4byte	.LFB15
 2557 00b4 0C000000 		.4byte	.LFE15
 2558 00b8 00000000 		.4byte	.LFB16
 2559 00bc 0C000000 		.4byte	.LFE16
 2560 00c0 00000000 		.4byte	.LFB17
 2561 00c4 14000000 		.4byte	.LFE17
 2562 00c8 00000000 		.4byte	.LFB18
 2563 00cc 0C000000 		.4byte	.LFE18
 2564 00d0 00000000 		.4byte	.LFB19
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 74


 2565 00d4 18000000 		.4byte	.LFE19
 2566 00d8 00000000 		.4byte	.LFB20
 2567 00dc 20000000 		.4byte	.LFE20
 2568 00e0 00000000 		.4byte	.LFB21
 2569 00e4 24000000 		.4byte	.LFE21
 2570 00e8 00000000 		.4byte	.LFB22
 2571 00ec 24000000 		.4byte	.LFE22
 2572 00f0 00000000 		.4byte	.LFB23
 2573 00f4 1C000000 		.4byte	.LFE23
 2574 00f8 00000000 		.4byte	.LFB24
 2575 00fc 24000000 		.4byte	.LFE24
 2576 0100 00000000 		.4byte	.LFB25
 2577 0104 58000000 		.4byte	.LFE25
 2578 0108 00000000 		.4byte	.LFB26
 2579 010c 02000000 		.4byte	.LFE26
 2580 0110 00000000 		.4byte	0
 2581 0114 00000000 		.4byte	0
 2582              		.section	.debug_line,"",%progbits
 2583              	.Ldebug_line0:
 2584 0000 BB020000 		.section	.debug_str,"MS",%progbits,1
 2584      02005F00 
 2584      00000201 
 2584      FB0E0D00 
 2584      01010101 
 2585              	.LASF10:
 2586 0000 75696E74 		.ascii	"uint16\000"
 2586      313600
 2587              	.LASF57:
 2588 0007 43794578 		.ascii	"CyExitCriticalSection\000"
 2588      69744372 
 2588      69746963 
 2588      616C5365 
 2588      6374696F 
 2589              	.LASF39:
 2590 001d 74784461 		.ascii	"txDataByte\000"
 2590      74614279 
 2590      746500
 2591              	.LASF44:
 2592 0028 73747269 		.ascii	"string\000"
 2592      6E6700
 2593              	.LASF7:
 2594 002f 6C6F6E67 		.ascii	"long long unsigned int\000"
 2594      206C6F6E 
 2594      6720756E 
 2594      7369676E 
 2594      65642069 
 2595              	.LASF23:
 2596 0046 55415254 		.ascii	"UART_Start\000"
 2596      5F537461 
 2596      727400
 2597              	.LASF37:
 2598 0051 55415254 		.ascii	"UART_SetTxInterruptMode\000"
 2598      5F536574 
 2598      5478496E 
 2598      74657272 
 2598      7570744D 
 2599              	.LASF6:
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 75


 2600 0069 6C6F6E67 		.ascii	"long long int\000"
 2600      206C6F6E 
 2600      6720696E 
 2600      7400
 2601              	.LASF0:
 2602 0077 7369676E 		.ascii	"signed char\000"
 2602      65642063 
 2602      68617200 
 2603              	.LASF59:
 2604 0083 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2604      43313120 
 2604      352E342E 
 2604      31203230 
 2604      31363036 
 2605 00b6 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2605      20726576 
 2605      6973696F 
 2605      6E203233 
 2605      37373135 
 2606 00e9 73202D66 		.ascii	"s -ffunction-sections -ffat-lto-objects\000"
 2606      66756E63 
 2606      74696F6E 
 2606      2D736563 
 2606      74696F6E 
 2607              	.LASF54:
 2608 0111 74785065 		.ascii	"txPeriod\000"
 2608      72696F64 
 2608      00
 2609              	.LASF4:
 2610 011a 6C6F6E67 		.ascii	"long int\000"
 2610      20696E74 
 2610      00
 2611              	.LASF42:
 2612 0123 55415254 		.ascii	"UART_PutChar\000"
 2612      5F507574 
 2612      43686172 
 2612      00
 2613              	.LASF18:
 2614 0130 55415254 		.ascii	"UART_ReadRxData\000"
 2614      5F526561 
 2614      64527844 
 2614      61746100 
 2615              	.LASF9:
 2616 0140 75696E74 		.ascii	"uint8\000"
 2616      3800
 2617              	.LASF40:
 2618 0146 55415254 		.ascii	"UART_ReadControlRegister\000"
 2618      5F526561 
 2618      64436F6E 
 2618      74726F6C 
 2618      52656769 
 2619              	.LASF12:
 2620 015f 646F7562 		.ascii	"double\000"
 2620      6C6500
 2621              	.LASF64:
 2622 0166 61646472 		.ascii	"addressMode\000"
 2622      6573734D 
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 76


 2622      6F646500 
 2623              	.LASF62:
 2624 0172 55415254 		.ascii	"UART_Init\000"
 2624      5F496E69 
 2624      7400
 2625              	.LASF52:
 2626 017c 7265744D 		.ascii	"retMode\000"
 2626      6F646500 
 2627              	.LASF29:
 2628 0184 55415254 		.ascii	"UART_GetByte\000"
 2628      5F476574 
 2628      42797465 
 2628      00
 2629              	.LASF8:
 2630 0191 756E7369 		.ascii	"unsigned int\000"
 2630      676E6564 
 2630      20696E74 
 2630      00
 2631              	.LASF50:
 2632 019e 55415254 		.ascii	"UART_ClearTxBuffer\000"
 2632      5F436C65 
 2632      61725478 
 2632      42756666 
 2632      657200
 2633              	.LASF48:
 2634 01b1 55415254 		.ascii	"UART_PutCRLF\000"
 2634      5F507574 
 2634      43524C46 
 2634      00
 2635              	.LASF5:
 2636 01be 6C6F6E67 		.ascii	"long unsigned int\000"
 2636      20756E73 
 2636      69676E65 
 2636      6420696E 
 2636      7400
 2637              	.LASF46:
 2638 01d0 55415254 		.ascii	"UART_PutArray\000"
 2638      5F507574 
 2638      41727261 
 2638      7900
 2639              	.LASF55:
 2640 01de 4379456E 		.ascii	"CyEnterCriticalSection\000"
 2640      74657243 
 2640      72697469 
 2640      63616C53 
 2640      65637469 
 2641              	.LASF31:
 2642 01f5 73697A65 		.ascii	"size\000"
 2642      00
 2643              	.LASF3:
 2644 01fa 73686F72 		.ascii	"short unsigned int\000"
 2644      7420756E 
 2644      7369676E 
 2644      65642069 
 2644      6E7400
 2645              	.LASF45:
 2646 020d 62756649 		.ascii	"bufIndex\000"
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 77


 2646      6E646578 
 2646      00
 2647              	.LASF34:
 2648 0216 696E7453 		.ascii	"intSrc\000"
 2648      726300
 2649              	.LASF63:
 2650 021d 55415254 		.ascii	"UART_SetTxAddressMode\000"
 2650      5F536574 
 2650      54784164 
 2650      64726573 
 2650      734D6F64 
 2651              	.LASF41:
 2652 0233 55415254 		.ascii	"UART_ReadTxStatus\000"
 2652      5F526561 
 2652      64547853 
 2652      74617475 
 2652      7300
 2653              	.LASF56:
 2654 0245 55415254 		.ascii	"UART_IntClock_Start\000"
 2654      5F496E74 
 2654      436C6F63 
 2654      6B5F5374 
 2654      61727400 
 2655              	.LASF61:
 2656 0259 433A5C55 		.ascii	"C:\\Users\\rens_\\Documents\\platooning\\PSoC\\Plat"
 2656      73657273 
 2656      5C72656E 
 2656      735F5C44 
 2656      6F63756D 
 2657 0286 6F6F6E69 		.ascii	"ooning\\AngleMeasurement.cydsn\000"
 2657      6E675C41 
 2657      6E676C65 
 2657      4D656173 
 2657      7572656D 
 2658              	.LASF53:
 2659 02a4 746D7053 		.ascii	"tmpStat\000"
 2659      74617400 
 2660              	.LASF17:
 2661 02ac 73697A65 		.ascii	"sizetype\000"
 2661      74797065 
 2661      00
 2662              	.LASF16:
 2663 02b5 6C6F6E67 		.ascii	"long double\000"
 2663      20646F75 
 2663      626C6500 
 2664              	.LASF35:
 2665 02c1 61646472 		.ascii	"address\000"
 2665      65737300 
 2666              	.LASF33:
 2667 02c9 55415254 		.ascii	"UART_SetRxAddress1\000"
 2667      5F536574 
 2667      52784164 
 2667      64726573 
 2667      733100
 2668              	.LASF36:
 2669 02dc 55415254 		.ascii	"UART_SetRxAddress2\000"
 2669      5F536574 
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 78


 2669      52784164 
 2669      64726573 
 2669      733200
 2670              	.LASF27:
 2671 02ef 72785374 		.ascii	"rxStatus\000"
 2671      61747573 
 2671      00
 2672              	.LASF58:
 2673 02f8 55415254 		.ascii	"UART_IntClock_Stop\000"
 2673      5F496E74 
 2673      436C6F63 
 2673      6B5F5374 
 2673      6F7000
 2674              	.LASF60:
 2675 030b 47656E65 		.ascii	"Generated_Source\\PSoC5\\UART.c\000"
 2675      72617465 
 2675      645F536F 
 2675      75726365 
 2675      5C50536F 
 2676              	.LASF49:
 2677 0329 55415254 		.ascii	"UART_GetTxBufferSize\000"
 2677      5F476574 
 2677      54784275 
 2677      66666572 
 2677      53697A65 
 2678              	.LASF15:
 2679 033e 72656738 		.ascii	"reg8\000"
 2679      00
 2680              	.LASF1:
 2681 0343 756E7369 		.ascii	"unsigned char\000"
 2681      676E6564 
 2681      20636861 
 2681      7200
 2682              	.LASF38:
 2683 0351 55415254 		.ascii	"UART_WriteTxData\000"
 2683      5F577269 
 2683      74655478 
 2683      44617461 
 2683      00
 2684              	.LASF2:
 2685 0362 73686F72 		.ascii	"short int\000"
 2685      7420696E 
 2685      7400
 2686              	.LASF51:
 2687 036c 55415254 		.ascii	"UART_SendBreak\000"
 2687      5F53656E 
 2687      64427265 
 2687      616B00
 2688              	.LASF47:
 2689 037b 62797465 		.ascii	"byteCount\000"
 2689      436F756E 
 2689      7400
 2690              	.LASF20:
 2691 0385 72784461 		.ascii	"rxData\000"
 2691      746100
 2692              	.LASF22:
 2693 038c 55415254 		.ascii	"UART_Enable\000"
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 79


 2693      5F456E61 
 2693      626C6500 
 2694              	.LASF19:
 2695 0398 55415254 		.ascii	"UART_ReadRxStatus\000"
 2695      5F526561 
 2695      64527853 
 2695      74617475 
 2695      7300
 2696              	.LASF14:
 2697 03aa 63686172 		.ascii	"char\000"
 2697      00
 2698              	.LASF13:
 2699 03af 63686172 		.ascii	"char8\000"
 2699      3800
 2700              	.LASF26:
 2701 03b5 55415254 		.ascii	"UART_SetRxInterruptMode\000"
 2701      5F536574 
 2701      5278496E 
 2701      74657272 
 2701      7570744D 
 2702              	.LASF28:
 2703 03cd 55415254 		.ascii	"UART_GetChar\000"
 2703      5F476574 
 2703      43686172 
 2703      00
 2704              	.LASF25:
 2705 03da 656E6162 		.ascii	"enableInterrupts\000"
 2705      6C65496E 
 2705      74657272 
 2705      75707473 
 2705      00
 2706              	.LASF65:
 2707 03eb 55415254 		.ascii	"UART_initVar\000"
 2707      5F696E69 
 2707      74566172 
 2707      00
 2708              	.LASF30:
 2709 03f8 55415254 		.ascii	"UART_GetRxBufferSize\000"
 2709      5F476574 
 2709      52784275 
 2709      66666572 
 2709      53697A65 
 2710              	.LASF21:
 2711 040d 73746174 		.ascii	"status\000"
 2711      757300
 2712              	.LASF24:
 2713 0414 55415254 		.ascii	"UART_Stop\000"
 2713      5F53746F 
 2713      7000
 2714              	.LASF11:
 2715 041e 666C6F61 		.ascii	"float\000"
 2715      7400
 2716              	.LASF43:
 2717 0424 55415254 		.ascii	"UART_PutString\000"
 2717      5F507574 
 2717      53747269 
 2717      6E6700
ARM GAS  C:\Users\rens_\AppData\Local\Temp\ccrCwQRv.s 			page 80


 2718              	.LASF32:
 2719 0433 55415254 		.ascii	"UART_ClearRxBuffer\000"
 2719      5F436C65 
 2719      61725278 
 2719      42756666 
 2719      657200
 2720              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
